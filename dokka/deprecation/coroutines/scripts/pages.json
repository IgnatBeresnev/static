[{"name":"fun <T : Any> Flow.Publisher<T>.asFlow(): Flow<T>","description":"kotlinx.coroutines.jdk9.asFlow","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/as-flow.html","searchKeys":["asFlow","fun <T : Any> Flow.Publisher<T>.asFlow(): Flow<T>","kotlinx.coroutines.jdk9.asFlow"]},{"name":"fun <T : Any> Flow<T>.asPublisher(context: CoroutineContext = EmptyCoroutineContext): Flow.Publisher<T>","description":"kotlinx.coroutines.jdk9.asPublisher","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/as-publisher.html","searchKeys":["asPublisher","fun <T : Any> Flow<T>.asPublisher(context: CoroutineContext = EmptyCoroutineContext): Flow.Publisher<T>","kotlinx.coroutines.jdk9.asPublisher"]},{"name":"fun <T> flowPublish(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Flow.Publisher<T>","description":"kotlinx.coroutines.jdk9.flowPublish","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/flow-publish.html","searchKeys":["flowPublish","fun <T> flowPublish(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Flow.Publisher<T>","kotlinx.coroutines.jdk9.flowPublish"]},{"name":"inline suspend fun <T> Flow.Publisher<T>.collect(action: (T) -> Unit)","description":"kotlinx.coroutines.jdk9.collect","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/collect.html","searchKeys":["collect","inline suspend fun <T> Flow.Publisher<T>.collect(action: (T) -> Unit)","kotlinx.coroutines.jdk9.collect"]},{"name":"suspend fun <T> Flow.Publisher<T>.awaitFirst(): T","description":"kotlinx.coroutines.jdk9.awaitFirst","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/await-first.html","searchKeys":["awaitFirst","suspend fun <T> Flow.Publisher<T>.awaitFirst(): T","kotlinx.coroutines.jdk9.awaitFirst"]},{"name":"suspend fun <T> Flow.Publisher<T>.awaitFirstOrDefault(default: T): T","description":"kotlinx.coroutines.jdk9.awaitFirstOrDefault","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/await-first-or-default.html","searchKeys":["awaitFirstOrDefault","suspend fun <T> Flow.Publisher<T>.awaitFirstOrDefault(default: T): T","kotlinx.coroutines.jdk9.awaitFirstOrDefault"]},{"name":"suspend fun <T> Flow.Publisher<T>.awaitFirstOrElse(defaultValue: () -> T): T","description":"kotlinx.coroutines.jdk9.awaitFirstOrElse","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/await-first-or-else.html","searchKeys":["awaitFirstOrElse","suspend fun <T> Flow.Publisher<T>.awaitFirstOrElse(defaultValue: () -> T): T","kotlinx.coroutines.jdk9.awaitFirstOrElse"]},{"name":"suspend fun <T> Flow.Publisher<T>.awaitFirstOrNull(): T?","description":"kotlinx.coroutines.jdk9.awaitFirstOrNull","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/await-first-or-null.html","searchKeys":["awaitFirstOrNull","suspend fun <T> Flow.Publisher<T>.awaitFirstOrNull(): T?","kotlinx.coroutines.jdk9.awaitFirstOrNull"]},{"name":"suspend fun <T> Flow.Publisher<T>.awaitLast(): T","description":"kotlinx.coroutines.jdk9.awaitLast","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/await-last.html","searchKeys":["awaitLast","suspend fun <T> Flow.Publisher<T>.awaitLast(): T","kotlinx.coroutines.jdk9.awaitLast"]},{"name":"suspend fun <T> Flow.Publisher<T>.awaitSingle(): T","description":"kotlinx.coroutines.jdk9.awaitSingle","location":"kotlinx-coroutines-jdk9/kotlinx.coroutines.jdk9/await-single.html","searchKeys":["awaitSingle","suspend fun <T> Flow.Publisher<T>.awaitSingle(): T","kotlinx.coroutines.jdk9.awaitSingle"]},{"name":"class ReactorContext(val context: Context) : AbstractCoroutineContextElement","description":"kotlinx.coroutines.reactor.ReactorContext","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-reactor-context/index.html","searchKeys":["ReactorContext","class ReactorContext(val context: Context) : AbstractCoroutineContextElement","kotlinx.coroutines.reactor.ReactorContext"]},{"name":"class SchedulerCoroutineDispatcher(val scheduler: Scheduler) : CoroutineDispatcher, Delay","description":"kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-scheduler-coroutine-dispatcher/index.html","searchKeys":["SchedulerCoroutineDispatcher","class SchedulerCoroutineDispatcher(val scheduler: Scheduler) : CoroutineDispatcher, Delay","kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher"]},{"name":"fun <T : Any> Flow<T>.asFlux(context: CoroutineContext = EmptyCoroutineContext): Flux<T>","description":"kotlinx.coroutines.reactor.asFlux","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/as-flux.html","searchKeys":["asFlux","fun <T : Any> Flow<T>.asFlux(context: CoroutineContext = EmptyCoroutineContext): Flux<T>","kotlinx.coroutines.reactor.asFlux"]},{"name":"fun <T> Deferred<T?>.asMono(context: CoroutineContext): Mono<T>","description":"kotlinx.coroutines.reactor.asMono","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/as-mono.html","searchKeys":["asMono","fun <T> Deferred<T?>.asMono(context: CoroutineContext): Mono<T>","kotlinx.coroutines.reactor.asMono"]},{"name":"fun <T> ReceiveChannel<T>.asFlux(context: CoroutineContext = EmptyCoroutineContext): Flux<T>","description":"kotlinx.coroutines.reactor.asFlux","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/as-flux.html","searchKeys":["asFlux","fun <T> ReceiveChannel<T>.asFlux(context: CoroutineContext = EmptyCoroutineContext): Flux<T>","kotlinx.coroutines.reactor.asFlux"]},{"name":"fun <T> flux(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Flux<T>","description":"kotlinx.coroutines.reactor.flux","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/flux.html","searchKeys":["flux","fun <T> flux(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Flux<T>","kotlinx.coroutines.reactor.flux"]},{"name":"fun <T> mono(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T?): Mono<T>","description":"kotlinx.coroutines.reactor.mono","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/mono.html","searchKeys":["mono","fun <T> mono(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T?): Mono<T>","kotlinx.coroutines.reactor.mono"]},{"name":"fun ContextView.asCoroutineContext(): ReactorContext","description":"kotlinx.coroutines.reactor.asCoroutineContext","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/as-coroutine-context.html","searchKeys":["asCoroutineContext","fun ContextView.asCoroutineContext(): ReactorContext","kotlinx.coroutines.reactor.asCoroutineContext"]},{"name":"fun Job.asMono(context: CoroutineContext): Mono<Unit>","description":"kotlinx.coroutines.reactor.asMono","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/as-mono.html","searchKeys":["asMono","fun Job.asMono(context: CoroutineContext): Mono<Unit>","kotlinx.coroutines.reactor.asMono"]},{"name":"fun ReactorContext(context: Context)","description":"kotlinx.coroutines.reactor.ReactorContext.ReactorContext","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-reactor-context/-reactor-context.html","searchKeys":["ReactorContext","fun ReactorContext(context: Context)","kotlinx.coroutines.reactor.ReactorContext.ReactorContext"]},{"name":"fun ReactorContext(contextView: ContextView)","description":"kotlinx.coroutines.reactor.ReactorContext.ReactorContext","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-reactor-context/-reactor-context.html","searchKeys":["ReactorContext","fun ReactorContext(contextView: ContextView)","kotlinx.coroutines.reactor.ReactorContext.ReactorContext"]},{"name":"fun Scheduler.asCoroutineDispatcher(): SchedulerCoroutineDispatcher","description":"kotlinx.coroutines.reactor.asCoroutineDispatcher","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/as-coroutine-dispatcher.html","searchKeys":["asCoroutineDispatcher","fun Scheduler.asCoroutineDispatcher(): SchedulerCoroutineDispatcher","kotlinx.coroutines.reactor.asCoroutineDispatcher"]},{"name":"fun SchedulerCoroutineDispatcher(scheduler: Scheduler)","description":"kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.SchedulerCoroutineDispatcher","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-scheduler-coroutine-dispatcher/-scheduler-coroutine-dispatcher.html","searchKeys":["SchedulerCoroutineDispatcher","fun SchedulerCoroutineDispatcher(scheduler: Scheduler)","kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.SchedulerCoroutineDispatcher"]},{"name":"object Key : CoroutineContext.Key<ReactorContext> ","description":"kotlinx.coroutines.reactor.ReactorContext.Key","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-reactor-context/-key/index.html","searchKeys":["Key","object Key : CoroutineContext.Key<ReactorContext> ","kotlinx.coroutines.reactor.ReactorContext.Key"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.equals","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-scheduler-coroutine-dispatcher/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.equals"]},{"name":"open override fun dispatch(context: CoroutineContext, block: Runnable)","description":"kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.dispatch","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-scheduler-coroutine-dispatcher/dispatch.html","searchKeys":["dispatch","open override fun dispatch(context: CoroutineContext, block: Runnable)","kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.dispatch"]},{"name":"open override fun hashCode(): Int","description":"kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.hashCode","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-scheduler-coroutine-dispatcher/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.hashCode"]},{"name":"open override fun invokeOnTimeout(timeMillis: Long, block: Runnable, context: CoroutineContext): DisposableHandle","description":"kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.invokeOnTimeout","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-scheduler-coroutine-dispatcher/invoke-on-timeout.html","searchKeys":["invokeOnTimeout","open override fun invokeOnTimeout(timeMillis: Long, block: Runnable, context: CoroutineContext): DisposableHandle","kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.invokeOnTimeout"]},{"name":"open override fun scheduleResumeAfterDelay(timeMillis: Long, continuation: CancellableContinuation<Unit>)","description":"kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.scheduleResumeAfterDelay","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-scheduler-coroutine-dispatcher/schedule-resume-after-delay.html","searchKeys":["scheduleResumeAfterDelay","open override fun scheduleResumeAfterDelay(timeMillis: Long, continuation: CancellableContinuation<Unit>)","kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.scheduleResumeAfterDelay"]},{"name":"open override fun toString(): String","description":"kotlinx.coroutines.reactor.ReactorContext.toString","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-reactor-context/to-string.html","searchKeys":["toString","open override fun toString(): String","kotlinx.coroutines.reactor.ReactorContext.toString"]},{"name":"open override fun toString(): String","description":"kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.toString","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-scheduler-coroutine-dispatcher/to-string.html","searchKeys":["toString","open override fun toString(): String","kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.toString"]},{"name":"suspend fun <T> Mono<T>.awaitFirst(): T","description":"kotlinx.coroutines.reactor.awaitFirst","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/await-first.html","searchKeys":["awaitFirst","suspend fun <T> Mono<T>.awaitFirst(): T","kotlinx.coroutines.reactor.awaitFirst"]},{"name":"suspend fun <T> Mono<T>.awaitFirstOrDefault(default: T): T","description":"kotlinx.coroutines.reactor.awaitFirstOrDefault","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/await-first-or-default.html","searchKeys":["awaitFirstOrDefault","suspend fun <T> Mono<T>.awaitFirstOrDefault(default: T): T","kotlinx.coroutines.reactor.awaitFirstOrDefault"]},{"name":"suspend fun <T> Mono<T>.awaitFirstOrElse(defaultValue: () -> T): T","description":"kotlinx.coroutines.reactor.awaitFirstOrElse","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/await-first-or-else.html","searchKeys":["awaitFirstOrElse","suspend fun <T> Mono<T>.awaitFirstOrElse(defaultValue: () -> T): T","kotlinx.coroutines.reactor.awaitFirstOrElse"]},{"name":"suspend fun <T> Mono<T>.awaitFirstOrNull(): T?","description":"kotlinx.coroutines.reactor.awaitFirstOrNull","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/await-first-or-null.html","searchKeys":["awaitFirstOrNull","suspend fun <T> Mono<T>.awaitFirstOrNull(): T?","kotlinx.coroutines.reactor.awaitFirstOrNull"]},{"name":"suspend fun <T> Mono<T>.awaitLast(): T","description":"kotlinx.coroutines.reactor.awaitLast","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/await-last.html","searchKeys":["awaitLast","suspend fun <T> Mono<T>.awaitLast(): T","kotlinx.coroutines.reactor.awaitLast"]},{"name":"suspend fun <T> Mono<T>.awaitSingle(): T","description":"kotlinx.coroutines.reactor.awaitSingle","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/await-single.html","searchKeys":["awaitSingle","suspend fun <T> Mono<T>.awaitSingle(): T","kotlinx.coroutines.reactor.awaitSingle"]},{"name":"suspend fun <T> Mono<T>.awaitSingleOrNull(): T?","description":"kotlinx.coroutines.reactor.awaitSingleOrNull","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/await-single-or-null.html","searchKeys":["awaitSingleOrNull","suspend fun <T> Mono<T>.awaitSingleOrNull(): T?","kotlinx.coroutines.reactor.awaitSingleOrNull"]},{"name":"val context: Context","description":"kotlinx.coroutines.reactor.ReactorContext.context","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-reactor-context/context.html","searchKeys":["context","val context: Context","kotlinx.coroutines.reactor.ReactorContext.context"]},{"name":"val scheduler: Scheduler","description":"kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.scheduler","location":"kotlinx-coroutines-reactor/kotlinx.coroutines.reactor/-scheduler-coroutine-dispatcher/scheduler.html","searchKeys":["scheduler","val scheduler: Scheduler","kotlinx.coroutines.reactor.SchedulerCoroutineDispatcher.scheduler"]},{"name":"CREATED","description":"kotlinx.coroutines.debug.State.CREATED","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-state/-c-r-e-a-t-e-d/index.html","searchKeys":["CREATED","CREATED","kotlinx.coroutines.debug.State.CREATED"]},{"name":"RUNNING","description":"kotlinx.coroutines.debug.State.RUNNING","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-state/-r-u-n-n-i-n-g/index.html","searchKeys":["RUNNING","RUNNING","kotlinx.coroutines.debug.State.RUNNING"]},{"name":"SUSPENDED","description":"kotlinx.coroutines.debug.State.SUSPENDED","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-state/-s-u-s-p-e-n-d-e-d/index.html","searchKeys":["SUSPENDED","SUSPENDED","kotlinx.coroutines.debug.State.SUSPENDED"]},{"name":"annotation class CoroutinesTimeout(val testTimeoutMs: Long, val cancelOnTimeout: Boolean = false)","description":"kotlinx.coroutines.debug.junit5.CoroutinesTimeout","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit5/-coroutines-timeout/index.html","searchKeys":["CoroutinesTimeout","annotation class CoroutinesTimeout(val testTimeoutMs: Long, val cancelOnTimeout: Boolean = false)","kotlinx.coroutines.debug.junit5.CoroutinesTimeout"]},{"name":"class CoroutineInfo","description":"kotlinx.coroutines.debug.CoroutineInfo","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutine-info/index.html","searchKeys":["CoroutineInfo","class CoroutineInfo","kotlinx.coroutines.debug.CoroutineInfo"]},{"name":"class CoroutinesBlockHoundIntegration : BlockHoundIntegration","description":"kotlinx.coroutines.debug.CoroutinesBlockHoundIntegration","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutines-block-hound-integration/index.html","searchKeys":["CoroutinesBlockHoundIntegration","class CoroutinesBlockHoundIntegration : BlockHoundIntegration","kotlinx.coroutines.debug.CoroutinesBlockHoundIntegration"]},{"name":"class CoroutinesTimeout(testTimeoutMs: Long, cancelOnTimeout: Boolean = false, enableCoroutineCreationStackTraces: Boolean = true) : TestRule","description":"kotlinx.coroutines.debug.junit4.CoroutinesTimeout","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit4/-coroutines-timeout/index.html","searchKeys":["CoroutinesTimeout","class CoroutinesTimeout(testTimeoutMs: Long, cancelOnTimeout: Boolean = false, enableCoroutineCreationStackTraces: Boolean = true) : TestRule","kotlinx.coroutines.debug.junit4.CoroutinesTimeout"]},{"name":"enum State : Enum<State> ","description":"kotlinx.coroutines.debug.State","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-state/index.html","searchKeys":["State","enum State : Enum<State> ","kotlinx.coroutines.debug.State"]},{"name":"fun CoroutinesBlockHoundIntegration()","description":"kotlinx.coroutines.debug.CoroutinesBlockHoundIntegration.CoroutinesBlockHoundIntegration","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutines-block-hound-integration/-coroutines-block-hound-integration.html","searchKeys":["CoroutinesBlockHoundIntegration","fun CoroutinesBlockHoundIntegration()","kotlinx.coroutines.debug.CoroutinesBlockHoundIntegration.CoroutinesBlockHoundIntegration"]},{"name":"fun CoroutinesTimeout(testTimeoutMs: Long, cancelOnTimeout: Boolean = false)","description":"kotlinx.coroutines.debug.junit4.CoroutinesTimeout.CoroutinesTimeout","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit4/-coroutines-timeout/-coroutines-timeout.html","searchKeys":["CoroutinesTimeout","fun CoroutinesTimeout(testTimeoutMs: Long, cancelOnTimeout: Boolean = false)","kotlinx.coroutines.debug.junit4.CoroutinesTimeout.CoroutinesTimeout"]},{"name":"fun CoroutinesTimeout(testTimeoutMs: Long, cancelOnTimeout: Boolean = false)","description":"kotlinx.coroutines.debug.junit5.CoroutinesTimeout.CoroutinesTimeout","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit5/-coroutines-timeout/-coroutines-timeout.html","searchKeys":["CoroutinesTimeout","fun CoroutinesTimeout(testTimeoutMs: Long, cancelOnTimeout: Boolean = false)","kotlinx.coroutines.debug.junit5.CoroutinesTimeout.CoroutinesTimeout"]},{"name":"fun CoroutinesTimeout(testTimeoutMs: Long, cancelOnTimeout: Boolean = false, enableCoroutineCreationStackTraces: Boolean = true)","description":"kotlinx.coroutines.debug.junit4.CoroutinesTimeout.CoroutinesTimeout","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit4/-coroutines-timeout/-coroutines-timeout.html","searchKeys":["CoroutinesTimeout","fun CoroutinesTimeout(testTimeoutMs: Long, cancelOnTimeout: Boolean = false, enableCoroutineCreationStackTraces: Boolean = true)","kotlinx.coroutines.debug.junit4.CoroutinesTimeout.CoroutinesTimeout"]},{"name":"fun dumpCoroutines(out: PrintStream = System.out)","description":"kotlinx.coroutines.debug.DebugProbes.dumpCoroutines","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/dump-coroutines.html","searchKeys":["dumpCoroutines","fun dumpCoroutines(out: PrintStream = System.out)","kotlinx.coroutines.debug.DebugProbes.dumpCoroutines"]},{"name":"fun dumpCoroutinesInfo(): List<CoroutineInfo>","description":"kotlinx.coroutines.debug.DebugProbes.dumpCoroutinesInfo","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/dump-coroutines-info.html","searchKeys":["dumpCoroutinesInfo","fun dumpCoroutinesInfo(): List<CoroutineInfo>","kotlinx.coroutines.debug.DebugProbes.dumpCoroutinesInfo"]},{"name":"fun install()","description":"kotlinx.coroutines.debug.DebugProbes.install","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/install.html","searchKeys":["install","fun install()","kotlinx.coroutines.debug.DebugProbes.install"]},{"name":"fun jobToString(job: Job): String","description":"kotlinx.coroutines.debug.DebugProbes.jobToString","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/job-to-string.html","searchKeys":["jobToString","fun jobToString(job: Job): String","kotlinx.coroutines.debug.DebugProbes.jobToString"]},{"name":"fun lastObservedStackTrace(): List<StackTraceElement>","description":"kotlinx.coroutines.debug.CoroutineInfo.lastObservedStackTrace","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutine-info/last-observed-stack-trace.html","searchKeys":["lastObservedStackTrace","fun lastObservedStackTrace(): List<StackTraceElement>","kotlinx.coroutines.debug.CoroutineInfo.lastObservedStackTrace"]},{"name":"fun printJob(job: Job, out: PrintStream = System.out)","description":"kotlinx.coroutines.debug.DebugProbes.printJob","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/print-job.html","searchKeys":["printJob","fun printJob(job: Job, out: PrintStream = System.out)","kotlinx.coroutines.debug.DebugProbes.printJob"]},{"name":"fun printScope(scope: CoroutineScope, out: PrintStream = System.out)","description":"kotlinx.coroutines.debug.DebugProbes.printScope","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/print-scope.html","searchKeys":["printScope","fun printScope(scope: CoroutineScope, out: PrintStream = System.out)","kotlinx.coroutines.debug.DebugProbes.printScope"]},{"name":"fun scopeToString(scope: CoroutineScope): String","description":"kotlinx.coroutines.debug.DebugProbes.scopeToString","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/scope-to-string.html","searchKeys":["scopeToString","fun scopeToString(scope: CoroutineScope): String","kotlinx.coroutines.debug.DebugProbes.scopeToString"]},{"name":"fun seconds(seconds: Int, cancelOnTimeout: Boolean = false, enableCoroutineCreationStackTraces: Boolean = true): CoroutinesTimeout","description":"kotlinx.coroutines.debug.junit4.CoroutinesTimeout.Companion.seconds","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit4/-coroutines-timeout/-companion/seconds.html","searchKeys":["seconds","fun seconds(seconds: Int, cancelOnTimeout: Boolean = false, enableCoroutineCreationStackTraces: Boolean = true): CoroutinesTimeout","kotlinx.coroutines.debug.junit4.CoroutinesTimeout.Companion.seconds"]},{"name":"fun seconds(seconds: Long, cancelOnTimeout: Boolean = false, enableCoroutineCreationStackTraces: Boolean = true): CoroutinesTimeout","description":"kotlinx.coroutines.debug.junit4.CoroutinesTimeout.Companion.seconds","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit4/-coroutines-timeout/-companion/seconds.html","searchKeys":["seconds","fun seconds(seconds: Long, cancelOnTimeout: Boolean = false, enableCoroutineCreationStackTraces: Boolean = true): CoroutinesTimeout","kotlinx.coroutines.debug.junit4.CoroutinesTimeout.Companion.seconds"]},{"name":"fun uninstall()","description":"kotlinx.coroutines.debug.DebugProbes.uninstall","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/uninstall.html","searchKeys":["uninstall","fun uninstall()","kotlinx.coroutines.debug.DebugProbes.uninstall"]},{"name":"inline fun withDebugProbes(block: () -> Unit)","description":"kotlinx.coroutines.debug.DebugProbes.withDebugProbes","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/with-debug-probes.html","searchKeys":["withDebugProbes","inline fun withDebugProbes(block: () -> Unit)","kotlinx.coroutines.debug.DebugProbes.withDebugProbes"]},{"name":"object Companion","description":"kotlinx.coroutines.debug.junit4.CoroutinesTimeout.Companion","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit4/-coroutines-timeout/-companion/index.html","searchKeys":["Companion","object Companion","kotlinx.coroutines.debug.junit4.CoroutinesTimeout.Companion"]},{"name":"object DebugProbes","description":"kotlinx.coroutines.debug.DebugProbes","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/index.html","searchKeys":["DebugProbes","object DebugProbes","kotlinx.coroutines.debug.DebugProbes"]},{"name":"open override fun apply(base: Statement, description: Description): Statement","description":"kotlinx.coroutines.debug.junit4.CoroutinesTimeout.apply","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit4/-coroutines-timeout/apply.html","searchKeys":["apply","open override fun apply(base: Statement, description: Description): Statement","kotlinx.coroutines.debug.junit4.CoroutinesTimeout.apply"]},{"name":"open override fun applyTo(builder: BlockHound.Builder)","description":"kotlinx.coroutines.debug.CoroutinesBlockHoundIntegration.applyTo","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutines-block-hound-integration/apply-to.html","searchKeys":["applyTo","open override fun applyTo(builder: BlockHound.Builder)","kotlinx.coroutines.debug.CoroutinesBlockHoundIntegration.applyTo"]},{"name":"open override fun toString(): String","description":"kotlinx.coroutines.debug.CoroutineInfo.toString","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutine-info/to-string.html","searchKeys":["toString","open override fun toString(): String","kotlinx.coroutines.debug.CoroutineInfo.toString"]},{"name":"val cancelOnTimeout: Boolean = false","description":"kotlinx.coroutines.debug.junit5.CoroutinesTimeout.cancelOnTimeout","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit5/-coroutines-timeout/cancel-on-timeout.html","searchKeys":["cancelOnTimeout","val cancelOnTimeout: Boolean = false","kotlinx.coroutines.debug.junit5.CoroutinesTimeout.cancelOnTimeout"]},{"name":"val context: CoroutineContext","description":"kotlinx.coroutines.debug.CoroutineInfo.context","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutine-info/context.html","searchKeys":["context","val context: CoroutineContext","kotlinx.coroutines.debug.CoroutineInfo.context"]},{"name":"val creationStackTrace: List<StackTraceElement>","description":"kotlinx.coroutines.debug.CoroutineInfo.creationStackTrace","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutine-info/creation-stack-trace.html","searchKeys":["creationStackTrace","val creationStackTrace: List<StackTraceElement>","kotlinx.coroutines.debug.CoroutineInfo.creationStackTrace"]},{"name":"val isInstalled: Boolean","description":"kotlinx.coroutines.debug.DebugProbes.isInstalled","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/is-installed.html","searchKeys":["isInstalled","val isInstalled: Boolean","kotlinx.coroutines.debug.DebugProbes.isInstalled"]},{"name":"val job: Job?","description":"kotlinx.coroutines.debug.CoroutineInfo.job","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutine-info/job.html","searchKeys":["job","val job: Job?","kotlinx.coroutines.debug.CoroutineInfo.job"]},{"name":"val state: State","description":"kotlinx.coroutines.debug.CoroutineInfo.state","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-coroutine-info/state.html","searchKeys":["state","val state: State","kotlinx.coroutines.debug.CoroutineInfo.state"]},{"name":"val testTimeoutMs: Long","description":"kotlinx.coroutines.debug.junit5.CoroutinesTimeout.testTimeoutMs","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug.junit5/-coroutines-timeout/test-timeout-ms.html","searchKeys":["testTimeoutMs","val testTimeoutMs: Long","kotlinx.coroutines.debug.junit5.CoroutinesTimeout.testTimeoutMs"]},{"name":"var enableCreationStackTraces: Boolean","description":"kotlinx.coroutines.debug.DebugProbes.enableCreationStackTraces","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/enable-creation-stack-traces.html","searchKeys":["enableCreationStackTraces","var enableCreationStackTraces: Boolean","kotlinx.coroutines.debug.DebugProbes.enableCreationStackTraces"]},{"name":"var sanitizeStackTraces: Boolean","description":"kotlinx.coroutines.debug.DebugProbes.sanitizeStackTraces","location":"kotlinx-coroutines-debug/kotlinx.coroutines.debug/-debug-probes/sanitize-stack-traces.html","searchKeys":["sanitizeStackTraces","var sanitizeStackTraces: Boolean","kotlinx.coroutines.debug.DebugProbes.sanitizeStackTraces"]},{"name":"fun <T> CoroutineScope.future(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> T): ListenableFuture<T>","description":"kotlinx.coroutines.guava.future","location":"kotlinx-coroutines-guava/kotlinx.coroutines.guava/future.html","searchKeys":["future","fun <T> CoroutineScope.future(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> T): ListenableFuture<T>","kotlinx.coroutines.guava.future"]},{"name":"fun <T> Deferred<T>.asListenableFuture(): ListenableFuture<T>","description":"kotlinx.coroutines.guava.asListenableFuture","location":"kotlinx-coroutines-guava/kotlinx.coroutines.guava/as-listenable-future.html","searchKeys":["asListenableFuture","fun <T> Deferred<T>.asListenableFuture(): ListenableFuture<T>","kotlinx.coroutines.guava.asListenableFuture"]},{"name":"fun <T> ListenableFuture<T>.asDeferred(): Deferred<T>","description":"kotlinx.coroutines.guava.asDeferred","location":"kotlinx-coroutines-guava/kotlinx.coroutines.guava/as-deferred.html","searchKeys":["asDeferred","fun <T> ListenableFuture<T>.asDeferred(): Deferred<T>","kotlinx.coroutines.guava.asDeferred"]},{"name":"suspend fun <T> ListenableFuture<T>.await(): T","description":"kotlinx.coroutines.guava.await","location":"kotlinx-coroutines-guava/kotlinx.coroutines.guava/await.html","searchKeys":["await","suspend fun <T> ListenableFuture<T>.await(): T","kotlinx.coroutines.guava.await"]},{"name":"abstract class TestDispatcher : CoroutineDispatcher, Delay","description":"kotlinx.coroutines.test.TestDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-dispatcher/index.html","searchKeys":["TestDispatcher","abstract class TestDispatcher : CoroutineDispatcher, Delay","kotlinx.coroutines.test.TestDispatcher"]},{"name":"abstract fun advanceTimeBy(delayTimeMillis: Long): Long","description":"kotlinx.coroutines.test.DelayController.advanceTimeBy","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/advance-time-by.html","searchKeys":["advanceTimeBy","abstract fun advanceTimeBy(delayTimeMillis: Long): Long","kotlinx.coroutines.test.DelayController.advanceTimeBy"]},{"name":"abstract fun advanceUntilIdle(): Long","description":"kotlinx.coroutines.test.DelayController.advanceUntilIdle","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/advance-until-idle.html","searchKeys":["advanceUntilIdle","abstract fun advanceUntilIdle(): Long","kotlinx.coroutines.test.DelayController.advanceUntilIdle"]},{"name":"abstract fun cleanupTestCoroutines()","description":"kotlinx.coroutines.test.DelayController.cleanupTestCoroutines","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/cleanup-test-coroutines.html","searchKeys":["cleanupTestCoroutines","abstract fun cleanupTestCoroutines()","kotlinx.coroutines.test.DelayController.cleanupTestCoroutines"]},{"name":"abstract fun cleanupTestCoroutines()","description":"kotlinx.coroutines.test.TestCoroutineScope.cleanupTestCoroutines","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scope/cleanup-test-coroutines.html","searchKeys":["cleanupTestCoroutines","abstract fun cleanupTestCoroutines()","kotlinx.coroutines.test.TestCoroutineScope.cleanupTestCoroutines"]},{"name":"abstract fun cleanupTestCoroutines()","description":"kotlinx.coroutines.test.UncaughtExceptionCaptor.cleanupTestCoroutines","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-uncaught-exception-captor/cleanup-test-coroutines.html","searchKeys":["cleanupTestCoroutines","abstract fun cleanupTestCoroutines()","kotlinx.coroutines.test.UncaughtExceptionCaptor.cleanupTestCoroutines"]},{"name":"abstract fun pauseDispatcher()","description":"kotlinx.coroutines.test.DelayController.pauseDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/pause-dispatcher.html","searchKeys":["pauseDispatcher","abstract fun pauseDispatcher()","kotlinx.coroutines.test.DelayController.pauseDispatcher"]},{"name":"abstract fun resumeDispatcher()","description":"kotlinx.coroutines.test.DelayController.resumeDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/resume-dispatcher.html","searchKeys":["resumeDispatcher","abstract fun resumeDispatcher()","kotlinx.coroutines.test.DelayController.resumeDispatcher"]},{"name":"abstract fun runCurrent()","description":"kotlinx.coroutines.test.DelayController.runCurrent","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/run-current.html","searchKeys":["runCurrent","abstract fun runCurrent()","kotlinx.coroutines.test.DelayController.runCurrent"]},{"name":"abstract suspend fun pauseDispatcher(block: suspend () -> Unit)","description":"kotlinx.coroutines.test.DelayController.pauseDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/pause-dispatcher.html","searchKeys":["pauseDispatcher","abstract suspend fun pauseDispatcher(block: suspend () -> Unit)","kotlinx.coroutines.test.DelayController.pauseDispatcher"]},{"name":"abstract val backgroundScope: CoroutineScope","description":"kotlinx.coroutines.test.TestScope.backgroundScope","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-scope/background-scope.html","searchKeys":["backgroundScope","abstract val backgroundScope: CoroutineScope","kotlinx.coroutines.test.TestScope.backgroundScope"]},{"name":"abstract val currentTime: Long","description":"kotlinx.coroutines.test.DelayController.currentTime","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/current-time.html","searchKeys":["currentTime","abstract val currentTime: Long","kotlinx.coroutines.test.DelayController.currentTime"]},{"name":"abstract val scheduler: TestCoroutineScheduler","description":"kotlinx.coroutines.test.TestDispatcher.scheduler","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-dispatcher/scheduler.html","searchKeys":["scheduler","abstract val scheduler: TestCoroutineScheduler","kotlinx.coroutines.test.TestDispatcher.scheduler"]},{"name":"abstract val testScheduler: TestCoroutineScheduler","description":"kotlinx.coroutines.test.TestCoroutineScope.testScheduler","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scope/test-scheduler.html","searchKeys":["testScheduler","abstract val testScheduler: TestCoroutineScheduler","kotlinx.coroutines.test.TestCoroutineScope.testScheduler"]},{"name":"abstract val testScheduler: TestCoroutineScheduler","description":"kotlinx.coroutines.test.TestScope.testScheduler","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-scope/test-scheduler.html","searchKeys":["testScheduler","abstract val testScheduler: TestCoroutineScheduler","kotlinx.coroutines.test.TestScope.testScheduler"]},{"name":"abstract val uncaughtExceptions: List<Throwable>","description":"kotlinx.coroutines.test.UncaughtExceptionCaptor.uncaughtExceptions","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-uncaught-exception-captor/uncaught-exceptions.html","searchKeys":["uncaughtExceptions","abstract val uncaughtExceptions: List<Throwable>","kotlinx.coroutines.test.UncaughtExceptionCaptor.uncaughtExceptions"]},{"name":"class TestCoroutineDispatcher(val scheduler: TestCoroutineScheduler = TestCoroutineScheduler()) : TestDispatcher, Delay, SchedulerAsDelayController","description":"kotlinx.coroutines.test.TestCoroutineDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-dispatcher/index.html","searchKeys":["TestCoroutineDispatcher","class TestCoroutineDispatcher(val scheduler: TestCoroutineScheduler = TestCoroutineScheduler()) : TestDispatcher, Delay, SchedulerAsDelayController","kotlinx.coroutines.test.TestCoroutineDispatcher"]},{"name":"class TestCoroutineExceptionHandler : AbstractCoroutineContextElement, CoroutineExceptionHandler, UncaughtExceptionCaptor","description":"kotlinx.coroutines.test.TestCoroutineExceptionHandler","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-exception-handler/index.html","searchKeys":["TestCoroutineExceptionHandler","class TestCoroutineExceptionHandler : AbstractCoroutineContextElement, CoroutineExceptionHandler, UncaughtExceptionCaptor","kotlinx.coroutines.test.TestCoroutineExceptionHandler"]},{"name":"class TestCoroutineScheduler : AbstractCoroutineContextElement, CoroutineContext.Element","description":"kotlinx.coroutines.test.TestCoroutineScheduler","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scheduler/index.html","searchKeys":["TestCoroutineScheduler","class TestCoroutineScheduler : AbstractCoroutineContextElement, CoroutineContext.Element","kotlinx.coroutines.test.TestCoroutineScheduler"]},{"name":"expect class TestResult","description":"kotlinx.coroutines.test.TestResult","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-result/index.html","searchKeys":["TestResult","expect class TestResult","kotlinx.coroutines.test.TestResult"]},{"name":"fun Dispatchers.resetMain()","description":"kotlinx.coroutines.test.resetMain","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/reset-main.html","searchKeys":["resetMain","fun Dispatchers.resetMain()","kotlinx.coroutines.test.resetMain"]},{"name":"fun Dispatchers.setMain(dispatcher: CoroutineDispatcher)","description":"kotlinx.coroutines.test.setMain","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/set-main.html","searchKeys":["setMain","fun Dispatchers.setMain(dispatcher: CoroutineDispatcher)","kotlinx.coroutines.test.setMain"]},{"name":"fun StandardTestDispatcher(scheduler: TestCoroutineScheduler? = null, name: String? = null): TestDispatcher","description":"kotlinx.coroutines.test.StandardTestDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-standard-test-dispatcher.html","searchKeys":["StandardTestDispatcher","fun StandardTestDispatcher(scheduler: TestCoroutineScheduler? = null, name: String? = null): TestDispatcher","kotlinx.coroutines.test.StandardTestDispatcher"]},{"name":"fun TestCoroutineDispatcher(scheduler: TestCoroutineScheduler = TestCoroutineScheduler())","description":"kotlinx.coroutines.test.TestCoroutineDispatcher.TestCoroutineDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-dispatcher/-test-coroutine-dispatcher.html","searchKeys":["TestCoroutineDispatcher","fun TestCoroutineDispatcher(scheduler: TestCoroutineScheduler = TestCoroutineScheduler())","kotlinx.coroutines.test.TestCoroutineDispatcher.TestCoroutineDispatcher"]},{"name":"fun TestCoroutineDispatcher.runBlockingTest(block: suspend TestCoroutineScope.() -> Unit)","description":"kotlinx.coroutines.test.runBlockingTest","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-blocking-test.html","searchKeys":["runBlockingTest","fun TestCoroutineDispatcher.runBlockingTest(block: suspend TestCoroutineScope.() -> Unit)","kotlinx.coroutines.test.runBlockingTest"]},{"name":"fun TestCoroutineExceptionHandler()","description":"kotlinx.coroutines.test.TestCoroutineExceptionHandler.TestCoroutineExceptionHandler","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-exception-handler/-test-coroutine-exception-handler.html","searchKeys":["TestCoroutineExceptionHandler","fun TestCoroutineExceptionHandler()","kotlinx.coroutines.test.TestCoroutineExceptionHandler.TestCoroutineExceptionHandler"]},{"name":"fun TestCoroutineScheduler()","description":"kotlinx.coroutines.test.TestCoroutineScheduler.TestCoroutineScheduler","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scheduler/-test-coroutine-scheduler.html","searchKeys":["TestCoroutineScheduler","fun TestCoroutineScheduler()","kotlinx.coroutines.test.TestCoroutineScheduler.TestCoroutineScheduler"]},{"name":"fun TestCoroutineScope(context: CoroutineContext = EmptyCoroutineContext): TestCoroutineScope","description":"kotlinx.coroutines.test.TestCoroutineScope","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scope.html","searchKeys":["TestCoroutineScope","fun TestCoroutineScope(context: CoroutineContext = EmptyCoroutineContext): TestCoroutineScope","kotlinx.coroutines.test.TestCoroutineScope"]},{"name":"fun TestCoroutineScope.advanceTimeBy(delayTimeMillis: Long)","description":"kotlinx.coroutines.test.advanceTimeBy","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/advance-time-by.html","searchKeys":["advanceTimeBy","fun TestCoroutineScope.advanceTimeBy(delayTimeMillis: Long)","kotlinx.coroutines.test.advanceTimeBy"]},{"name":"fun TestCoroutineScope.advanceUntilIdle()","description":"kotlinx.coroutines.test.advanceUntilIdle","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/advance-until-idle.html","searchKeys":["advanceUntilIdle","fun TestCoroutineScope.advanceUntilIdle()","kotlinx.coroutines.test.advanceUntilIdle"]},{"name":"fun TestCoroutineScope.pauseDispatcher()","description":"kotlinx.coroutines.test.pauseDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/pause-dispatcher.html","searchKeys":["pauseDispatcher","fun TestCoroutineScope.pauseDispatcher()","kotlinx.coroutines.test.pauseDispatcher"]},{"name":"fun TestCoroutineScope.resumeDispatcher()","description":"kotlinx.coroutines.test.resumeDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/resume-dispatcher.html","searchKeys":["resumeDispatcher","fun TestCoroutineScope.resumeDispatcher()","kotlinx.coroutines.test.resumeDispatcher"]},{"name":"fun TestCoroutineScope.runBlockingTest(block: suspend TestCoroutineScope.() -> Unit)","description":"kotlinx.coroutines.test.runBlockingTest","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-blocking-test.html","searchKeys":["runBlockingTest","fun TestCoroutineScope.runBlockingTest(block: suspend TestCoroutineScope.() -> Unit)","kotlinx.coroutines.test.runBlockingTest"]},{"name":"fun TestCoroutineScope.runCurrent()","description":"kotlinx.coroutines.test.runCurrent","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-current.html","searchKeys":["runCurrent","fun TestCoroutineScope.runCurrent()","kotlinx.coroutines.test.runCurrent"]},{"name":"fun TestCoroutineScope.runTest(dispatchTimeoutMs: Long = DEFAULT_DISPATCH_TIMEOUT_MS, block: suspend TestCoroutineScope.() -> Unit): TestResult","description":"kotlinx.coroutines.test.runTest","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-test.html","searchKeys":["runTest","fun TestCoroutineScope.runTest(dispatchTimeoutMs: Long = DEFAULT_DISPATCH_TIMEOUT_MS, block: suspend TestCoroutineScope.() -> Unit): TestResult","kotlinx.coroutines.test.runTest"]},{"name":"fun TestScope(context: CoroutineContext = EmptyCoroutineContext): TestScope","description":"kotlinx.coroutines.test.TestScope","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-scope.html","searchKeys":["TestScope","fun TestScope(context: CoroutineContext = EmptyCoroutineContext): TestScope","kotlinx.coroutines.test.TestScope"]},{"name":"fun TestScope.advanceTimeBy(delayTimeMillis: Long)","description":"kotlinx.coroutines.test.advanceTimeBy","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/advance-time-by.html","searchKeys":["advanceTimeBy","fun TestScope.advanceTimeBy(delayTimeMillis: Long)","kotlinx.coroutines.test.advanceTimeBy"]},{"name":"fun TestScope.advanceUntilIdle()","description":"kotlinx.coroutines.test.advanceUntilIdle","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/advance-until-idle.html","searchKeys":["advanceUntilIdle","fun TestScope.advanceUntilIdle()","kotlinx.coroutines.test.advanceUntilIdle"]},{"name":"fun TestScope.runBlockingTest(block: suspend TestScope.() -> Unit)","description":"kotlinx.coroutines.test.runBlockingTest","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-blocking-test.html","searchKeys":["runBlockingTest","fun TestScope.runBlockingTest(block: suspend TestScope.() -> Unit)","kotlinx.coroutines.test.runBlockingTest"]},{"name":"fun TestScope.runCurrent()","description":"kotlinx.coroutines.test.runCurrent","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-current.html","searchKeys":["runCurrent","fun TestScope.runCurrent()","kotlinx.coroutines.test.runCurrent"]},{"name":"fun TestScope.runTest(dispatchTimeoutMs: Long = DEFAULT_DISPATCH_TIMEOUT_MS, testBody: suspend TestScope.() -> Unit): TestResult","description":"kotlinx.coroutines.test.runTest","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-test.html","searchKeys":["runTest","fun TestScope.runTest(dispatchTimeoutMs: Long = DEFAULT_DISPATCH_TIMEOUT_MS, testBody: suspend TestScope.() -> Unit): TestResult","kotlinx.coroutines.test.runTest"]},{"name":"fun UnconfinedTestDispatcher(scheduler: TestCoroutineScheduler? = null, name: String? = null): TestDispatcher","description":"kotlinx.coroutines.test.UnconfinedTestDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-unconfined-test-dispatcher.html","searchKeys":["UnconfinedTestDispatcher","fun UnconfinedTestDispatcher(scheduler: TestCoroutineScheduler? = null, name: String? = null): TestDispatcher","kotlinx.coroutines.test.UnconfinedTestDispatcher"]},{"name":"fun advanceTimeBy(delayTimeMillis: Long)","description":"kotlinx.coroutines.test.TestCoroutineScheduler.advanceTimeBy","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scheduler/advance-time-by.html","searchKeys":["advanceTimeBy","fun advanceTimeBy(delayTimeMillis: Long)","kotlinx.coroutines.test.TestCoroutineScheduler.advanceTimeBy"]},{"name":"fun advanceUntilIdle()","description":"kotlinx.coroutines.test.TestCoroutineScheduler.advanceUntilIdle","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scheduler/advance-until-idle.html","searchKeys":["advanceUntilIdle","fun advanceUntilIdle()","kotlinx.coroutines.test.TestCoroutineScheduler.advanceUntilIdle"]},{"name":"fun createTestCoroutineScope(context: CoroutineContext = EmptyCoroutineContext): TestCoroutineScope","description":"kotlinx.coroutines.test.createTestCoroutineScope","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/create-test-coroutine-scope.html","searchKeys":["createTestCoroutineScope","fun createTestCoroutineScope(context: CoroutineContext = EmptyCoroutineContext): TestCoroutineScope","kotlinx.coroutines.test.createTestCoroutineScope"]},{"name":"fun runBlockingTest(context: CoroutineContext = EmptyCoroutineContext, testBody: suspend TestCoroutineScope.() -> Unit)","description":"kotlinx.coroutines.test.runBlockingTest","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-blocking-test.html","searchKeys":["runBlockingTest","fun runBlockingTest(context: CoroutineContext = EmptyCoroutineContext, testBody: suspend TestCoroutineScope.() -> Unit)","kotlinx.coroutines.test.runBlockingTest"]},{"name":"fun runBlockingTestOnTestScope(context: CoroutineContext = EmptyCoroutineContext, testBody: suspend TestScope.() -> Unit)","description":"kotlinx.coroutines.test.runBlockingTestOnTestScope","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-blocking-test-on-test-scope.html","searchKeys":["runBlockingTestOnTestScope","fun runBlockingTestOnTestScope(context: CoroutineContext = EmptyCoroutineContext, testBody: suspend TestScope.() -> Unit)","kotlinx.coroutines.test.runBlockingTestOnTestScope"]},{"name":"fun runCurrent()","description":"kotlinx.coroutines.test.TestCoroutineScheduler.runCurrent","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scheduler/run-current.html","searchKeys":["runCurrent","fun runCurrent()","kotlinx.coroutines.test.TestCoroutineScheduler.runCurrent"]},{"name":"fun runTest(context: CoroutineContext = EmptyCoroutineContext, dispatchTimeoutMs: Long = DEFAULT_DISPATCH_TIMEOUT_MS, testBody: suspend TestScope.() -> Unit): TestResult","description":"kotlinx.coroutines.test.runTest","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-test.html","searchKeys":["runTest","fun runTest(context: CoroutineContext = EmptyCoroutineContext, dispatchTimeoutMs: Long = DEFAULT_DISPATCH_TIMEOUT_MS, testBody: suspend TestScope.() -> Unit): TestResult","kotlinx.coroutines.test.runTest"]},{"name":"fun runTestWithLegacyScope(context: CoroutineContext = EmptyCoroutineContext, dispatchTimeoutMs: Long = DEFAULT_DISPATCH_TIMEOUT_MS, testBody: suspend TestCoroutineScope.() -> Unit): TestResult","description":"kotlinx.coroutines.test.runTestWithLegacyScope","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/run-test-with-legacy-scope.html","searchKeys":["runTestWithLegacyScope","fun runTestWithLegacyScope(context: CoroutineContext = EmptyCoroutineContext, dispatchTimeoutMs: Long = DEFAULT_DISPATCH_TIMEOUT_MS, testBody: suspend TestCoroutineScope.() -> Unit): TestResult","kotlinx.coroutines.test.runTestWithLegacyScope"]},{"name":"interface DelayController","description":"kotlinx.coroutines.test.DelayController","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-delay-controller/index.html","searchKeys":["DelayController","interface DelayController","kotlinx.coroutines.test.DelayController"]},{"name":"interface TestCoroutineScope : CoroutineScope","description":"kotlinx.coroutines.test.TestCoroutineScope","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scope/index.html","searchKeys":["TestCoroutineScope","interface TestCoroutineScope : CoroutineScope","kotlinx.coroutines.test.TestCoroutineScope"]},{"name":"interface TestScope : CoroutineScope","description":"kotlinx.coroutines.test.TestScope","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-scope/index.html","searchKeys":["TestScope","interface TestScope : CoroutineScope","kotlinx.coroutines.test.TestScope"]},{"name":"interface UncaughtExceptionCaptor","description":"kotlinx.coroutines.test.UncaughtExceptionCaptor","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-uncaught-exception-captor/index.html","searchKeys":["UncaughtExceptionCaptor","interface UncaughtExceptionCaptor","kotlinx.coroutines.test.UncaughtExceptionCaptor"]},{"name":"object Key : CoroutineContext.Key<TestCoroutineScheduler> ","description":"kotlinx.coroutines.test.TestCoroutineScheduler.Key","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scheduler/-key/index.html","searchKeys":["Key","object Key : CoroutineContext.Key<TestCoroutineScheduler> ","kotlinx.coroutines.test.TestCoroutineScheduler.Key"]},{"name":"open override fun cleanupTestCoroutines()","description":"kotlinx.coroutines.test.TestCoroutineExceptionHandler.cleanupTestCoroutines","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-exception-handler/cleanup-test-coroutines.html","searchKeys":["cleanupTestCoroutines","open override fun cleanupTestCoroutines()","kotlinx.coroutines.test.TestCoroutineExceptionHandler.cleanupTestCoroutines"]},{"name":"open override fun dispatch(context: CoroutineContext, block: Runnable)","description":"kotlinx.coroutines.test.TestCoroutineDispatcher.dispatch","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-dispatcher/dispatch.html","searchKeys":["dispatch","open override fun dispatch(context: CoroutineContext, block: Runnable)","kotlinx.coroutines.test.TestCoroutineDispatcher.dispatch"]},{"name":"open override fun dispatchYield(context: CoroutineContext, block: Runnable)","description":"kotlinx.coroutines.test.TestCoroutineDispatcher.dispatchYield","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-dispatcher/dispatch-yield.html","searchKeys":["dispatchYield","open override fun dispatchYield(context: CoroutineContext, block: Runnable)","kotlinx.coroutines.test.TestCoroutineDispatcher.dispatchYield"]},{"name":"open override fun handleException(context: CoroutineContext, exception: Throwable)","description":"kotlinx.coroutines.test.TestCoroutineExceptionHandler.handleException","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-exception-handler/handle-exception.html","searchKeys":["handleException","open override fun handleException(context: CoroutineContext, exception: Throwable)","kotlinx.coroutines.test.TestCoroutineExceptionHandler.handleException"]},{"name":"open override fun invokeOnTimeout(timeMillis: Long, block: Runnable, context: CoroutineContext): DisposableHandle","description":"kotlinx.coroutines.test.TestDispatcher.invokeOnTimeout","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-dispatcher/invoke-on-timeout.html","searchKeys":["invokeOnTimeout","open override fun invokeOnTimeout(timeMillis: Long, block: Runnable, context: CoroutineContext): DisposableHandle","kotlinx.coroutines.test.TestDispatcher.invokeOnTimeout"]},{"name":"open override fun pauseDispatcher()","description":"kotlinx.coroutines.test.TestCoroutineDispatcher.pauseDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-dispatcher/pause-dispatcher.html","searchKeys":["pauseDispatcher","open override fun pauseDispatcher()","kotlinx.coroutines.test.TestCoroutineDispatcher.pauseDispatcher"]},{"name":"open override fun resumeDispatcher()","description":"kotlinx.coroutines.test.TestCoroutineDispatcher.resumeDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-dispatcher/resume-dispatcher.html","searchKeys":["resumeDispatcher","open override fun resumeDispatcher()","kotlinx.coroutines.test.TestCoroutineDispatcher.resumeDispatcher"]},{"name":"open override fun scheduleResumeAfterDelay(timeMillis: Long, continuation: CancellableContinuation<Unit>)","description":"kotlinx.coroutines.test.TestDispatcher.scheduleResumeAfterDelay","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-dispatcher/schedule-resume-after-delay.html","searchKeys":["scheduleResumeAfterDelay","open override fun scheduleResumeAfterDelay(timeMillis: Long, continuation: CancellableContinuation<Unit>)","kotlinx.coroutines.test.TestDispatcher.scheduleResumeAfterDelay"]},{"name":"open override fun toString(): String","description":"kotlinx.coroutines.test.TestCoroutineDispatcher.toString","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-dispatcher/to-string.html","searchKeys":["toString","open override fun toString(): String","kotlinx.coroutines.test.TestCoroutineDispatcher.toString"]},{"name":"open override val scheduler: TestCoroutineScheduler","description":"kotlinx.coroutines.test.TestCoroutineDispatcher.scheduler","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-dispatcher/scheduler.html","searchKeys":["scheduler","open override val scheduler: TestCoroutineScheduler","kotlinx.coroutines.test.TestCoroutineDispatcher.scheduler"]},{"name":"open override val uncaughtExceptions: List<Throwable>","description":"kotlinx.coroutines.test.TestCoroutineExceptionHandler.uncaughtExceptions","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-exception-handler/uncaught-exceptions.html","searchKeys":["uncaughtExceptions","open override val uncaughtExceptions: List<Throwable>","kotlinx.coroutines.test.TestCoroutineExceptionHandler.uncaughtExceptions"]},{"name":"open suspend override fun pauseDispatcher(block: suspend () -> Unit)","description":"kotlinx.coroutines.test.TestCoroutineDispatcher.pauseDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-dispatcher/pause-dispatcher.html","searchKeys":["pauseDispatcher","open suspend override fun pauseDispatcher(block: suspend () -> Unit)","kotlinx.coroutines.test.TestCoroutineDispatcher.pauseDispatcher"]},{"name":"suspend fun TestCoroutineScope.pauseDispatcher(block: suspend () -> Unit)","description":"kotlinx.coroutines.test.pauseDispatcher","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/pause-dispatcher.html","searchKeys":["pauseDispatcher","suspend fun TestCoroutineScope.pauseDispatcher(block: suspend () -> Unit)","kotlinx.coroutines.test.pauseDispatcher"]},{"name":"val TestCoroutineScope.currentTime: Long","description":"kotlinx.coroutines.test.currentTime","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/current-time.html","searchKeys":["currentTime","val TestCoroutineScope.currentTime: Long","kotlinx.coroutines.test.currentTime"]},{"name":"val TestCoroutineScope.uncaughtExceptions: List<Throwable>","description":"kotlinx.coroutines.test.uncaughtExceptions","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/uncaught-exceptions.html","searchKeys":["uncaughtExceptions","val TestCoroutineScope.uncaughtExceptions: List<Throwable>","kotlinx.coroutines.test.uncaughtExceptions"]},{"name":"val TestScope.currentTime: Long","description":"kotlinx.coroutines.test.currentTime","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/current-time.html","searchKeys":["currentTime","val TestScope.currentTime: Long","kotlinx.coroutines.test.currentTime"]},{"name":"val TestScope.testTimeSource: TimeSource","description":"kotlinx.coroutines.test.testTimeSource","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/test-time-source.html","searchKeys":["testTimeSource","val TestScope.testTimeSource: TimeSource","kotlinx.coroutines.test.testTimeSource"]},{"name":"val timeSource: TimeSource","description":"kotlinx.coroutines.test.TestCoroutineScheduler.timeSource","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scheduler/time-source.html","searchKeys":["timeSource","val timeSource: TimeSource","kotlinx.coroutines.test.TestCoroutineScheduler.timeSource"]},{"name":"var currentTime: Long = 0","description":"kotlinx.coroutines.test.TestCoroutineScheduler.currentTime","location":"kotlinx-coroutines-test/kotlinx.coroutines.test/-test-coroutine-scheduler/current-time.html","searchKeys":["currentTime","var currentTime: Long = 0","kotlinx.coroutines.test.TestCoroutineScheduler.currentTime"]},{"name":"fun <R> SelectBuilder<R>.onTimeout(duration: Duration, block: suspend () -> R)","description":"kotlinx.coroutines.time.onTimeout","location":"kotlinx-coroutines-jdk8/kotlinx.coroutines.time/on-timeout.html","searchKeys":["onTimeout","fun <R> SelectBuilder<R>.onTimeout(duration: Duration, block: suspend () -> R)","kotlinx.coroutines.time.onTimeout"]},{"name":"fun <T> CompletionStage<T>.asDeferred(): Deferred<T>","description":"kotlinx.coroutines.future.asDeferred","location":"kotlinx-coroutines-jdk8/kotlinx.coroutines.future/as-deferred.html","searchKeys":["asDeferred","fun <T> CompletionStage<T>.asDeferred(): Deferred<T>","kotlinx.coroutines.future.asDeferred"]},{"name":"fun <T> CoroutineScope.future(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> T): CompletableFuture<T>","description":"kotlinx.coroutines.future.future","location":"kotlinx-coroutines-jdk8/kotlinx.coroutines.future/future.html","searchKeys":["future","fun <T> CoroutineScope.future(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> T): CompletableFuture<T>","kotlinx.coroutines.future.future"]},{"name":"fun <T> Deferred<T>.asCompletableFuture(): CompletableFuture<T>","description":"kotlinx.coroutines.future.asCompletableFuture","location":"kotlinx-coroutines-jdk8/kotlinx.coroutines.future/as-completable-future.html","searchKeys":["asCompletableFuture","fun <T> Deferred<T>.asCompletableFuture(): CompletableFuture<T>","kotlinx.coroutines.future.asCompletableFuture"]},{"name":"fun <T> Flow<T>.debounce(timeout: Duration): Flow<T>","description":"kotlinx.coroutines.time.debounce","location":"kotlinx-coroutines-jdk8/kotlinx.coroutines.time/debounce.html","searchKeys":["debounce","fun <T> Flow<T>.debounce(timeout: Duration): Flow<T>","kotlinx.coroutines.time.debounce"]},{"name":"fun <T> Flow<T>.sample(period: Duration): Flow<T>","description":"kotlinx.coroutines.time.sample","location":"kotlinx-coroutines-jdk8/kotlinx.coroutines.time/sample.html","searchKeys":["sample","fun <T> Flow<T>.sample(period: Duration): Flow<T>","kotlinx.coroutines.time.sample"]},{"name":"fun <T> Stream<T>.consumeAsFlow(): Flow<T>","description":"kotlinx.coroutines.stream.consumeAsFlow","location":"kotlinx-coroutines-jdk8/kotlinx.coroutines.stream/consume-as-flow.html","searchKeys":["consumeAsFlow","fun <T> Stream<T>.consumeAsFlow(): Flow<T>","kotlinx.coroutines.stream.consumeAsFlow"]},{"name":"fun Job.asCompletableFuture(): CompletableFuture<Unit>","description":"kotlinx.coroutines.future.asCompletableFuture","location":"kotlinx-coroutines-jdk8/kotlinx.coroutines.future/as-completable-future.html","searchKeys":["asCompletableFuture","fun Job.asCompletableFuture(): CompletableFuture<Unit>","kotlinx.coroutines.future.asCompletableFuture"]},{"name":"suspend fun <T> CompletionStage<T>.await(): T","description":"kotlinx.coroutines.future.await","location":"kotlinx-coroutines-jdk8/kotlinx.coroutines.future/await.html","searchKeys":["await","suspend fun <T> CompletionStage<T>.await(): T","kotlinx.coroutines.future.await"]},{"name":"suspend fun <T> withTimeout(duration: Duration, block: suspend CoroutineScope.() -> T): T","description":"kotlinx.coroutines.time.withTimeout","location":"kotlinx-coroutines-jdk8/kotlinx.coroutines.time/with-timeout.html","searchKeys":["withTimeout","suspend fun <T> withTimeout(duration: Duration, block: suspend CoroutineScope.() -> T): T","kotlinx.coroutines.time.withTimeout"]},{"name":"suspend fun <T> withTimeoutOrNull(duration: Duration, block: suspend CoroutineScope.() -> T): T?","description":"kotlinx.coroutines.time.withTimeoutOrNull","location":"kotlinx-coroutines-jdk8/kotlinx.coroutines.time/with-timeout-or-null.html","searchKeys":["withTimeoutOrNull","suspend fun <T> withTimeoutOrNull(duration: Duration, block: suspend CoroutineScope.() -> T): T?","kotlinx.coroutines.time.withTimeoutOrNull"]},{"name":"suspend fun delay(duration: Duration)","description":"kotlinx.coroutines.time.delay","location":"kotlinx-coroutines-jdk8/kotlinx.coroutines.time/delay.html","searchKeys":["delay","suspend fun delay(duration: Duration)","kotlinx.coroutines.time.delay"]},{"name":"open override fun dispatch(context: CoroutineContext, block: Runnable)","description":"kotlinx.coroutines.swing.SwingDispatcher.dispatch","location":"kotlinx-coroutines-swing/kotlinx.coroutines.swing/-swing-dispatcher/dispatch.html","searchKeys":["dispatch","open override fun dispatch(context: CoroutineContext, block: Runnable)","kotlinx.coroutines.swing.SwingDispatcher.dispatch"]},{"name":"open override fun invokeOnTimeout(timeMillis: Long, block: Runnable, context: CoroutineContext): DisposableHandle","description":"kotlinx.coroutines.swing.SwingDispatcher.invokeOnTimeout","location":"kotlinx-coroutines-swing/kotlinx.coroutines.swing/-swing-dispatcher/invoke-on-timeout.html","searchKeys":["invokeOnTimeout","open override fun invokeOnTimeout(timeMillis: Long, block: Runnable, context: CoroutineContext): DisposableHandle","kotlinx.coroutines.swing.SwingDispatcher.invokeOnTimeout"]},{"name":"open override fun scheduleResumeAfterDelay(timeMillis: Long, continuation: CancellableContinuation<Unit>)","description":"kotlinx.coroutines.swing.SwingDispatcher.scheduleResumeAfterDelay","location":"kotlinx-coroutines-swing/kotlinx.coroutines.swing/-swing-dispatcher/schedule-resume-after-delay.html","searchKeys":["scheduleResumeAfterDelay","open override fun scheduleResumeAfterDelay(timeMillis: Long, continuation: CancellableContinuation<Unit>)","kotlinx.coroutines.swing.SwingDispatcher.scheduleResumeAfterDelay"]},{"name":"sealed class SwingDispatcher : MainCoroutineDispatcher, Delay","description":"kotlinx.coroutines.swing.SwingDispatcher","location":"kotlinx-coroutines-swing/kotlinx.coroutines.swing/-swing-dispatcher/index.html","searchKeys":["SwingDispatcher","sealed class SwingDispatcher : MainCoroutineDispatcher, Delay","kotlinx.coroutines.swing.SwingDispatcher"]},{"name":"val Dispatchers.Swing: SwingDispatcher","description":"kotlinx.coroutines.swing.Swing","location":"kotlinx-coroutines-swing/kotlinx.coroutines.swing/-swing.html","searchKeys":["Swing","val Dispatchers.Swing: SwingDispatcher","kotlinx.coroutines.swing.Swing"]},{"name":"class MDCContext(val contextMap: MDCContextMap = MDC.getCopyOfContextMap()) : AbstractCoroutineContextElement, ThreadContextElement<MDCContextMap> ","description":"kotlinx.coroutines.slf4j.MDCContext","location":"kotlinx-coroutines-slf4j/kotlinx.coroutines.slf4j/-m-d-c-context/index.html","searchKeys":["MDCContext","class MDCContext(val contextMap: MDCContextMap = MDC.getCopyOfContextMap()) : AbstractCoroutineContextElement, ThreadContextElement<MDCContextMap> ","kotlinx.coroutines.slf4j.MDCContext"]},{"name":"fun MDCContext(contextMap: MDCContextMap = MDC.getCopyOfContextMap())","description":"kotlinx.coroutines.slf4j.MDCContext.MDCContext","location":"kotlinx-coroutines-slf4j/kotlinx.coroutines.slf4j/-m-d-c-context/-m-d-c-context.html","searchKeys":["MDCContext","fun MDCContext(contextMap: MDCContextMap = MDC.getCopyOfContextMap())","kotlinx.coroutines.slf4j.MDCContext.MDCContext"]},{"name":"object Key : CoroutineContext.Key<MDCContext> ","description":"kotlinx.coroutines.slf4j.MDCContext.Key","location":"kotlinx-coroutines-slf4j/kotlinx.coroutines.slf4j/-m-d-c-context/-key/index.html","searchKeys":["Key","object Key : CoroutineContext.Key<MDCContext> ","kotlinx.coroutines.slf4j.MDCContext.Key"]},{"name":"open override fun restoreThreadContext(context: CoroutineContext, oldState: MDCContextMap)","description":"kotlinx.coroutines.slf4j.MDCContext.restoreThreadContext","location":"kotlinx-coroutines-slf4j/kotlinx.coroutines.slf4j/-m-d-c-context/restore-thread-context.html","searchKeys":["restoreThreadContext","open override fun restoreThreadContext(context: CoroutineContext, oldState: MDCContextMap)","kotlinx.coroutines.slf4j.MDCContext.restoreThreadContext"]},{"name":"open override fun updateThreadContext(context: CoroutineContext): MDCContextMap","description":"kotlinx.coroutines.slf4j.MDCContext.updateThreadContext","location":"kotlinx-coroutines-slf4j/kotlinx.coroutines.slf4j/-m-d-c-context/update-thread-context.html","searchKeys":["updateThreadContext","open override fun updateThreadContext(context: CoroutineContext): MDCContextMap","kotlinx.coroutines.slf4j.MDCContext.updateThreadContext"]},{"name":"val contextMap: MDCContextMap","description":"kotlinx.coroutines.slf4j.MDCContext.contextMap","location":"kotlinx-coroutines-slf4j/kotlinx.coroutines.slf4j/-m-d-c-context/context-map.html","searchKeys":["contextMap","val contextMap: MDCContextMap","kotlinx.coroutines.slf4j.MDCContext.contextMap"]},{"name":"abstract override val immediate: HandlerDispatcher","description":"kotlinx.coroutines.android.HandlerDispatcher.immediate","location":"kotlinx-coroutines-android/kotlinx.coroutines.android/-handler-dispatcher/immediate.html","searchKeys":["immediate","abstract override val immediate: HandlerDispatcher","kotlinx.coroutines.android.HandlerDispatcher.immediate"]},{"name":"fun Handler.asCoroutineDispatcher(name: String? = null): HandlerDispatcher","description":"kotlinx.coroutines.android.asCoroutineDispatcher","location":"kotlinx-coroutines-android/kotlinx.coroutines.android/as-coroutine-dispatcher.html","searchKeys":["asCoroutineDispatcher","fun Handler.asCoroutineDispatcher(name: String? = null): HandlerDispatcher","kotlinx.coroutines.android.asCoroutineDispatcher"]},{"name":"sealed class HandlerDispatcher : MainCoroutineDispatcher, Delay","description":"kotlinx.coroutines.android.HandlerDispatcher","location":"kotlinx-coroutines-android/kotlinx.coroutines.android/-handler-dispatcher/index.html","searchKeys":["HandlerDispatcher","sealed class HandlerDispatcher : MainCoroutineDispatcher, Delay","kotlinx.coroutines.android.HandlerDispatcher"]},{"name":"suspend fun awaitFrame(): Long","description":"kotlinx.coroutines.android.awaitFrame","location":"kotlinx-coroutines-android/kotlinx.coroutines.android/await-frame.html","searchKeys":["awaitFrame","suspend fun awaitFrame(): Long","kotlinx.coroutines.android.awaitFrame"]},{"name":"fun <T> ObservableValue<T>.asFlow(): Flow<T>","description":"kotlinx.coroutines.javafx.asFlow","location":"kotlinx-coroutines-javafx/kotlinx.coroutines.javafx/as-flow.html","searchKeys":["asFlow","fun <T> ObservableValue<T>.asFlow(): Flow<T>","kotlinx.coroutines.javafx.asFlow"]},{"name":"open override fun dispatch(context: CoroutineContext, block: Runnable)","description":"kotlinx.coroutines.javafx.JavaFxDispatcher.dispatch","location":"kotlinx-coroutines-javafx/kotlinx.coroutines.javafx/-java-fx-dispatcher/dispatch.html","searchKeys":["dispatch","open override fun dispatch(context: CoroutineContext, block: Runnable)","kotlinx.coroutines.javafx.JavaFxDispatcher.dispatch"]},{"name":"open override fun invokeOnTimeout(timeMillis: Long, block: Runnable, context: CoroutineContext): DisposableHandle","description":"kotlinx.coroutines.javafx.JavaFxDispatcher.invokeOnTimeout","location":"kotlinx-coroutines-javafx/kotlinx.coroutines.javafx/-java-fx-dispatcher/invoke-on-timeout.html","searchKeys":["invokeOnTimeout","open override fun invokeOnTimeout(timeMillis: Long, block: Runnable, context: CoroutineContext): DisposableHandle","kotlinx.coroutines.javafx.JavaFxDispatcher.invokeOnTimeout"]},{"name":"open override fun scheduleResumeAfterDelay(timeMillis: Long, continuation: CancellableContinuation<Unit>)","description":"kotlinx.coroutines.javafx.JavaFxDispatcher.scheduleResumeAfterDelay","location":"kotlinx-coroutines-javafx/kotlinx.coroutines.javafx/-java-fx-dispatcher/schedule-resume-after-delay.html","searchKeys":["scheduleResumeAfterDelay","open override fun scheduleResumeAfterDelay(timeMillis: Long, continuation: CancellableContinuation<Unit>)","kotlinx.coroutines.javafx.JavaFxDispatcher.scheduleResumeAfterDelay"]},{"name":"sealed class JavaFxDispatcher : MainCoroutineDispatcher, Delay","description":"kotlinx.coroutines.javafx.JavaFxDispatcher","location":"kotlinx-coroutines-javafx/kotlinx.coroutines.javafx/-java-fx-dispatcher/index.html","searchKeys":["JavaFxDispatcher","sealed class JavaFxDispatcher : MainCoroutineDispatcher, Delay","kotlinx.coroutines.javafx.JavaFxDispatcher"]},{"name":"suspend fun awaitPulse(): Long","description":"kotlinx.coroutines.javafx.awaitPulse","location":"kotlinx-coroutines-javafx/kotlinx.coroutines.javafx/await-pulse.html","searchKeys":["awaitPulse","suspend fun awaitPulse(): Long","kotlinx.coroutines.javafx.awaitPulse"]},{"name":"val Dispatchers.JavaFx: JavaFxDispatcher","description":"kotlinx.coroutines.javafx.JavaFx","location":"kotlinx-coroutines-javafx/kotlinx.coroutines.javafx/-java-fx.html","searchKeys":["JavaFx","val Dispatchers.JavaFx: JavaFxDispatcher","kotlinx.coroutines.javafx.JavaFx"]},{"name":"fun <T> Deferred<T>.asTask(): Task<T>","description":"kotlinx.coroutines.tasks.asTask","location":"kotlinx-coroutines-play-services/kotlinx.coroutines.tasks/as-task.html","searchKeys":["asTask","fun <T> Deferred<T>.asTask(): Task<T>","kotlinx.coroutines.tasks.asTask"]},{"name":"fun <T> Task<T>.asDeferred(): Deferred<T>","description":"kotlinx.coroutines.tasks.asDeferred","location":"kotlinx-coroutines-play-services/kotlinx.coroutines.tasks/as-deferred.html","searchKeys":["asDeferred","fun <T> Task<T>.asDeferred(): Deferred<T>","kotlinx.coroutines.tasks.asDeferred"]},{"name":"fun <T> Task<T>.asDeferred(cancellationTokenSource: CancellationTokenSource): Deferred<T>","description":"kotlinx.coroutines.tasks.asDeferred","location":"kotlinx-coroutines-play-services/kotlinx.coroutines.tasks/as-deferred.html","searchKeys":["asDeferred","fun <T> Task<T>.asDeferred(cancellationTokenSource: CancellationTokenSource): Deferred<T>","kotlinx.coroutines.tasks.asDeferred"]},{"name":"suspend fun <T> Task<T>.await(): T","description":"kotlinx.coroutines.tasks.await","location":"kotlinx-coroutines-play-services/kotlinx.coroutines.tasks/await.html","searchKeys":["await","suspend fun <T> Task<T>.await(): T","kotlinx.coroutines.tasks.await"]},{"name":"suspend fun <T> Task<T>.await(cancellationTokenSource: CancellationTokenSource): T","description":"kotlinx.coroutines.tasks.await","location":"kotlinx-coroutines-play-services/kotlinx.coroutines.tasks/await.html","searchKeys":["await","suspend fun <T> Task<T>.await(cancellationTokenSource: CancellationTokenSource): T","kotlinx.coroutines.tasks.await"]},{"name":"ATOMIC","description":"kotlinx.coroutines.CoroutineStart.ATOMIC","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/-a-t-o-m-i-c/index.html","searchKeys":["ATOMIC","ATOMIC","kotlinx.coroutines.CoroutineStart.ATOMIC"]},{"name":"DEFAULT","description":"kotlinx.coroutines.CoroutineStart.DEFAULT","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/-d-e-f-a-u-l-t/index.html","searchKeys":["DEFAULT","DEFAULT","kotlinx.coroutines.CoroutineStart.DEFAULT"]},{"name":"DROP_LATEST","description":"kotlinx.coroutines.channels.BufferOverflow.DROP_LATEST","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-buffer-overflow/-d-r-o-p_-l-a-t-e-s-t/index.html","searchKeys":["DROP_LATEST","DROP_LATEST","kotlinx.coroutines.channels.BufferOverflow.DROP_LATEST"]},{"name":"DROP_OLDEST","description":"kotlinx.coroutines.channels.BufferOverflow.DROP_OLDEST","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-buffer-overflow/-d-r-o-p_-o-l-d-e-s-t/index.html","searchKeys":["DROP_OLDEST","DROP_OLDEST","kotlinx.coroutines.channels.BufferOverflow.DROP_OLDEST"]},{"name":"FIXED_DELAY","description":"kotlinx.coroutines.channels.TickerMode.FIXED_DELAY","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-ticker-mode/-f-i-x-e-d_-d-e-l-a-y/index.html","searchKeys":["FIXED_DELAY","FIXED_DELAY","kotlinx.coroutines.channels.TickerMode.FIXED_DELAY"]},{"name":"FIXED_PERIOD","description":"kotlinx.coroutines.channels.TickerMode.FIXED_PERIOD","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-ticker-mode/-f-i-x-e-d_-p-e-r-i-o-d/index.html","searchKeys":["FIXED_PERIOD","FIXED_PERIOD","kotlinx.coroutines.channels.TickerMode.FIXED_PERIOD"]},{"name":"LAZY","description":"kotlinx.coroutines.CoroutineStart.LAZY","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/-l-a-z-y/index.html","searchKeys":["LAZY","LAZY","kotlinx.coroutines.CoroutineStart.LAZY"]},{"name":"START","description":"kotlinx.coroutines.flow.SharingCommand.START","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-command/-s-t-a-r-t/index.html","searchKeys":["START","START","kotlinx.coroutines.flow.SharingCommand.START"]},{"name":"STOP","description":"kotlinx.coroutines.flow.SharingCommand.STOP","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-command/-s-t-o-p/index.html","searchKeys":["STOP","STOP","kotlinx.coroutines.flow.SharingCommand.STOP"]},{"name":"STOP_AND_RESET_REPLAY_CACHE","description":"kotlinx.coroutines.flow.SharingCommand.STOP_AND_RESET_REPLAY_CACHE","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-command/-s-t-o-p_-a-n-d_-r-e-s-e-t_-r-e-p-l-a-y_-c-a-c-h-e/index.html","searchKeys":["STOP_AND_RESET_REPLAY_CACHE","STOP_AND_RESET_REPLAY_CACHE","kotlinx.coroutines.flow.SharingCommand.STOP_AND_RESET_REPLAY_CACHE"]},{"name":"SUSPEND","description":"kotlinx.coroutines.channels.BufferOverflow.SUSPEND","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-buffer-overflow/-s-u-s-p-e-n-d/index.html","searchKeys":["SUSPEND","SUSPEND","kotlinx.coroutines.channels.BufferOverflow.SUSPEND"]},{"name":"UNDISPATCHED","description":"kotlinx.coroutines.CoroutineStart.UNDISPATCHED","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/-u-n-d-i-s-p-a-t-c-h-e-d/index.html","searchKeys":["UNDISPATCHED","UNDISPATCHED","kotlinx.coroutines.CoroutineStart.UNDISPATCHED"]},{"name":"abstract class AbstractAtomicDesc : AtomicDesc","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-abstract-atomic-desc/index.html","searchKeys":["AbstractAtomicDesc","abstract class AbstractAtomicDesc : AtomicDesc","kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc"]},{"name":"abstract class AbstractCoroutine<in T>(parentContext: CoroutineContext, initParentJob: Boolean, active: Boolean) : JobSupport, Job, Continuation<T> , CoroutineScope(source)","description":"kotlinx.coroutines.AbstractCoroutine","location":"kotlinx-coroutines-core/kotlinx.coroutines/-abstract-coroutine/index.html","searchKeys":["AbstractCoroutine","abstract class AbstractCoroutine<in T>(parentContext: CoroutineContext, initParentJob: Boolean, active: Boolean) : JobSupport, Job, Continuation<T> , CoroutineScope(source)","kotlinx.coroutines.AbstractCoroutine"]},{"name":"abstract class AbstractFlow<T> : Flow<T> , CancellableFlow<T> (source)","description":"kotlinx.coroutines.flow.AbstractFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-abstract-flow/index.html","searchKeys":["AbstractFlow","abstract class AbstractFlow<T> : Flow<T> , CancellableFlow<T> (source)","kotlinx.coroutines.flow.AbstractFlow"]},{"name":"abstract class AtomicDesc(source)","description":"kotlinx.coroutines.internal.AtomicDesc","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-atomic-desc/index.html","searchKeys":["AtomicDesc","abstract class AtomicDesc(source)","kotlinx.coroutines.internal.AtomicDesc"]},{"name":"abstract class AtomicOp<in T> : OpDescriptor(source)","description":"kotlinx.coroutines.internal.AtomicOp","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-atomic-op/index.html","searchKeys":["AtomicOp","abstract class AtomicOp<in T> : OpDescriptor(source)","kotlinx.coroutines.internal.AtomicOp"]},{"name":"abstract class ChannelFlow<T>(val context: CoroutineContext, val capacity: Int, val onBufferOverflow: BufferOverflow) : FusibleFlow<T> (source)","description":"kotlinx.coroutines.flow.internal.ChannelFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow.internal/-channel-flow/index.html","searchKeys":["ChannelFlow","abstract class ChannelFlow<T>(val context: CoroutineContext, val capacity: Int, val onBufferOverflow: BufferOverflow) : FusibleFlow<T> (source)","kotlinx.coroutines.flow.internal.ChannelFlow"]},{"name":"abstract class CoroutineDispatcher : AbstractCoroutineContextElement, ContinuationInterceptor(source)","description":"kotlinx.coroutines.CoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/index.html","searchKeys":["CoroutineDispatcher","abstract class CoroutineDispatcher : AbstractCoroutineContextElement, ContinuationInterceptor(source)","kotlinx.coroutines.CoroutineDispatcher"]},{"name":"abstract class ExecutorCoroutineDispatcher : CoroutineDispatcher, Closeable(source)","description":"kotlinx.coroutines.ExecutorCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/-executor-coroutine-dispatcher/index.html","searchKeys":["ExecutorCoroutineDispatcher","abstract class ExecutorCoroutineDispatcher : CoroutineDispatcher, Closeable(source)","kotlinx.coroutines.ExecutorCoroutineDispatcher"]},{"name":"abstract class MainCoroutineDispatcher : CoroutineDispatcher(source)","description":"kotlinx.coroutines.MainCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/-main-coroutine-dispatcher/index.html","searchKeys":["MainCoroutineDispatcher","abstract class MainCoroutineDispatcher : CoroutineDispatcher(source)","kotlinx.coroutines.MainCoroutineDispatcher"]},{"name":"abstract class OpDescriptor(source)","description":"kotlinx.coroutines.internal.OpDescriptor","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-op-descriptor/index.html","searchKeys":["OpDescriptor","abstract class OpDescriptor(source)","kotlinx.coroutines.internal.OpDescriptor"]},{"name":"abstract fun <R> registerSelectClause0(select: SelectInstance<R>, block: suspend () -> R)(source)","description":"kotlinx.coroutines.selects.SelectClause0.registerSelectClause0","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-clause0/register-select-clause0.html","searchKeys":["registerSelectClause0","abstract fun <R> registerSelectClause0(select: SelectInstance<R>, block: suspend () -> R)(source)","kotlinx.coroutines.selects.SelectClause0.registerSelectClause0"]},{"name":"abstract fun <R> registerSelectClause1(select: SelectInstance<R>, block: suspend (Q) -> R)(source)","description":"kotlinx.coroutines.selects.SelectClause1.registerSelectClause1","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-clause1/register-select-clause1.html","searchKeys":["registerSelectClause1","abstract fun <R> registerSelectClause1(select: SelectInstance<R>, block: suspend (Q) -> R)(source)","kotlinx.coroutines.selects.SelectClause1.registerSelectClause1"]},{"name":"abstract fun <R> registerSelectClause2(select: SelectInstance<R>, param: P, block: suspend (Q) -> R)(source)","description":"kotlinx.coroutines.selects.SelectClause2.registerSelectClause2","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-clause2/register-select-clause2.html","searchKeys":["registerSelectClause2","abstract fun <R> registerSelectClause2(select: SelectInstance<R>, param: P, block: suspend (Q) -> R)(source)","kotlinx.coroutines.selects.SelectClause2.registerSelectClause2"]},{"name":"abstract fun CoroutineDispatcher.resumeUndispatched(value: T)(source)","description":"kotlinx.coroutines.CancellableContinuation.resumeUndispatched","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/resume-undispatched.html","searchKeys":["resumeUndispatched","abstract fun CoroutineDispatcher.resumeUndispatched(value: T)(source)","kotlinx.coroutines.CancellableContinuation.resumeUndispatched"]},{"name":"abstract fun CoroutineDispatcher.resumeUndispatchedWithException(exception: Throwable)(source)","description":"kotlinx.coroutines.CancellableContinuation.resumeUndispatchedWithException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/resume-undispatched-with-exception.html","searchKeys":["resumeUndispatchedWithException","abstract fun CoroutineDispatcher.resumeUndispatchedWithException(exception: Throwable)(source)","kotlinx.coroutines.CancellableContinuation.resumeUndispatchedWithException"]},{"name":"abstract fun attachChild(child: ChildJob): ChildHandle(source)","description":"kotlinx.coroutines.Job.attachChild","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/attach-child.html","searchKeys":["attachChild","abstract fun attachChild(child: ChildJob): ChildHandle(source)","kotlinx.coroutines.Job.attachChild"]},{"name":"abstract fun cancel(cause: CancellationException? = null)(source)","description":"kotlinx.coroutines.Job.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/cancel.html","searchKeys":["cancel","abstract fun cancel(cause: CancellationException? = null)(source)","kotlinx.coroutines.Job.cancel"]},{"name":"abstract fun cancel(cause: CancellationException? = null)(source)","description":"kotlinx.coroutines.channels.BroadcastChannel.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-broadcast-channel/cancel.html","searchKeys":["cancel","abstract fun cancel(cause: CancellationException? = null)(source)","kotlinx.coroutines.channels.BroadcastChannel.cancel"]},{"name":"abstract fun cancel(cause: CancellationException? = null)(source)","description":"kotlinx.coroutines.channels.ReceiveChannel.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/cancel.html","searchKeys":["cancel","abstract fun cancel(cause: CancellationException? = null)(source)","kotlinx.coroutines.channels.ReceiveChannel.cancel"]},{"name":"abstract fun cancel(cause: Throwable? = null): Boolean(source)","description":"kotlinx.coroutines.CancellableContinuation.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/cancel.html","searchKeys":["cancel","abstract fun cancel(cause: Throwable? = null): Boolean(source)","kotlinx.coroutines.CancellableContinuation.cancel"]},{"name":"abstract fun childCancelled(cause: Throwable): Boolean(source)","description":"kotlinx.coroutines.ChildHandle.childCancelled","location":"kotlinx-coroutines-core/kotlinx.coroutines/-child-handle/child-cancelled.html","searchKeys":["childCancelled","abstract fun childCancelled(cause: Throwable): Boolean(source)","kotlinx.coroutines.ChildHandle.childCancelled"]},{"name":"abstract fun close(cause: Throwable? = null): Boolean(source)","description":"kotlinx.coroutines.channels.SendChannel.close","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/close.html","searchKeys":["close","abstract fun close(cause: Throwable? = null): Boolean(source)","kotlinx.coroutines.channels.SendChannel.close"]},{"name":"abstract fun command(subscriptionCount: StateFlow<Int>): Flow<SharingCommand>(source)","description":"kotlinx.coroutines.flow.SharingStarted.command","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-started/command.html","searchKeys":["command","abstract fun command(subscriptionCount: StateFlow<Int>): Flow<SharingCommand>(source)","kotlinx.coroutines.flow.SharingStarted.command"]},{"name":"abstract fun compareAndSet(expect: T, update: T): Boolean(source)","description":"kotlinx.coroutines.flow.MutableStateFlow.compareAndSet","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-state-flow/compare-and-set.html","searchKeys":["compareAndSet","abstract fun compareAndSet(expect: T, update: T): Boolean(source)","kotlinx.coroutines.flow.MutableStateFlow.compareAndSet"]},{"name":"abstract fun complete(): Boolean(source)","description":"kotlinx.coroutines.CompletableJob.complete","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completable-job/complete.html","searchKeys":["complete","abstract fun complete(): Boolean(source)","kotlinx.coroutines.CompletableJob.complete"]},{"name":"abstract fun complete(affected: T, failure: Any?)(source)","description":"kotlinx.coroutines.internal.AtomicOp.complete","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-atomic-op/complete.html","searchKeys":["complete","abstract fun complete(affected: T, failure: Any?)(source)","kotlinx.coroutines.internal.AtomicOp.complete"]},{"name":"abstract fun complete(op: AtomicOp<*>, failure: Any?)(source)","description":"kotlinx.coroutines.internal.AtomicDesc.complete","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-atomic-desc/complete.html","searchKeys":["complete","abstract fun complete(op: AtomicOp<*>, failure: Any?)(source)","kotlinx.coroutines.internal.AtomicDesc.complete"]},{"name":"abstract fun complete(value: T): Boolean(source)","description":"kotlinx.coroutines.CompletableDeferred.complete","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred/complete.html","searchKeys":["complete","abstract fun complete(value: T): Boolean(source)","kotlinx.coroutines.CompletableDeferred.complete"]},{"name":"abstract fun completeExceptionally(exception: Throwable): Boolean(source)","description":"kotlinx.coroutines.CompletableDeferred.completeExceptionally","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred/complete-exceptionally.html","searchKeys":["completeExceptionally","abstract fun completeExceptionally(exception: Throwable): Boolean(source)","kotlinx.coroutines.CompletableDeferred.completeExceptionally"]},{"name":"abstract fun completeExceptionally(exception: Throwable): Boolean(source)","description":"kotlinx.coroutines.CompletableJob.completeExceptionally","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completable-job/complete-exceptionally.html","searchKeys":["completeExceptionally","abstract fun completeExceptionally(exception: Throwable): Boolean(source)","kotlinx.coroutines.CompletableJob.completeExceptionally"]},{"name":"abstract fun completeResume(token: Any)(source)","description":"kotlinx.coroutines.CancellableContinuation.completeResume","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/complete-resume.html","searchKeys":["completeResume","abstract fun completeResume(token: Any)(source)","kotlinx.coroutines.CancellableContinuation.completeResume"]},{"name":"abstract fun copyForChild(): CopyableThreadContextElement<S>(source)","description":"kotlinx.coroutines.CopyableThreadContextElement.copyForChild","location":"kotlinx-coroutines-core/kotlinx.coroutines/-copyable-thread-context-element/copy-for-child.html","searchKeys":["copyForChild","abstract fun copyForChild(): CopyableThreadContextElement<S>(source)","kotlinx.coroutines.CopyableThreadContextElement.copyForChild"]},{"name":"abstract fun createCopy(): T?(source)","description":"kotlinx.coroutines.CopyableThrowable.createCopy","location":"kotlinx-coroutines-core/kotlinx.coroutines/-copyable-throwable/create-copy.html","searchKeys":["createCopy","abstract fun createCopy(): T?(source)","kotlinx.coroutines.CopyableThrowable.createCopy"]},{"name":"abstract fun createDispatcher(allFactories: List<MainDispatcherFactory>): MainCoroutineDispatcher(source)","description":"kotlinx.coroutines.internal.MainDispatcherFactory.createDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-main-dispatcher-factory/create-dispatcher.html","searchKeys":["createDispatcher","abstract fun createDispatcher(allFactories: List<MainDispatcherFactory>): MainCoroutineDispatcher(source)","kotlinx.coroutines.internal.MainDispatcherFactory.createDispatcher"]},{"name":"abstract fun dispatch(context: CoroutineContext, block: Runnable)(source)","description":"kotlinx.coroutines.CoroutineDispatcher.dispatch","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/dispatch.html","searchKeys":["dispatch","abstract fun dispatch(context: CoroutineContext, block: Runnable)(source)","kotlinx.coroutines.CoroutineDispatcher.dispatch"]},{"name":"abstract fun dispose()(source)","description":"kotlinx.coroutines.DisposableHandle.dispose","location":"kotlinx-coroutines-core/kotlinx.coroutines/-disposable-handle/dispose.html","searchKeys":["dispose","abstract fun dispose()(source)","kotlinx.coroutines.DisposableHandle.dispose"]},{"name":"abstract fun disposeOnSelect(handle: DisposableHandle)(source)","description":"kotlinx.coroutines.selects.SelectInstance.disposeOnSelect","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-instance/dispose-on-select.html","searchKeys":["disposeOnSelect","abstract fun disposeOnSelect(handle: DisposableHandle)(source)","kotlinx.coroutines.selects.SelectInstance.disposeOnSelect"]},{"name":"abstract fun finishPrepare(prepareOp: LockFreeLinkedListNode.PrepareOp)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.finishPrepare","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-abstract-atomic-desc/finish-prepare.html","searchKeys":["finishPrepare","abstract fun finishPrepare(prepareOp: LockFreeLinkedListNode.PrepareOp)","kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.finishPrepare"]},{"name":"abstract fun fuse(context: CoroutineContext = EmptyCoroutineContext, capacity: Int = Channel.OPTIONAL_CHANNEL, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND): Flow<T>(source)","description":"kotlinx.coroutines.flow.internal.FusibleFlow.fuse","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow.internal/-fusible-flow/fuse.html","searchKeys":["fuse","abstract fun fuse(context: CoroutineContext = EmptyCoroutineContext, capacity: Int = Channel.OPTIONAL_CHANNEL, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND): Flow<T>(source)","kotlinx.coroutines.flow.internal.FusibleFlow.fuse"]},{"name":"abstract fun getCancellationException(): CancellationException(source)","description":"kotlinx.coroutines.Job.getCancellationException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/get-cancellation-exception.html","searchKeys":["getCancellationException","abstract fun getCancellationException(): CancellationException(source)","kotlinx.coroutines.Job.getCancellationException"]},{"name":"abstract fun getChildJobCancellationCause(): CancellationException(source)","description":"kotlinx.coroutines.ParentJob.getChildJobCancellationCause","location":"kotlinx-coroutines-core/kotlinx.coroutines/-parent-job/get-child-job-cancellation-cause.html","searchKeys":["getChildJobCancellationCause","abstract fun getChildJobCancellationCause(): CancellationException(source)","kotlinx.coroutines.ParentJob.getChildJobCancellationCause"]},{"name":"abstract fun getCompleted(): T(source)","description":"kotlinx.coroutines.Deferred.getCompleted","location":"kotlinx-coroutines-core/kotlinx.coroutines/-deferred/get-completed.html","searchKeys":["getCompleted","abstract fun getCompleted(): T(source)","kotlinx.coroutines.Deferred.getCompleted"]},{"name":"abstract fun getCompletionExceptionOrNull(): Throwable?(source)","description":"kotlinx.coroutines.Deferred.getCompletionExceptionOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines/-deferred/get-completion-exception-or-null.html","searchKeys":["getCompletionExceptionOrNull","abstract fun getCompletionExceptionOrNull(): Throwable?(source)","kotlinx.coroutines.Deferred.getCompletionExceptionOrNull"]},{"name":"abstract fun handleException(context: CoroutineContext, exception: Throwable)(source)","description":"kotlinx.coroutines.CoroutineExceptionHandler.handleException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/handle-exception.html","searchKeys":["handleException","abstract fun handleException(context: CoroutineContext, exception: Throwable)(source)","kotlinx.coroutines.CoroutineExceptionHandler.handleException"]},{"name":"abstract fun holdsLock(owner: Any): Boolean(source)","description":"kotlinx.coroutines.sync.Mutex.holdsLock","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/holds-lock.html","searchKeys":["holdsLock","abstract fun holdsLock(owner: Any): Boolean(source)","kotlinx.coroutines.sync.Mutex.holdsLock"]},{"name":"abstract fun initCancellability()(source)","description":"kotlinx.coroutines.CancellableContinuation.initCancellability","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/init-cancellability.html","searchKeys":["initCancellability","abstract fun initCancellability()(source)","kotlinx.coroutines.CancellableContinuation.initCancellability"]},{"name":"abstract fun invokeOnCancellation(handler: CompletionHandler)(source)","description":"kotlinx.coroutines.CancellableContinuation.invokeOnCancellation","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/invoke-on-cancellation.html","searchKeys":["invokeOnCancellation","abstract fun invokeOnCancellation(handler: CompletionHandler)(source)","kotlinx.coroutines.CancellableContinuation.invokeOnCancellation"]},{"name":"abstract fun invokeOnClose(handler: (cause: Throwable?) -> Unit)(source)","description":"kotlinx.coroutines.channels.SendChannel.invokeOnClose","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/invoke-on-close.html","searchKeys":["invokeOnClose","abstract fun invokeOnClose(handler: (cause: Throwable?) -> Unit)(source)","kotlinx.coroutines.channels.SendChannel.invokeOnClose"]},{"name":"abstract fun invokeOnCompletion(handler: CompletionHandler): DisposableHandle(source)","description":"kotlinx.coroutines.Job.invokeOnCompletion","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/invoke-on-completion.html","searchKeys":["invokeOnCompletion","abstract fun invokeOnCompletion(handler: CompletionHandler): DisposableHandle(source)","kotlinx.coroutines.Job.invokeOnCompletion"]},{"name":"abstract fun invokeOnCompletion(onCancelling: Boolean = false, invokeImmediately: Boolean = true, handler: CompletionHandler): DisposableHandle(source)","description":"kotlinx.coroutines.Job.invokeOnCompletion","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/invoke-on-completion.html","searchKeys":["invokeOnCompletion","abstract fun invokeOnCompletion(onCancelling: Boolean = false, invokeImmediately: Boolean = true, handler: CompletionHandler): DisposableHandle(source)","kotlinx.coroutines.Job.invokeOnCompletion"]},{"name":"abstract fun mergeForChild(overwritingElement: CoroutineContext.Element): CoroutineContext(source)","description":"kotlinx.coroutines.CopyableThreadContextElement.mergeForChild","location":"kotlinx-coroutines-core/kotlinx.coroutines/-copyable-thread-context-element/merge-for-child.html","searchKeys":["mergeForChild","abstract fun mergeForChild(overwritingElement: CoroutineContext.Element): CoroutineContext(source)","kotlinx.coroutines.CopyableThreadContextElement.mergeForChild"]},{"name":"abstract fun onTimeout(timeMillis: Long, block: suspend () -> R)(source)","description":"kotlinx.coroutines.selects.SelectBuilder.onTimeout","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-builder/on-timeout.html","searchKeys":["onTimeout","abstract fun onTimeout(timeMillis: Long, block: suspend () -> R)(source)","kotlinx.coroutines.selects.SelectBuilder.onTimeout"]},{"name":"abstract fun openSubscription(): ReceiveChannel<E>(source)","description":"kotlinx.coroutines.channels.BroadcastChannel.openSubscription","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-broadcast-channel/open-subscription.html","searchKeys":["openSubscription","abstract fun openSubscription(): ReceiveChannel<E>(source)","kotlinx.coroutines.channels.BroadcastChannel.openSubscription"]},{"name":"abstract fun parentCancelled(parentJob: ParentJob)(source)","description":"kotlinx.coroutines.ChildJob.parentCancelled","location":"kotlinx-coroutines-core/kotlinx.coroutines/-child-job/parent-cancelled.html","searchKeys":["parentCancelled","abstract fun parentCancelled(parentJob: ParentJob)(source)","kotlinx.coroutines.ChildJob.parentCancelled"]},{"name":"abstract fun perform(affected: Any?): Any?(source)","description":"kotlinx.coroutines.internal.OpDescriptor.perform","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-op-descriptor/perform.html","searchKeys":["perform","abstract fun perform(affected: Any?): Any?(source)","kotlinx.coroutines.internal.OpDescriptor.perform"]},{"name":"abstract fun performAtomicTrySelect(desc: AtomicDesc): Any?(source)","description":"kotlinx.coroutines.selects.SelectInstance.performAtomicTrySelect","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-instance/perform-atomic-try-select.html","searchKeys":["performAtomicTrySelect","abstract fun performAtomicTrySelect(desc: AtomicDesc): Any?(source)","kotlinx.coroutines.selects.SelectInstance.performAtomicTrySelect"]},{"name":"abstract fun prepare(affected: T): Any?(source)","description":"kotlinx.coroutines.internal.AtomicOp.prepare","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-atomic-op/prepare.html","searchKeys":["prepare","abstract fun prepare(affected: T): Any?(source)","kotlinx.coroutines.internal.AtomicOp.prepare"]},{"name":"abstract fun prepare(op: AtomicOp<*>): Any?(source)","description":"kotlinx.coroutines.internal.AtomicDesc.prepare","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-atomic-desc/prepare.html","searchKeys":["prepare","abstract fun prepare(op: AtomicOp<*>): Any?(source)","kotlinx.coroutines.internal.AtomicDesc.prepare"]},{"name":"abstract fun release()(source)","description":"kotlinx.coroutines.sync.Semaphore.release","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-semaphore/release.html","searchKeys":["release","abstract fun release()(source)","kotlinx.coroutines.sync.Semaphore.release"]},{"name":"abstract fun resetReplayCache()(source)","description":"kotlinx.coroutines.flow.MutableSharedFlow.resetReplayCache","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-shared-flow/reset-replay-cache.html","searchKeys":["resetReplayCache","abstract fun resetReplayCache()(source)","kotlinx.coroutines.flow.MutableSharedFlow.resetReplayCache"]},{"name":"abstract fun restoreThreadContext(context: CoroutineContext, oldState: S)(source)","description":"kotlinx.coroutines.ThreadContextElement.restoreThreadContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/-thread-context-element/restore-thread-context.html","searchKeys":["restoreThreadContext","abstract fun restoreThreadContext(context: CoroutineContext, oldState: S)(source)","kotlinx.coroutines.ThreadContextElement.restoreThreadContext"]},{"name":"abstract fun resume(value: T, onCancellation: (cause: Throwable) -> Unit?)(source)","description":"kotlinx.coroutines.CancellableContinuation.resume","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/resume.html","searchKeys":["resume","abstract fun resume(value: T, onCancellation: (cause: Throwable) -> Unit?)(source)","kotlinx.coroutines.CancellableContinuation.resume"]},{"name":"abstract fun resumeSelectWithException(exception: Throwable)(source)","description":"kotlinx.coroutines.selects.SelectInstance.resumeSelectWithException","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-instance/resume-select-with-exception.html","searchKeys":["resumeSelectWithException","abstract fun resumeSelectWithException(exception: Throwable)(source)","kotlinx.coroutines.selects.SelectInstance.resumeSelectWithException"]},{"name":"abstract fun scheduleResumeAfterDelay(timeMillis: Long, continuation: CancellableContinuation<Unit>)(source)","description":"kotlinx.coroutines.Delay.scheduleResumeAfterDelay","location":"kotlinx-coroutines-core/kotlinx.coroutines/-delay/schedule-resume-after-delay.html","searchKeys":["scheduleResumeAfterDelay","abstract fun scheduleResumeAfterDelay(timeMillis: Long, continuation: CancellableContinuation<Unit>)(source)","kotlinx.coroutines.Delay.scheduleResumeAfterDelay"]},{"name":"abstract fun start(): Boolean(source)","description":"kotlinx.coroutines.Job.start","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/start.html","searchKeys":["start","abstract fun start(): Boolean(source)","kotlinx.coroutines.Job.start"]},{"name":"abstract fun tryAcquire(): Boolean(source)","description":"kotlinx.coroutines.sync.Semaphore.tryAcquire","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-semaphore/try-acquire.html","searchKeys":["tryAcquire","abstract fun tryAcquire(): Boolean(source)","kotlinx.coroutines.sync.Semaphore.tryAcquire"]},{"name":"abstract fun tryEmit(value: T): Boolean(source)","description":"kotlinx.coroutines.flow.MutableSharedFlow.tryEmit","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-shared-flow/try-emit.html","searchKeys":["tryEmit","abstract fun tryEmit(value: T): Boolean(source)","kotlinx.coroutines.flow.MutableSharedFlow.tryEmit"]},{"name":"abstract fun tryLock(owner: Any? = null): Boolean(source)","description":"kotlinx.coroutines.sync.Mutex.tryLock","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/try-lock.html","searchKeys":["tryLock","abstract fun tryLock(owner: Any? = null): Boolean(source)","kotlinx.coroutines.sync.Mutex.tryLock"]},{"name":"abstract fun tryReceive(): ChannelResult<E>(source)","description":"kotlinx.coroutines.channels.ReceiveChannel.tryReceive","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/try-receive.html","searchKeys":["tryReceive","abstract fun tryReceive(): ChannelResult<E>(source)","kotlinx.coroutines.channels.ReceiveChannel.tryReceive"]},{"name":"abstract fun tryResume(value: T, idempotent: Any? = null): Any?(source)","description":"kotlinx.coroutines.CancellableContinuation.tryResume","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/try-resume.html","searchKeys":["tryResume","abstract fun tryResume(value: T, idempotent: Any? = null): Any?(source)","kotlinx.coroutines.CancellableContinuation.tryResume"]},{"name":"abstract fun tryResume(value: T, idempotent: Any?, onCancellation: (cause: Throwable) -> Unit?): Any?(source)","description":"kotlinx.coroutines.CancellableContinuation.tryResume","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/try-resume.html","searchKeys":["tryResume","abstract fun tryResume(value: T, idempotent: Any?, onCancellation: (cause: Throwable) -> Unit?): Any?(source)","kotlinx.coroutines.CancellableContinuation.tryResume"]},{"name":"abstract fun tryResumeWithException(exception: Throwable): Any?(source)","description":"kotlinx.coroutines.CancellableContinuation.tryResumeWithException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/try-resume-with-exception.html","searchKeys":["tryResumeWithException","abstract fun tryResumeWithException(exception: Throwable): Any?(source)","kotlinx.coroutines.CancellableContinuation.tryResumeWithException"]},{"name":"abstract fun trySelect(): Boolean(source)","description":"kotlinx.coroutines.selects.SelectInstance.trySelect","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-instance/try-select.html","searchKeys":["trySelect","abstract fun trySelect(): Boolean(source)","kotlinx.coroutines.selects.SelectInstance.trySelect"]},{"name":"abstract fun trySelectOther(otherOp: PrepareOp?): Any?(source)","description":"kotlinx.coroutines.selects.SelectInstance.trySelectOther","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-instance/try-select-other.html","searchKeys":["trySelectOther","abstract fun trySelectOther(otherOp: PrepareOp?): Any?(source)","kotlinx.coroutines.selects.SelectInstance.trySelectOther"]},{"name":"abstract fun trySend(element: E): ChannelResult<Unit>(source)","description":"kotlinx.coroutines.channels.SendChannel.trySend","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/try-send.html","searchKeys":["trySend","abstract fun trySend(element: E): ChannelResult<Unit>(source)","kotlinx.coroutines.channels.SendChannel.trySend"]},{"name":"abstract fun unlock(owner: Any? = null)(source)","description":"kotlinx.coroutines.sync.Mutex.unlock","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/unlock.html","searchKeys":["unlock","abstract fun unlock(owner: Any? = null)(source)","kotlinx.coroutines.sync.Mutex.unlock"]},{"name":"abstract fun updateThreadContext(context: CoroutineContext): S(source)","description":"kotlinx.coroutines.ThreadContextElement.updateThreadContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/-thread-context-element/update-thread-context.html","searchKeys":["updateThreadContext","abstract fun updateThreadContext(context: CoroutineContext): S(source)","kotlinx.coroutines.ThreadContextElement.updateThreadContext"]},{"name":"abstract fun updatedNext(affected: Node, next: Node): Any","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.updatedNext","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-abstract-atomic-desc/updated-next.html","searchKeys":["updatedNext","abstract fun updatedNext(affected: Node, next: Node): Any","kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.updatedNext"]},{"name":"abstract operator fun <P, Q> SelectClause2<P, Q>.invoke(param: P, block: suspend (Q) -> R)(source)","description":"kotlinx.coroutines.selects.SelectBuilder.invoke","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-builder/invoke.html","searchKeys":["invoke","abstract operator fun <P, Q> SelectClause2<P, Q>.invoke(param: P, block: suspend (Q) -> R)(source)","kotlinx.coroutines.selects.SelectBuilder.invoke"]},{"name":"abstract operator fun <Q> SelectClause1<Q>.invoke(block: suspend (Q) -> R)(source)","description":"kotlinx.coroutines.selects.SelectBuilder.invoke","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-builder/invoke.html","searchKeys":["invoke","abstract operator fun <Q> SelectClause1<Q>.invoke(block: suspend (Q) -> R)(source)","kotlinx.coroutines.selects.SelectBuilder.invoke"]},{"name":"abstract operator fun SelectClause0.invoke(block: suspend () -> R)(source)","description":"kotlinx.coroutines.selects.SelectBuilder.invoke","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-builder/invoke.html","searchKeys":["invoke","abstract operator fun SelectClause0.invoke(block: suspend () -> R)(source)","kotlinx.coroutines.selects.SelectBuilder.invoke"]},{"name":"abstract operator fun iterator(): ChannelIterator<E>(source)","description":"kotlinx.coroutines.channels.ReceiveChannel.iterator","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/iterator.html","searchKeys":["iterator","abstract operator fun iterator(): ChannelIterator<E>(source)","kotlinx.coroutines.channels.ReceiveChannel.iterator"]},{"name":"abstract operator fun next(): E(source)","description":"kotlinx.coroutines.channels.ChannelIterator.next","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-iterator/next.html","searchKeys":["next","abstract operator fun next(): E(source)","kotlinx.coroutines.channels.ChannelIterator.next"]},{"name":"abstract override fun close()(source)","description":"kotlinx.coroutines.ExecutorCoroutineDispatcher.close","location":"kotlinx-coroutines-core/kotlinx.coroutines/-executor-coroutine-dispatcher/close.html","searchKeys":["close","abstract override fun close()(source)","kotlinx.coroutines.ExecutorCoroutineDispatcher.close"]},{"name":"abstract override var value: T(source)","description":"kotlinx.coroutines.flow.MutableStateFlow.value","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-state-flow/value.html","searchKeys":["value","abstract override var value: T(source)","kotlinx.coroutines.flow.MutableStateFlow.value"]},{"name":"abstract suspend fun acquire()(source)","description":"kotlinx.coroutines.sync.Semaphore.acquire","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-semaphore/acquire.html","searchKeys":["acquire","abstract suspend fun acquire()(source)","kotlinx.coroutines.sync.Semaphore.acquire"]},{"name":"abstract suspend fun await(): T(source)","description":"kotlinx.coroutines.Deferred.await","location":"kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html","searchKeys":["await","abstract suspend fun await(): T(source)","kotlinx.coroutines.Deferred.await"]},{"name":"abstract suspend fun collect(collector: FlowCollector<T>)(source)","description":"kotlinx.coroutines.flow.Flow.collect","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/collect.html","searchKeys":["collect","abstract suspend fun collect(collector: FlowCollector<T>)(source)","kotlinx.coroutines.flow.Flow.collect"]},{"name":"abstract suspend fun collectSafely(collector: FlowCollector<T>)(source)","description":"kotlinx.coroutines.flow.AbstractFlow.collectSafely","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-abstract-flow/collect-safely.html","searchKeys":["collectSafely","abstract suspend fun collectSafely(collector: FlowCollector<T>)(source)","kotlinx.coroutines.flow.AbstractFlow.collectSafely"]},{"name":"abstract suspend fun emit(value: T)(source)","description":"kotlinx.coroutines.flow.FlowCollector.emit","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow-collector/emit.html","searchKeys":["emit","abstract suspend fun emit(value: T)(source)","kotlinx.coroutines.flow.FlowCollector.emit"]},{"name":"abstract suspend fun join()(source)","description":"kotlinx.coroutines.Job.join","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/join.html","searchKeys":["join","abstract suspend fun join()(source)","kotlinx.coroutines.Job.join"]},{"name":"abstract suspend fun lock(owner: Any? = null)(source)","description":"kotlinx.coroutines.sync.Mutex.lock","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/lock.html","searchKeys":["lock","abstract suspend fun lock(owner: Any? = null)(source)","kotlinx.coroutines.sync.Mutex.lock"]},{"name":"abstract suspend fun receive(): E(source)","description":"kotlinx.coroutines.channels.ReceiveChannel.receive","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/receive.html","searchKeys":["receive","abstract suspend fun receive(): E(source)","kotlinx.coroutines.channels.ReceiveChannel.receive"]},{"name":"abstract suspend fun receiveCatching(): ChannelResult<E>(source)","description":"kotlinx.coroutines.channels.ReceiveChannel.receiveCatching","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/receive-catching.html","searchKeys":["receiveCatching","abstract suspend fun receiveCatching(): ChannelResult<E>(source)","kotlinx.coroutines.channels.ReceiveChannel.receiveCatching"]},{"name":"abstract suspend fun send(element: E)(source)","description":"kotlinx.coroutines.channels.SendChannel.send","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/send.html","searchKeys":["send","abstract suspend fun send(element: E)(source)","kotlinx.coroutines.channels.SendChannel.send"]},{"name":"abstract suspend operator fun hasNext(): Boolean(source)","description":"kotlinx.coroutines.channels.ChannelIterator.hasNext","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-iterator/has-next.html","searchKeys":["hasNext","abstract suspend operator fun hasNext(): Boolean(source)","kotlinx.coroutines.channels.ChannelIterator.hasNext"]},{"name":"abstract suspend override fun collect(collector: FlowCollector<T>): Nothing(source)","description":"kotlinx.coroutines.flow.SharedFlow.collect","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-shared-flow/collect.html","searchKeys":["collect","abstract suspend override fun collect(collector: FlowCollector<T>): Nothing(source)","kotlinx.coroutines.flow.SharedFlow.collect"]},{"name":"abstract suspend override fun emit(value: T)(source)","description":"kotlinx.coroutines.flow.MutableSharedFlow.emit","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-shared-flow/emit.html","searchKeys":["emit","abstract suspend override fun emit(value: T)(source)","kotlinx.coroutines.flow.MutableSharedFlow.emit"]},{"name":"abstract val atomicOp: AtomicOp<*>?(source)","description":"kotlinx.coroutines.internal.OpDescriptor.atomicOp","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-op-descriptor/atomic-op.html","searchKeys":["atomicOp","abstract val atomicOp: AtomicOp<*>?(source)","kotlinx.coroutines.internal.OpDescriptor.atomicOp"]},{"name":"abstract val availablePermits: Int(source)","description":"kotlinx.coroutines.sync.Semaphore.availablePermits","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-semaphore/available-permits.html","searchKeys":["availablePermits","abstract val availablePermits: Int(source)","kotlinx.coroutines.sync.Semaphore.availablePermits"]},{"name":"abstract val channel: Channel<E>(source)","description":"kotlinx.coroutines.channels.ActorScope.channel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-actor-scope/channel.html","searchKeys":["channel","abstract val channel: Channel<E>(source)","kotlinx.coroutines.channels.ActorScope.channel"]},{"name":"abstract val channel: SendChannel<E>(source)","description":"kotlinx.coroutines.channels.ProducerScope.channel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-producer-scope/channel.html","searchKeys":["channel","abstract val channel: SendChannel<E>(source)","kotlinx.coroutines.channels.ProducerScope.channel"]},{"name":"abstract val children: Sequence<Job>(source)","description":"kotlinx.coroutines.Job.children","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/children.html","searchKeys":["children","abstract val children: Sequence<Job>(source)","kotlinx.coroutines.Job.children"]},{"name":"abstract val completion: Continuation<R>(source)","description":"kotlinx.coroutines.selects.SelectInstance.completion","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-instance/completion.html","searchKeys":["completion","abstract val completion: Continuation<R>(source)","kotlinx.coroutines.selects.SelectInstance.completion"]},{"name":"abstract val coroutineContext: CoroutineContext(source)","description":"kotlinx.coroutines.CoroutineScope.coroutineContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/coroutine-context.html","searchKeys":["coroutineContext","abstract val coroutineContext: CoroutineContext(source)","kotlinx.coroutines.CoroutineScope.coroutineContext"]},{"name":"abstract val executor: Executor(source)","description":"kotlinx.coroutines.ExecutorCoroutineDispatcher.executor","location":"kotlinx-coroutines-core/kotlinx.coroutines/-executor-coroutine-dispatcher/executor.html","searchKeys":["executor","abstract val executor: Executor(source)","kotlinx.coroutines.ExecutorCoroutineDispatcher.executor"]},{"name":"abstract val immediate: MainCoroutineDispatcher(source)","description":"kotlinx.coroutines.MainCoroutineDispatcher.immediate","location":"kotlinx-coroutines-core/kotlinx.coroutines/-main-coroutine-dispatcher/immediate.html","searchKeys":["immediate","abstract val immediate: MainCoroutineDispatcher(source)","kotlinx.coroutines.MainCoroutineDispatcher.immediate"]},{"name":"abstract val isActive: Boolean(source)","description":"kotlinx.coroutines.CancellableContinuation.isActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/is-active.html","searchKeys":["isActive","abstract val isActive: Boolean(source)","kotlinx.coroutines.CancellableContinuation.isActive"]},{"name":"abstract val isActive: Boolean(source)","description":"kotlinx.coroutines.Job.isActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/is-active.html","searchKeys":["isActive","abstract val isActive: Boolean(source)","kotlinx.coroutines.Job.isActive"]},{"name":"abstract val isCancelled: Boolean(source)","description":"kotlinx.coroutines.CancellableContinuation.isCancelled","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/is-cancelled.html","searchKeys":["isCancelled","abstract val isCancelled: Boolean(source)","kotlinx.coroutines.CancellableContinuation.isCancelled"]},{"name":"abstract val isCancelled: Boolean(source)","description":"kotlinx.coroutines.Job.isCancelled","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/is-cancelled.html","searchKeys":["isCancelled","abstract val isCancelled: Boolean(source)","kotlinx.coroutines.Job.isCancelled"]},{"name":"abstract val isClosedForReceive: Boolean(source)","description":"kotlinx.coroutines.channels.ReceiveChannel.isClosedForReceive","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/is-closed-for-receive.html","searchKeys":["isClosedForReceive","abstract val isClosedForReceive: Boolean(source)","kotlinx.coroutines.channels.ReceiveChannel.isClosedForReceive"]},{"name":"abstract val isClosedForSend: Boolean(source)","description":"kotlinx.coroutines.channels.SendChannel.isClosedForSend","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/is-closed-for-send.html","searchKeys":["isClosedForSend","abstract val isClosedForSend: Boolean(source)","kotlinx.coroutines.channels.SendChannel.isClosedForSend"]},{"name":"abstract val isCompleted: Boolean(source)","description":"kotlinx.coroutines.CancellableContinuation.isCompleted","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/is-completed.html","searchKeys":["isCompleted","abstract val isCompleted: Boolean(source)","kotlinx.coroutines.CancellableContinuation.isCompleted"]},{"name":"abstract val isCompleted: Boolean(source)","description":"kotlinx.coroutines.Job.isCompleted","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/is-completed.html","searchKeys":["isCompleted","abstract val isCompleted: Boolean(source)","kotlinx.coroutines.Job.isCompleted"]},{"name":"abstract val isEmpty: Boolean(source)","description":"kotlinx.coroutines.channels.ReceiveChannel.isEmpty","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/is-empty.html","searchKeys":["isEmpty","abstract val isEmpty: Boolean(source)","kotlinx.coroutines.channels.ReceiveChannel.isEmpty"]},{"name":"abstract val isLocked: Boolean(source)","description":"kotlinx.coroutines.sync.Mutex.isLocked","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/is-locked.html","searchKeys":["isLocked","abstract val isLocked: Boolean(source)","kotlinx.coroutines.sync.Mutex.isLocked"]},{"name":"abstract val isSelected: Boolean(source)","description":"kotlinx.coroutines.selects.SelectInstance.isSelected","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-instance/is-selected.html","searchKeys":["isSelected","abstract val isSelected: Boolean(source)","kotlinx.coroutines.selects.SelectInstance.isSelected"]},{"name":"abstract val loadPriority: Int(source)","description":"kotlinx.coroutines.internal.MainDispatcherFactory.loadPriority","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-main-dispatcher-factory/load-priority.html","searchKeys":["loadPriority","abstract val loadPriority: Int(source)","kotlinx.coroutines.internal.MainDispatcherFactory.loadPriority"]},{"name":"abstract val onAwait: SelectClause1<T>(source)","description":"kotlinx.coroutines.Deferred.onAwait","location":"kotlinx-coroutines-core/kotlinx.coroutines/-deferred/on-await.html","searchKeys":["onAwait","abstract val onAwait: SelectClause1<T>(source)","kotlinx.coroutines.Deferred.onAwait"]},{"name":"abstract val onJoin: SelectClause0(source)","description":"kotlinx.coroutines.Job.onJoin","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/on-join.html","searchKeys":["onJoin","abstract val onJoin: SelectClause0(source)","kotlinx.coroutines.Job.onJoin"]},{"name":"abstract val onLock: SelectClause2<Any?, Mutex>(source)","description":"kotlinx.coroutines.sync.Mutex.onLock","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/on-lock.html","searchKeys":["onLock","abstract val onLock: SelectClause2<Any?, Mutex>(source)","kotlinx.coroutines.sync.Mutex.onLock"]},{"name":"abstract val onReceive: SelectClause1<E>(source)","description":"kotlinx.coroutines.channels.ReceiveChannel.onReceive","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/on-receive.html","searchKeys":["onReceive","abstract val onReceive: SelectClause1<E>(source)","kotlinx.coroutines.channels.ReceiveChannel.onReceive"]},{"name":"abstract val onReceiveCatching: SelectClause1<ChannelResult<E>>(source)","description":"kotlinx.coroutines.channels.ReceiveChannel.onReceiveCatching","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/on-receive-catching.html","searchKeys":["onReceiveCatching","abstract val onReceiveCatching: SelectClause1<ChannelResult<E>>(source)","kotlinx.coroutines.channels.ReceiveChannel.onReceiveCatching"]},{"name":"abstract val onSend: SelectClause2<E, SendChannel<E>>(source)","description":"kotlinx.coroutines.channels.SendChannel.onSend","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/on-send.html","searchKeys":["onSend","abstract val onSend: SelectClause2<E, SendChannel<E>>(source)","kotlinx.coroutines.channels.SendChannel.onSend"]},{"name":"abstract val parent: Job?(source)","description":"kotlinx.coroutines.ChildHandle.parent","location":"kotlinx-coroutines-core/kotlinx.coroutines/-child-handle/parent.html","searchKeys":["parent","abstract val parent: Job?(source)","kotlinx.coroutines.ChildHandle.parent"]},{"name":"abstract val replayCache: List<T>(source)","description":"kotlinx.coroutines.flow.SharedFlow.replayCache","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-shared-flow/replay-cache.html","searchKeys":["replayCache","abstract val replayCache: List<T>(source)","kotlinx.coroutines.flow.SharedFlow.replayCache"]},{"name":"abstract val subscriptionCount: StateFlow<Int>(source)","description":"kotlinx.coroutines.flow.MutableSharedFlow.subscriptionCount","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-shared-flow/subscription-count.html","searchKeys":["subscriptionCount","abstract val subscriptionCount: StateFlow<Int>(source)","kotlinx.coroutines.flow.MutableSharedFlow.subscriptionCount"]},{"name":"abstract val value: T(source)","description":"kotlinx.coroutines.flow.StateFlow.value","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-state-flow/value.html","searchKeys":["value","abstract val value: T(source)","kotlinx.coroutines.flow.StateFlow.value"]},{"name":"abstract var heap: ThreadSafeHeap<*>?(source)","description":"kotlinx.coroutines.internal.ThreadSafeHeapNode.heap","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-thread-safe-heap-node/heap.html","searchKeys":["heap","abstract var heap: ThreadSafeHeap<*>?(source)","kotlinx.coroutines.internal.ThreadSafeHeapNode.heap"]},{"name":"abstract var index: Int(source)","description":"kotlinx.coroutines.internal.ThreadSafeHeapNode.index","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-thread-safe-heap-node/--index--.html","searchKeys":["index","abstract var index: Int(source)","kotlinx.coroutines.internal.ThreadSafeHeapNode.index"]},{"name":"annotation class DelicateCoroutinesApi(source)","description":"kotlinx.coroutines.DelicateCoroutinesApi","location":"kotlinx-coroutines-core/kotlinx.coroutines/-delicate-coroutines-api/index.html","searchKeys":["DelicateCoroutinesApi","annotation class DelicateCoroutinesApi(source)","kotlinx.coroutines.DelicateCoroutinesApi"]},{"name":"annotation class ExperimentalCoroutinesApi(source)","description":"kotlinx.coroutines.ExperimentalCoroutinesApi","location":"kotlinx-coroutines-core/kotlinx.coroutines/-experimental-coroutines-api/index.html","searchKeys":["ExperimentalCoroutinesApi","annotation class ExperimentalCoroutinesApi(source)","kotlinx.coroutines.ExperimentalCoroutinesApi"]},{"name":"annotation class FlowPreview(source)","description":"kotlinx.coroutines.FlowPreview","location":"kotlinx-coroutines-core/kotlinx.coroutines/-flow-preview/index.html","searchKeys":["FlowPreview","annotation class FlowPreview(source)","kotlinx.coroutines.FlowPreview"]},{"name":"annotation class InternalCoroutinesApi(source)","description":"kotlinx.coroutines.InternalCoroutinesApi","location":"kotlinx-coroutines-core/kotlinx.coroutines/-internal-coroutines-api/index.html","searchKeys":["InternalCoroutinesApi","annotation class InternalCoroutinesApi(source)","kotlinx.coroutines.InternalCoroutinesApi"]},{"name":"annotation class ObsoleteCoroutinesApi(source)","description":"kotlinx.coroutines.ObsoleteCoroutinesApi","location":"kotlinx-coroutines-core/kotlinx.coroutines/-obsolete-coroutines-api/index.html","searchKeys":["ObsoleteCoroutinesApi","annotation class ObsoleteCoroutinesApi(source)","kotlinx.coroutines.ObsoleteCoroutinesApi"]},{"name":"class ClosedReceiveChannelException(message: String?) : NoSuchElementException(source)","description":"kotlinx.coroutines.channels.ClosedReceiveChannelException","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-closed-receive-channel-exception/index.html","searchKeys":["ClosedReceiveChannelException","class ClosedReceiveChannelException(message: String?) : NoSuchElementException(source)","kotlinx.coroutines.channels.ClosedReceiveChannelException"]},{"name":"class ClosedSendChannelException(message: String?) : IllegalStateException(source)","description":"kotlinx.coroutines.channels.ClosedSendChannelException","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-closed-send-channel-exception/index.html","searchKeys":["ClosedSendChannelException","class ClosedSendChannelException(message: String?) : IllegalStateException(source)","kotlinx.coroutines.channels.ClosedSendChannelException"]},{"name":"class CompletionHandlerException(message: String, cause: Throwable) : RuntimeException(source)","description":"kotlinx.coroutines.CompletionHandlerException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completion-handler-exception/index.html","searchKeys":["CompletionHandlerException","class CompletionHandlerException(message: String, cause: Throwable) : RuntimeException(source)","kotlinx.coroutines.CompletionHandlerException"]},{"name":"class ConflatedBroadcastChannel<E> : BroadcastChannel<E> (source)","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/index.html","searchKeys":["ConflatedBroadcastChannel","class ConflatedBroadcastChannel<E> : BroadcastChannel<E> (source)","kotlinx.coroutines.channels.ConflatedBroadcastChannel"]},{"name":"class PrepareOp(val affected: Node, val next: Node, val desc: LockFreeLinkedListNode.AbstractAtomicDesc) : OpDescriptor","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-prepare-op/index.html","searchKeys":["PrepareOp","class PrepareOp(val affected: Node, val next: Node, val desc: LockFreeLinkedListNode.AbstractAtomicDesc) : OpDescriptor","kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp"]},{"name":"class SendingCollector<T>(channel: SendChannel<T>) : FlowCollector<T> (source)","description":"kotlinx.coroutines.flow.internal.SendingCollector","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow.internal/-sending-collector/index.html","searchKeys":["SendingCollector","class SendingCollector<T>(channel: SendChannel<T>) : FlowCollector<T> (source)","kotlinx.coroutines.flow.internal.SendingCollector"]},{"name":"class TimeoutCancellationException : CancellationException, CopyableThrowable<TimeoutCancellationException> (source)","description":"kotlinx.coroutines.TimeoutCancellationException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-timeout-cancellation-exception/index.html","searchKeys":["TimeoutCancellationException","class TimeoutCancellationException : CancellationException, CopyableThrowable<TimeoutCancellationException> (source)","kotlinx.coroutines.TimeoutCancellationException"]},{"name":"const val BUFFERED: Int(source)","description":"kotlinx.coroutines.channels.Channel.Factory.BUFFERED","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/-factory/-b-u-f-f-e-r-e-d.html","searchKeys":["BUFFERED","const val BUFFERED: Int(source)","kotlinx.coroutines.channels.Channel.Factory.BUFFERED"]},{"name":"const val CONFLATED: Int(source)","description":"kotlinx.coroutines.channels.Channel.Factory.CONFLATED","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/-factory/-c-o-n-f-l-a-t-e-d.html","searchKeys":["CONFLATED","const val CONFLATED: Int(source)","kotlinx.coroutines.channels.Channel.Factory.CONFLATED"]},{"name":"const val DEBUG_PROPERTY_NAME: String(source)","description":"kotlinx.coroutines.DEBUG_PROPERTY_NAME","location":"kotlinx-coroutines-core/kotlinx.coroutines/-d-e-b-u-g_-p-r-o-p-e-r-t-y_-n-a-m-e.html","searchKeys":["DEBUG_PROPERTY_NAME","const val DEBUG_PROPERTY_NAME: String(source)","kotlinx.coroutines.DEBUG_PROPERTY_NAME"]},{"name":"const val DEBUG_PROPERTY_VALUE_AUTO: String(source)","description":"kotlinx.coroutines.DEBUG_PROPERTY_VALUE_AUTO","location":"kotlinx-coroutines-core/kotlinx.coroutines/-d-e-b-u-g_-p-r-o-p-e-r-t-y_-v-a-l-u-e_-a-u-t-o.html","searchKeys":["DEBUG_PROPERTY_VALUE_AUTO","const val DEBUG_PROPERTY_VALUE_AUTO: String(source)","kotlinx.coroutines.DEBUG_PROPERTY_VALUE_AUTO"]},{"name":"const val DEBUG_PROPERTY_VALUE_OFF: String(source)","description":"kotlinx.coroutines.DEBUG_PROPERTY_VALUE_OFF","location":"kotlinx-coroutines-core/kotlinx.coroutines/-d-e-b-u-g_-p-r-o-p-e-r-t-y_-v-a-l-u-e_-o-f-f.html","searchKeys":["DEBUG_PROPERTY_VALUE_OFF","const val DEBUG_PROPERTY_VALUE_OFF: String(source)","kotlinx.coroutines.DEBUG_PROPERTY_VALUE_OFF"]},{"name":"const val DEBUG_PROPERTY_VALUE_ON: String(source)","description":"kotlinx.coroutines.DEBUG_PROPERTY_VALUE_ON","location":"kotlinx-coroutines-core/kotlinx.coroutines/-d-e-b-u-g_-p-r-o-p-e-r-t-y_-v-a-l-u-e_-o-n.html","searchKeys":["DEBUG_PROPERTY_VALUE_ON","const val DEBUG_PROPERTY_VALUE_ON: String(source)","kotlinx.coroutines.DEBUG_PROPERTY_VALUE_ON"]},{"name":"const val DEFAULT_BUFFER_PROPERTY_NAME: String(source)","description":"kotlinx.coroutines.channels.Channel.Factory.DEFAULT_BUFFER_PROPERTY_NAME","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/-factory/-d-e-f-a-u-l-t_-b-u-f-f-e-r_-p-r-o-p-e-r-t-y_-n-a-m-e.html","searchKeys":["DEFAULT_BUFFER_PROPERTY_NAME","const val DEFAULT_BUFFER_PROPERTY_NAME: String(source)","kotlinx.coroutines.channels.Channel.Factory.DEFAULT_BUFFER_PROPERTY_NAME"]},{"name":"const val DEFAULT_CONCURRENCY_PROPERTY_NAME: String(source)","description":"kotlinx.coroutines.flow.DEFAULT_CONCURRENCY_PROPERTY_NAME","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-d-e-f-a-u-l-t_-c-o-n-c-u-r-r-e-n-c-y_-p-r-o-p-e-r-t-y_-n-a-m-e.html","searchKeys":["DEFAULT_CONCURRENCY_PROPERTY_NAME","const val DEFAULT_CONCURRENCY_PROPERTY_NAME: String(source)","kotlinx.coroutines.flow.DEFAULT_CONCURRENCY_PROPERTY_NAME"]},{"name":"const val IO_PARALLELISM_PROPERTY_NAME: String(source)","description":"kotlinx.coroutines.IO_PARALLELISM_PROPERTY_NAME","location":"kotlinx-coroutines-core/kotlinx.coroutines/-i-o_-p-a-r-a-l-l-e-l-i-s-m_-p-r-o-p-e-r-t-y_-n-a-m-e.html","searchKeys":["IO_PARALLELISM_PROPERTY_NAME","const val IO_PARALLELISM_PROPERTY_NAME: String(source)","kotlinx.coroutines.IO_PARALLELISM_PROPERTY_NAME"]},{"name":"const val RENDEZVOUS: Int = 0(source)","description":"kotlinx.coroutines.channels.Channel.Factory.RENDEZVOUS","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/-factory/-r-e-n-d-e-z-v-o-u-s.html","searchKeys":["RENDEZVOUS","const val RENDEZVOUS: Int = 0(source)","kotlinx.coroutines.channels.Channel.Factory.RENDEZVOUS"]},{"name":"const val UNLIMITED: Int(source)","description":"kotlinx.coroutines.channels.Channel.Factory.UNLIMITED","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/-factory/-u-n-l-i-m-i-t-e-d.html","searchKeys":["UNLIMITED","const val UNLIMITED: Int(source)","kotlinx.coroutines.channels.Channel.Factory.UNLIMITED"]},{"name":"data class CoroutineName(val name: String) : AbstractCoroutineContextElement(source)","description":"kotlinx.coroutines.CoroutineName","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/index.html","searchKeys":["CoroutineName","data class CoroutineName(val name: String) : AbstractCoroutineContextElement(source)","kotlinx.coroutines.CoroutineName"]},{"name":"enum BufferOverflow : Enum<BufferOverflow> (source)","description":"kotlinx.coroutines.channels.BufferOverflow","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-buffer-overflow/index.html","searchKeys":["BufferOverflow","enum BufferOverflow : Enum<BufferOverflow> (source)","kotlinx.coroutines.channels.BufferOverflow"]},{"name":"enum CoroutineStart : Enum<CoroutineStart> (source)","description":"kotlinx.coroutines.CoroutineStart","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/index.html","searchKeys":["CoroutineStart","enum CoroutineStart : Enum<CoroutineStart> (source)","kotlinx.coroutines.CoroutineStart"]},{"name":"enum SharingCommand : Enum<SharingCommand> (source)","description":"kotlinx.coroutines.flow.SharingCommand","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-command/index.html","searchKeys":["SharingCommand","enum SharingCommand : Enum<SharingCommand> (source)","kotlinx.coroutines.flow.SharingCommand"]},{"name":"enum TickerMode : Enum<TickerMode> (source)","description":"kotlinx.coroutines.channels.TickerMode","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-ticker-mode/index.html","searchKeys":["TickerMode","enum TickerMode : Enum<TickerMode> (source)","kotlinx.coroutines.channels.TickerMode"]},{"name":"expect abstract class AbstractAtomicDesc : AtomicDesc(source)","description":"kotlinx.coroutines.internal.AbstractAtomicDesc","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-abstract-atomic-desc/index.html","searchKeys":["AbstractAtomicDesc","expect abstract class AbstractAtomicDesc : AtomicDesc(source)","kotlinx.coroutines.internal.AbstractAtomicDesc"]},{"name":"expect abstract class CloseableCoroutineDispatcher : CoroutineDispatcher(source)","description":"kotlinx.coroutines.CloseableCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/-closeable-coroutine-dispatcher/index.html","searchKeys":["CloseableCoroutineDispatcher","expect abstract class CloseableCoroutineDispatcher : CoroutineDispatcher(source)","kotlinx.coroutines.CloseableCoroutineDispatcher"]},{"name":"expect abstract fun close()(source)","description":"kotlinx.coroutines.CloseableCoroutineDispatcher.close","location":"kotlinx-coroutines-core/kotlinx.coroutines/-closeable-coroutine-dispatcher/close.html","searchKeys":["close","expect abstract fun close()(source)","kotlinx.coroutines.CloseableCoroutineDispatcher.close"]},{"name":"expect abstract fun finishPrepare(prepareOp: PrepareOp)(source)","description":"kotlinx.coroutines.internal.AbstractAtomicDesc.finishPrepare","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-abstract-atomic-desc/finish-prepare.html","searchKeys":["finishPrepare","expect abstract fun finishPrepare(prepareOp: PrepareOp)(source)","kotlinx.coroutines.internal.AbstractAtomicDesc.finishPrepare"]},{"name":"expect abstract fun run()(source)","description":"kotlinx.coroutines.Runnable.run","location":"kotlinx-coroutines-core/kotlinx.coroutines/-runnable/run.html","searchKeys":["run","expect abstract fun run()(source)","kotlinx.coroutines.Runnable.run"]},{"name":"expect class PrepareOp : OpDescriptor(source)","description":"kotlinx.coroutines.internal.PrepareOp","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-prepare-op/index.html","searchKeys":["PrepareOp","expect class PrepareOp : OpDescriptor(source)","kotlinx.coroutines.internal.PrepareOp"]},{"name":"expect fun <T : LockFreeLinkedListNode> AddLastDesc(queue: LockFreeLinkedListNode, node: T)(source)","description":"kotlinx.coroutines.internal.AddLastDesc.AddLastDesc","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-add-last-desc/-add-last-desc.html","searchKeys":["AddLastDesc","expect fun <T : LockFreeLinkedListNode> AddLastDesc(queue: LockFreeLinkedListNode, node: T)(source)","kotlinx.coroutines.internal.AddLastDesc.AddLastDesc"]},{"name":"expect fun <T> runBlocking(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T): T","description":"kotlinx.coroutines.runBlocking","location":"kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html","searchKeys":["runBlocking","expect fun <T> runBlocking(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T): T","kotlinx.coroutines.runBlocking"]},{"name":"expect fun CancellationException(message: String?)(source)","description":"kotlinx.coroutines.CancellationException.CancellationException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/-cancellation-exception.html","searchKeys":["CancellationException","expect fun CancellationException(message: String?)(source)","kotlinx.coroutines.CancellationException.CancellationException"]},{"name":"expect fun CancellationException(message: String?, cause: Throwable?): CancellationException(source)","description":"kotlinx.coroutines.CancellationException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception.html","searchKeys":["CancellationException","expect fun CancellationException(message: String?, cause: Throwable?): CancellationException(source)","kotlinx.coroutines.CancellationException"]},{"name":"expect fun CloseableCoroutineDispatcher()(source)","description":"kotlinx.coroutines.CloseableCoroutineDispatcher.CloseableCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/-closeable-coroutine-dispatcher/-closeable-coroutine-dispatcher.html","searchKeys":["CloseableCoroutineDispatcher","expect fun CloseableCoroutineDispatcher()(source)","kotlinx.coroutines.CloseableCoroutineDispatcher.CloseableCoroutineDispatcher"]},{"name":"expect fun CoroutineContext.newCoroutineContext(addedContext: CoroutineContext): CoroutineContext(source)","description":"kotlinx.coroutines.newCoroutineContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/new-coroutine-context.html","searchKeys":["newCoroutineContext","expect fun CoroutineContext.newCoroutineContext(addedContext: CoroutineContext): CoroutineContext(source)","kotlinx.coroutines.newCoroutineContext"]},{"name":"expect fun CoroutineScope.newCoroutineContext(context: CoroutineContext): CoroutineContext(source)","description":"kotlinx.coroutines.newCoroutineContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/new-coroutine-context.html","searchKeys":["newCoroutineContext","expect fun CoroutineScope.newCoroutineContext(context: CoroutineContext): CoroutineContext(source)","kotlinx.coroutines.newCoroutineContext"]},{"name":"expect fun RemoveFirstDesc(queue: LockFreeLinkedListNode)(source)","description":"kotlinx.coroutines.internal.RemoveFirstDesc.RemoveFirstDesc","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-remove-first-desc/-remove-first-desc.html","searchKeys":["RemoveFirstDesc","expect fun RemoveFirstDesc(queue: LockFreeLinkedListNode)(source)","kotlinx.coroutines.internal.RemoveFirstDesc.RemoveFirstDesc"]},{"name":"expect fun SynchronizedObject()(source)","description":"kotlinx.coroutines.internal.SynchronizedObject.SynchronizedObject","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-synchronized-object/-synchronized-object.html","searchKeys":["SynchronizedObject","expect fun SynchronizedObject()(source)","kotlinx.coroutines.internal.SynchronizedObject.SynchronizedObject"]},{"name":"expect fun addLast(node: LockFreeLinkedListNode)(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.addLast","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/add-last.html","searchKeys":["addLast","expect fun addLast(node: LockFreeLinkedListNode)(source)","kotlinx.coroutines.internal.LockFreeLinkedListNode.addLast"]},{"name":"expect fun addOneIfEmpty(node: LockFreeLinkedListNode): Boolean(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.addOneIfEmpty","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/add-one-if-empty.html","searchKeys":["addOneIfEmpty","expect fun addOneIfEmpty(node: LockFreeLinkedListNode): Boolean(source)","kotlinx.coroutines.internal.LockFreeLinkedListNode.addOneIfEmpty"]},{"name":"expect fun finishPrepare()(source)","description":"kotlinx.coroutines.internal.PrepareOp.finishPrepare","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-prepare-op/finish-prepare.html","searchKeys":["finishPrepare","expect fun finishPrepare()(source)","kotlinx.coroutines.internal.PrepareOp.finishPrepare"]},{"name":"expect fun helpRemove()(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.helpRemove","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/help-remove.html","searchKeys":["helpRemove","expect fun helpRemove()(source)","kotlinx.coroutines.internal.LockFreeLinkedListNode.helpRemove"]},{"name":"expect fun newFixedThreadPoolContext(nThreads: Int, name: String): CloseableCoroutineDispatcher","description":"kotlinx.coroutines.newFixedThreadPoolContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/new-fixed-thread-pool-context.html","searchKeys":["newFixedThreadPoolContext","expect fun newFixedThreadPoolContext(nThreads: Int, name: String): CloseableCoroutineDispatcher","kotlinx.coroutines.newFixedThreadPoolContext"]},{"name":"expect fun newSingleThreadContext(name: String): CloseableCoroutineDispatcher","description":"kotlinx.coroutines.newSingleThreadContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/new-single-thread-context.html","searchKeys":["newSingleThreadContext","expect fun newSingleThreadContext(name: String): CloseableCoroutineDispatcher","kotlinx.coroutines.newSingleThreadContext"]},{"name":"expect fun removeFirstOrNull(): LockFreeLinkedListNode?(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.removeFirstOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/remove-first-or-null.html","searchKeys":["removeFirstOrNull","expect fun removeFirstOrNull(): LockFreeLinkedListNode?(source)","kotlinx.coroutines.internal.LockFreeLinkedListNode.removeFirstOrNull"]},{"name":"expect inline fun <T : LockFreeLinkedListNode> forEach(block: (T) -> Unit)(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListHead.forEach","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-head/for-each.html","searchKeys":["forEach","expect inline fun <T : LockFreeLinkedListNode> forEach(block: (T) -> Unit)(source)","kotlinx.coroutines.internal.LockFreeLinkedListHead.forEach"]},{"name":"expect inline fun <T> removeFirstIfIsInstanceOfOrPeekIf(predicate: (T) -> Boolean): T?(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.removeFirstIfIsInstanceOfOrPeekIf","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/remove-first-if-is-instance-of-or-peek-if.html","searchKeys":["removeFirstIfIsInstanceOfOrPeekIf","expect inline fun <T> removeFirstIfIsInstanceOfOrPeekIf(predicate: (T) -> Boolean): T?(source)","kotlinx.coroutines.internal.LockFreeLinkedListNode.removeFirstIfIsInstanceOfOrPeekIf"]},{"name":"expect inline fun <T> synchronized(lock: SynchronizedObject, block: () -> T): T(source)","description":"kotlinx.coroutines.internal.synchronized","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/synchronized.html","searchKeys":["synchronized","expect inline fun <T> synchronized(lock: SynchronizedObject, block: () -> T): T(source)","kotlinx.coroutines.internal.synchronized"]},{"name":"expect inline fun Runnable(crossinline block: () -> Unit): Runnable(source)","description":"kotlinx.coroutines.Runnable","location":"kotlinx-coroutines-core/kotlinx.coroutines/-runnable.html","searchKeys":["Runnable","expect inline fun Runnable(crossinline block: () -> Unit): Runnable(source)","kotlinx.coroutines.Runnable"]},{"name":"expect inline fun addLastIf(node: LockFreeLinkedListNode, crossinline condition: () -> Boolean): Boolean(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.addLastIf","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/add-last-if.html","searchKeys":["addLastIf","expect inline fun addLastIf(node: LockFreeLinkedListNode, crossinline condition: () -> Boolean): Boolean(source)","kotlinx.coroutines.internal.LockFreeLinkedListNode.addLastIf"]},{"name":"expect inline fun addLastIfPrev(node: LockFreeLinkedListNode, predicate: (LockFreeLinkedListNode) -> Boolean): Boolean(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.addLastIfPrev","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/add-last-if-prev.html","searchKeys":["addLastIfPrev","expect inline fun addLastIfPrev(node: LockFreeLinkedListNode, predicate: (LockFreeLinkedListNode) -> Boolean): Boolean(source)","kotlinx.coroutines.internal.LockFreeLinkedListNode.addLastIfPrev"]},{"name":"expect inline fun addLastIfPrevAndIf(node: LockFreeLinkedListNode, predicate: (LockFreeLinkedListNode) -> Boolean, crossinline condition: () -> Boolean): Boolean(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.addLastIfPrevAndIf","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/add-last-if-prev-and-if.html","searchKeys":["addLastIfPrevAndIf","expect inline fun addLastIfPrevAndIf(node: LockFreeLinkedListNode, predicate: (LockFreeLinkedListNode) -> Boolean, crossinline condition: () -> Boolean): Boolean(source)","kotlinx.coroutines.internal.LockFreeLinkedListNode.addLastIfPrevAndIf"]},{"name":"expect interface Runnable(source)","description":"kotlinx.coroutines.Runnable","location":"kotlinx-coroutines-core/kotlinx.coroutines/-runnable/index.html","searchKeys":["Runnable","expect interface Runnable(source)","kotlinx.coroutines.Runnable"]},{"name":"expect object Dispatchers(source)","description":"kotlinx.coroutines.Dispatchers","location":"kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/index.html","searchKeys":["Dispatchers","expect object Dispatchers(source)","kotlinx.coroutines.Dispatchers"]},{"name":"expect open class AddLastDesc<T : LockFreeLinkedListNode>(queue: LockFreeLinkedListNode, node: T) : AbstractAtomicDesc(source)","description":"kotlinx.coroutines.internal.AddLastDesc","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-add-last-desc/index.html","searchKeys":["AddLastDesc","expect open class AddLastDesc<T : LockFreeLinkedListNode>(queue: LockFreeLinkedListNode, node: T) : AbstractAtomicDesc(source)","kotlinx.coroutines.internal.AddLastDesc"]},{"name":"expect open class CancellationException(message: String?) : IllegalStateException(source)","description":"kotlinx.coroutines.CancellationException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellation-exception/index.html","searchKeys":["CancellationException","expect open class CancellationException(message: String?) : IllegalStateException(source)","kotlinx.coroutines.CancellationException"]},{"name":"expect open class LockFreeLinkedListHead : LockFreeLinkedListNode(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListHead","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-head/index.html","searchKeys":["LockFreeLinkedListHead","expect open class LockFreeLinkedListHead : LockFreeLinkedListNode(source)","kotlinx.coroutines.internal.LockFreeLinkedListHead"]},{"name":"expect open class LockFreeLinkedListNode(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/index.html","searchKeys":["LockFreeLinkedListNode","expect open class LockFreeLinkedListNode(source)","kotlinx.coroutines.internal.LockFreeLinkedListNode"]},{"name":"expect open class RemoveFirstDesc<T>(queue: LockFreeLinkedListNode) : AbstractAtomicDesc(source)","description":"kotlinx.coroutines.internal.RemoveFirstDesc","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-remove-first-desc/index.html","searchKeys":["RemoveFirstDesc","expect open class RemoveFirstDesc<T>(queue: LockFreeLinkedListNode) : AbstractAtomicDesc(source)","kotlinx.coroutines.internal.RemoveFirstDesc"]},{"name":"expect open class SynchronizedObject(source)","description":"kotlinx.coroutines.internal.SynchronizedObject","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-synchronized-object/index.html","searchKeys":["SynchronizedObject","expect open class SynchronizedObject(source)","kotlinx.coroutines.internal.SynchronizedObject"]},{"name":"expect open fun onPrepare(prepareOp: PrepareOp): Any?(source)","description":"kotlinx.coroutines.internal.AbstractAtomicDesc.onPrepare","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-abstract-atomic-desc/on-prepare.html","searchKeys":["onPrepare","expect open fun onPrepare(prepareOp: PrepareOp): Any?(source)","kotlinx.coroutines.internal.AbstractAtomicDesc.onPrepare"]},{"name":"expect open fun onRemoved(affected: LockFreeLinkedListNode)(source)","description":"kotlinx.coroutines.internal.AbstractAtomicDesc.onRemoved","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-abstract-atomic-desc/on-removed.html","searchKeys":["onRemoved","expect open fun onRemoved(affected: LockFreeLinkedListNode)(source)","kotlinx.coroutines.internal.AbstractAtomicDesc.onRemoved"]},{"name":"expect open fun remove(): Boolean(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.remove","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/remove.html","searchKeys":["remove","expect open fun remove(): Boolean(source)","kotlinx.coroutines.internal.LockFreeLinkedListNode.remove"]},{"name":"expect open override fun finishPrepare(prepareOp: PrepareOp)(source)","description":"kotlinx.coroutines.internal.AddLastDesc.finishPrepare","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-add-last-desc/finish-prepare.html","searchKeys":["finishPrepare","expect open override fun finishPrepare(prepareOp: PrepareOp)(source)","kotlinx.coroutines.internal.AddLastDesc.finishPrepare"]},{"name":"expect open override fun finishPrepare(prepareOp: PrepareOp)(source)","description":"kotlinx.coroutines.internal.RemoveFirstDesc.finishPrepare","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-remove-first-desc/finish-prepare.html","searchKeys":["finishPrepare","expect open override fun finishPrepare(prepareOp: PrepareOp)(source)","kotlinx.coroutines.internal.RemoveFirstDesc.finishPrepare"]},{"name":"expect open override val atomicOp: AtomicOp<*>(source)","description":"kotlinx.coroutines.internal.PrepareOp.atomicOp","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-prepare-op/atomic-op.html","searchKeys":["atomicOp","expect open override val atomicOp: AtomicOp<*>(source)","kotlinx.coroutines.internal.PrepareOp.atomicOp"]},{"name":"expect override fun complete(op: AtomicOp<*>, failure: Any?)(source)","description":"kotlinx.coroutines.internal.AbstractAtomicDesc.complete","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-abstract-atomic-desc/complete.html","searchKeys":["complete","expect override fun complete(op: AtomicOp<*>, failure: Any?)(source)","kotlinx.coroutines.internal.AbstractAtomicDesc.complete"]},{"name":"expect override fun prepare(op: AtomicOp<*>): Any?(source)","description":"kotlinx.coroutines.internal.AbstractAtomicDesc.prepare","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-abstract-atomic-desc/prepare.html","searchKeys":["prepare","expect override fun prepare(op: AtomicOp<*>): Any?(source)","kotlinx.coroutines.internal.AbstractAtomicDesc.prepare"]},{"name":"expect override fun remove(): Nothing(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListHead.remove","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-head/remove.html","searchKeys":["remove","expect override fun remove(): Nothing(source)","kotlinx.coroutines.internal.LockFreeLinkedListHead.remove"]},{"name":"expect val Default: CoroutineDispatcher(source)","description":"kotlinx.coroutines.Dispatchers.Default","location":"kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-default.html","searchKeys":["Default","expect val Default: CoroutineDispatcher(source)","kotlinx.coroutines.Dispatchers.Default"]},{"name":"expect val Main: MainCoroutineDispatcher(source)","description":"kotlinx.coroutines.Dispatchers.Main","location":"kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html","searchKeys":["Main","expect val Main: MainCoroutineDispatcher(source)","kotlinx.coroutines.Dispatchers.Main"]},{"name":"expect val Unconfined: CoroutineDispatcher(source)","description":"kotlinx.coroutines.Dispatchers.Unconfined","location":"kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-unconfined.html","searchKeys":["Unconfined","expect val Unconfined: CoroutineDispatcher(source)","kotlinx.coroutines.Dispatchers.Unconfined"]},{"name":"expect val affected: LockFreeLinkedListNode(source)","description":"kotlinx.coroutines.internal.PrepareOp.affected","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-prepare-op/affected.html","searchKeys":["affected","expect val affected: LockFreeLinkedListNode(source)","kotlinx.coroutines.internal.PrepareOp.affected"]},{"name":"expect val desc: AbstractAtomicDesc(source)","description":"kotlinx.coroutines.internal.PrepareOp.desc","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-prepare-op/desc.html","searchKeys":["desc","expect val desc: AbstractAtomicDesc(source)","kotlinx.coroutines.internal.PrepareOp.desc"]},{"name":"expect val isEmpty: Boolean(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListHead.isEmpty","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-head/is-empty.html","searchKeys":["isEmpty","expect val isEmpty: Boolean(source)","kotlinx.coroutines.internal.LockFreeLinkedListHead.isEmpty"]},{"name":"expect val isRemoved: Boolean(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.isRemoved","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/is-removed.html","searchKeys":["isRemoved","expect val isRemoved: Boolean(source)","kotlinx.coroutines.internal.LockFreeLinkedListNode.isRemoved"]},{"name":"expect val nextNode: LockFreeLinkedListNode(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.nextNode","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/next-node.html","searchKeys":["nextNode","expect val nextNode: LockFreeLinkedListNode(source)","kotlinx.coroutines.internal.LockFreeLinkedListNode.nextNode"]},{"name":"expect val node: T(source)","description":"kotlinx.coroutines.internal.AddLastDesc.node","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-add-last-desc/node.html","searchKeys":["node","expect val node: T(source)","kotlinx.coroutines.internal.AddLastDesc.node"]},{"name":"expect val prevNode: LockFreeLinkedListNode(source)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.prevNode","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/prev-node.html","searchKeys":["prevNode","expect val prevNode: LockFreeLinkedListNode(source)","kotlinx.coroutines.internal.LockFreeLinkedListNode.prevNode"]},{"name":"expect val queue: LockFreeLinkedListNode(source)","description":"kotlinx.coroutines.internal.AddLastDesc.queue","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-add-last-desc/queue.html","searchKeys":["queue","expect val queue: LockFreeLinkedListNode(source)","kotlinx.coroutines.internal.AddLastDesc.queue"]},{"name":"expect val queue: LockFreeLinkedListNode(source)","description":"kotlinx.coroutines.internal.RemoveFirstDesc.queue","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-remove-first-desc/queue.html","searchKeys":["queue","expect val queue: LockFreeLinkedListNode(source)","kotlinx.coroutines.internal.RemoveFirstDesc.queue"]},{"name":"expect val result: T(source)","description":"kotlinx.coroutines.internal.RemoveFirstDesc.result","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-remove-first-desc/result.html","searchKeys":["result","expect val result: T(source)","kotlinx.coroutines.internal.RemoveFirstDesc.result"]},{"name":"fun <E : Any> ReceiveChannel<E>.onReceiveOrNull(): SelectClause1<E?>(source)","description":"kotlinx.coroutines.channels.onReceiveOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/on-receive-or-null.html","searchKeys":["onReceiveOrNull","fun <E : Any> ReceiveChannel<E>.onReceiveOrNull(): SelectClause1<E?>(source)","kotlinx.coroutines.channels.onReceiveOrNull"]},{"name":"fun <E> BroadcastChannel(capacity: Int): BroadcastChannel<E>(source)","description":"kotlinx.coroutines.channels.BroadcastChannel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-broadcast-channel.html","searchKeys":["BroadcastChannel","fun <E> BroadcastChannel(capacity: Int): BroadcastChannel<E>(source)","kotlinx.coroutines.channels.BroadcastChannel"]},{"name":"fun <E> Channel(capacity: Int = RENDEZVOUS, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND, onUndeliveredElement: (E) -> Unit? = null): Channel<E>(source)","description":"kotlinx.coroutines.channels.Channel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel.html","searchKeys":["Channel","fun <E> Channel(capacity: Int = RENDEZVOUS, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND, onUndeliveredElement: (E) -> Unit? = null): Channel<E>(source)","kotlinx.coroutines.channels.Channel"]},{"name":"fun <E> ConflatedBroadcastChannel(value: E)(source)","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel.ConflatedBroadcastChannel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/-conflated-broadcast-channel.html","searchKeys":["ConflatedBroadcastChannel","fun <E> ConflatedBroadcastChannel(value: E)(source)","kotlinx.coroutines.channels.ConflatedBroadcastChannel.ConflatedBroadcastChannel"]},{"name":"fun <E> CoroutineScope.actor(context: CoroutineContext = EmptyCoroutineContext, capacity: Int = 0, start: CoroutineStart = CoroutineStart.DEFAULT, onCompletion: CompletionHandler? = null, block: suspend ActorScope<E>.() -> Unit): SendChannel<E>(source)","description":"kotlinx.coroutines.channels.actor","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/actor.html","searchKeys":["actor","fun <E> CoroutineScope.actor(context: CoroutineContext = EmptyCoroutineContext, capacity: Int = 0, start: CoroutineStart = CoroutineStart.DEFAULT, onCompletion: CompletionHandler? = null, block: suspend ActorScope<E>.() -> Unit): SendChannel<E>(source)","kotlinx.coroutines.channels.actor"]},{"name":"fun <E> CoroutineScope.broadcast(context: CoroutineContext = EmptyCoroutineContext, capacity: Int = 1, start: CoroutineStart = CoroutineStart.LAZY, onCompletion: CompletionHandler? = null, block: suspend ProducerScope<E>.() -> Unit): BroadcastChannel<E>(source)","description":"kotlinx.coroutines.channels.broadcast","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/broadcast.html","searchKeys":["broadcast","fun <E> CoroutineScope.broadcast(context: CoroutineContext = EmptyCoroutineContext, capacity: Int = 1, start: CoroutineStart = CoroutineStart.LAZY, onCompletion: CompletionHandler? = null, block: suspend ProducerScope<E>.() -> Unit): BroadcastChannel<E>(source)","kotlinx.coroutines.channels.broadcast"]},{"name":"fun <E> CoroutineScope.produce(context: CoroutineContext = EmptyCoroutineContext, capacity: Int = 0, block: suspend ProducerScope<E>.() -> Unit): ReceiveChannel<E>(source)","description":"kotlinx.coroutines.channels.produce","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html","searchKeys":["produce","fun <E> CoroutineScope.produce(context: CoroutineContext = EmptyCoroutineContext, capacity: Int = 0, block: suspend ProducerScope<E>.() -> Unit): ReceiveChannel<E>(source)","kotlinx.coroutines.channels.produce"]},{"name":"fun <E> CoroutineScope.produce(context: CoroutineContext = EmptyCoroutineContext, capacity: Int = 0, start: CoroutineStart = CoroutineStart.DEFAULT, onCompletion: CompletionHandler? = null, block: suspend ProducerScope<E>.() -> Unit): ReceiveChannel<E>(source)","description":"kotlinx.coroutines.channels.produce","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/produce.html","searchKeys":["produce","fun <E> CoroutineScope.produce(context: CoroutineContext = EmptyCoroutineContext, capacity: Int = 0, start: CoroutineStart = CoroutineStart.DEFAULT, onCompletion: CompletionHandler? = null, block: suspend ProducerScope<E>.() -> Unit): ReceiveChannel<E>(source)","kotlinx.coroutines.channels.produce"]},{"name":"fun <E> ReceiveChannel<E>.broadcast(capacity: Int = 1, start: CoroutineStart = CoroutineStart.LAZY): BroadcastChannel<E>(source)","description":"kotlinx.coroutines.channels.broadcast","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/broadcast.html","searchKeys":["broadcast","fun <E> ReceiveChannel<E>.broadcast(capacity: Int = 1, start: CoroutineStart = CoroutineStart.LAZY): BroadcastChannel<E>(source)","kotlinx.coroutines.channels.broadcast"]},{"name":"fun <E> SendChannel<E>.sendBlocking(element: E)","description":"kotlinx.coroutines.channels.sendBlocking","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/send-blocking.html","searchKeys":["sendBlocking","fun <E> SendChannel<E>.sendBlocking(element: E)","kotlinx.coroutines.channels.sendBlocking"]},{"name":"fun <E> SendChannel<E>.trySendBlocking(element: E): ChannelResult<Unit>","description":"kotlinx.coroutines.channels.trySendBlocking","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/try-send-blocking.html","searchKeys":["trySendBlocking","fun <E> SendChannel<E>.trySendBlocking(element: E): ChannelResult<Unit>","kotlinx.coroutines.channels.trySendBlocking"]},{"name":"fun <E> closed(cause: Throwable?): ChannelResult<E>(source)","description":"kotlinx.coroutines.channels.ChannelResult.Companion.closed","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/-companion/closed.html","searchKeys":["closed","fun <E> closed(cause: Throwable?): ChannelResult<E>(source)","kotlinx.coroutines.channels.ChannelResult.Companion.closed"]},{"name":"fun <E> failure(): ChannelResult<E>(source)","description":"kotlinx.coroutines.channels.ChannelResult.Companion.failure","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/-companion/failure.html","searchKeys":["failure","fun <E> failure(): ChannelResult<E>(source)","kotlinx.coroutines.channels.ChannelResult.Companion.failure"]},{"name":"fun <E> success(value: E): ChannelResult<E>(source)","description":"kotlinx.coroutines.channels.ChannelResult.Companion.success","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/-companion/success.html","searchKeys":["success","fun <E> success(value: E): ChannelResult<E>(source)","kotlinx.coroutines.channels.ChannelResult.Companion.success"]},{"name":"fun <R> SelectBuilder<R>.onTimeout(timeout: Duration, block: suspend () -> R)(source)","description":"kotlinx.coroutines.selects.onTimeout","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/on-timeout.html","searchKeys":["onTimeout","fun <R> SelectBuilder<R>.onTimeout(timeout: Duration, block: suspend () -> R)(source)","kotlinx.coroutines.selects.onTimeout"]},{"name":"fun <R> start(start: CoroutineStart, receiver: R, block: suspend R.() -> T)(source)","description":"kotlinx.coroutines.AbstractCoroutine.start","location":"kotlinx-coroutines-core/kotlinx.coroutines/-abstract-coroutine/start.html","searchKeys":["start","fun <R> start(start: CoroutineStart, receiver: R, block: suspend R.() -> T)(source)","kotlinx.coroutines.AbstractCoroutine.start"]},{"name":"fun <T : Any> Flow<T?>.filterNotNull(): Flow<T>(source)","description":"kotlinx.coroutines.flow.filterNotNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/filter-not-null.html","searchKeys":["filterNotNull","fun <T : Any> Flow<T?>.filterNotNull(): Flow<T>(source)","kotlinx.coroutines.flow.filterNotNull"]},{"name":"fun <T : Node> AddLastDesc(queue: Node, node: T)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.AddLastDesc.AddLastDesc","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-add-last-desc/-add-last-desc.html","searchKeys":["AddLastDesc","fun <T : Node> AddLastDesc(queue: Node, node: T)","kotlinx.coroutines.internal.LockFreeLinkedListNode.AddLastDesc.AddLastDesc"]},{"name":"fun <T : Node> describeAddLast(node: T): LockFreeLinkedListNode.AddLastDesc<T>","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.describeAddLast","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/describe-add-last.html","searchKeys":["describeAddLast","fun <T : Node> describeAddLast(node: T): LockFreeLinkedListNode.AddLastDesc<T>","kotlinx.coroutines.internal.LockFreeLinkedListNode.describeAddLast"]},{"name":"fun <T, K> Flow<T>.distinctUntilChangedBy(keySelector: (T) -> K): Flow<T>(source)","description":"kotlinx.coroutines.flow.distinctUntilChangedBy","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/distinct-until-changed-by.html","searchKeys":["distinctUntilChangedBy","fun <T, K> Flow<T>.distinctUntilChangedBy(keySelector: (T) -> K): Flow<T>(source)","kotlinx.coroutines.flow.distinctUntilChangedBy"]},{"name":"fun <T, R> Flow<T>.compose(transformer: Flow<T>.() -> Flow<R>): Flow<R>(source)","description":"kotlinx.coroutines.flow.compose","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/compose.html","searchKeys":["compose","fun <T, R> Flow<T>.compose(transformer: Flow<T>.() -> Flow<R>): Flow<R>(source)","kotlinx.coroutines.flow.compose"]},{"name":"fun <T, R> Flow<T>.concatMap(mapper: (T) -> Flow<R>): Flow<R>(source)","description":"kotlinx.coroutines.flow.concatMap","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/concat-map.html","searchKeys":["concatMap","fun <T, R> Flow<T>.concatMap(mapper: (T) -> Flow<R>): Flow<R>(source)","kotlinx.coroutines.flow.concatMap"]},{"name":"fun <T, R> Flow<T>.flatMap(mapper: suspend (T) -> Flow<R>): Flow<R>(source)","description":"kotlinx.coroutines.flow.flatMap","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map.html","searchKeys":["flatMap","fun <T, R> Flow<T>.flatMap(mapper: suspend (T) -> Flow<R>): Flow<R>(source)","kotlinx.coroutines.flow.flatMap"]},{"name":"fun <T, R> Flow<T>.flatMapConcat(transform: suspend (value: T) -> Flow<R>): Flow<R>(source)","description":"kotlinx.coroutines.flow.flatMapConcat","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-concat.html","searchKeys":["flatMapConcat","fun <T, R> Flow<T>.flatMapConcat(transform: suspend (value: T) -> Flow<R>): Flow<R>(source)","kotlinx.coroutines.flow.flatMapConcat"]},{"name":"fun <T, R> Flow<T>.flatMapMerge(concurrency: Int = DEFAULT_CONCURRENCY, transform: suspend (value: T) -> Flow<R>): Flow<R>(source)","description":"kotlinx.coroutines.flow.flatMapMerge","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-merge.html","searchKeys":["flatMapMerge","fun <T, R> Flow<T>.flatMapMerge(concurrency: Int = DEFAULT_CONCURRENCY, transform: suspend (value: T) -> Flow<R>): Flow<R>(source)","kotlinx.coroutines.flow.flatMapMerge"]},{"name":"fun <T, R> Flow<T>.mapLatest(transform: suspend (value: T) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.mapLatest","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/map-latest.html","searchKeys":["mapLatest","fun <T, R> Flow<T>.mapLatest(transform: suspend (value: T) -> R): Flow<R>(source)","kotlinx.coroutines.flow.mapLatest"]},{"name":"fun <T, R> Flow<T>.runningFold(initial: R, operation: suspend (accumulator: R, value: T) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.runningFold","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/running-fold.html","searchKeys":["runningFold","fun <T, R> Flow<T>.runningFold(initial: R, operation: suspend (accumulator: R, value: T) -> R): Flow<R>(source)","kotlinx.coroutines.flow.runningFold"]},{"name":"fun <T, R> Flow<T>.scan(initial: R, operation: suspend (accumulator: R, value: T) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.scan","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/scan.html","searchKeys":["scan","fun <T, R> Flow<T>.scan(initial: R, operation: suspend (accumulator: R, value: T) -> R): Flow<R>(source)","kotlinx.coroutines.flow.scan"]},{"name":"fun <T, R> Flow<T>.scanFold(initial: R, operation: suspend (accumulator: R, value: T) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.scanFold","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/scan-fold.html","searchKeys":["scanFold","fun <T, R> Flow<T>.scanFold(initial: R, operation: suspend (accumulator: R, value: T) -> R): Flow<R>(source)","kotlinx.coroutines.flow.scanFold"]},{"name":"fun <T, R> Flow<T>.switchMap(transform: suspend (value: T) -> Flow<R>): Flow<R>(source)","description":"kotlinx.coroutines.flow.switchMap","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/switch-map.html","searchKeys":["switchMap","fun <T, R> Flow<T>.switchMap(transform: suspend (value: T) -> Flow<R>): Flow<R>(source)","kotlinx.coroutines.flow.switchMap"]},{"name":"fun <T, R> Flow<T>.transformLatest(transform: suspend FlowCollector<R>.(value: T) -> Unit): Flow<R>(source)","description":"kotlinx.coroutines.flow.transformLatest","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/transform-latest.html","searchKeys":["transformLatest","fun <T, R> Flow<T>.transformLatest(transform: suspend FlowCollector<R>.(value: T) -> Unit): Flow<R>(source)","kotlinx.coroutines.flow.transformLatest"]},{"name":"fun <T, R> Flow<T>.transformWhile(transform: suspend FlowCollector<R>.(value: T) -> Boolean): Flow<R>(source)","description":"kotlinx.coroutines.flow.transformWhile","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/transform-while.html","searchKeys":["transformWhile","fun <T, R> Flow<T>.transformWhile(transform: suspend FlowCollector<R>.(value: T) -> Boolean): Flow<R>(source)","kotlinx.coroutines.flow.transformWhile"]},{"name":"fun <T1, T2, R> Flow<T1>.combine(flow: Flow<T2>, transform: suspend (a: T1, b: T2) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.combine","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine.html","searchKeys":["combine","fun <T1, T2, R> Flow<T1>.combine(flow: Flow<T2>, transform: suspend (a: T1, b: T2) -> R): Flow<R>(source)","kotlinx.coroutines.flow.combine"]},{"name":"fun <T1, T2, R> Flow<T1>.combineLatest(other: Flow<T2>, transform: suspend (T1, T2) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.combineLatest","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-latest.html","searchKeys":["combineLatest","fun <T1, T2, R> Flow<T1>.combineLatest(other: Flow<T2>, transform: suspend (T1, T2) -> R): Flow<R>(source)","kotlinx.coroutines.flow.combineLatest"]},{"name":"fun <T1, T2, R> Flow<T1>.combineTransform(flow: Flow<T2>, transform: suspend FlowCollector<R>.(a: T1, b: T2) -> Unit): Flow<R>(source)","description":"kotlinx.coroutines.flow.combineTransform","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-transform.html","searchKeys":["combineTransform","fun <T1, T2, R> Flow<T1>.combineTransform(flow: Flow<T2>, transform: suspend FlowCollector<R>.(a: T1, b: T2) -> Unit): Flow<R>(source)","kotlinx.coroutines.flow.combineTransform"]},{"name":"fun <T1, T2, R> Flow<T1>.zip(other: Flow<T2>, transform: suspend (T1, T2) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.zip","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/zip.html","searchKeys":["zip","fun <T1, T2, R> Flow<T1>.zip(other: Flow<T2>, transform: suspend (T1, T2) -> R): Flow<R>(source)","kotlinx.coroutines.flow.zip"]},{"name":"fun <T1, T2, R> combine(flow: Flow<T1>, flow2: Flow<T2>, transform: suspend (a: T1, b: T2) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.combine","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine.html","searchKeys":["combine","fun <T1, T2, R> combine(flow: Flow<T1>, flow2: Flow<T2>, transform: suspend (a: T1, b: T2) -> R): Flow<R>(source)","kotlinx.coroutines.flow.combine"]},{"name":"fun <T1, T2, R> combineTransform(flow: Flow<T1>, flow2: Flow<T2>, transform: suspend FlowCollector<R>.(a: T1, b: T2) -> Unit): Flow<R>(source)","description":"kotlinx.coroutines.flow.combineTransform","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-transform.html","searchKeys":["combineTransform","fun <T1, T2, R> combineTransform(flow: Flow<T1>, flow2: Flow<T2>, transform: suspend FlowCollector<R>.(a: T1, b: T2) -> Unit): Flow<R>(source)","kotlinx.coroutines.flow.combineTransform"]},{"name":"fun <T1, T2, T3, R> Flow<T1>.combineLatest(other: Flow<T2>, other2: Flow<T3>, transform: suspend (T1, T2, T3) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.combineLatest","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-latest.html","searchKeys":["combineLatest","fun <T1, T2, T3, R> Flow<T1>.combineLatest(other: Flow<T2>, other2: Flow<T3>, transform: suspend (T1, T2, T3) -> R): Flow<R>(source)","kotlinx.coroutines.flow.combineLatest"]},{"name":"fun <T1, T2, T3, R> combine(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, transform: suspend (T1, T2, T3) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.combine","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine.html","searchKeys":["combine","fun <T1, T2, T3, R> combine(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, transform: suspend (T1, T2, T3) -> R): Flow<R>(source)","kotlinx.coroutines.flow.combine"]},{"name":"fun <T1, T2, T3, R> combineTransform(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, transform: suspend FlowCollector<R>.(T1, T2, T3) -> Unit): Flow<R>(source)","description":"kotlinx.coroutines.flow.combineTransform","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-transform.html","searchKeys":["combineTransform","fun <T1, T2, T3, R> combineTransform(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, transform: suspend FlowCollector<R>.(T1, T2, T3) -> Unit): Flow<R>(source)","kotlinx.coroutines.flow.combineTransform"]},{"name":"fun <T1, T2, T3, T4, R> Flow<T1>.combineLatest(other: Flow<T2>, other2: Flow<T3>, other3: Flow<T4>, transform: suspend (T1, T2, T3, T4) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.combineLatest","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-latest.html","searchKeys":["combineLatest","fun <T1, T2, T3, T4, R> Flow<T1>.combineLatest(other: Flow<T2>, other2: Flow<T3>, other3: Flow<T4>, transform: suspend (T1, T2, T3, T4) -> R): Flow<R>(source)","kotlinx.coroutines.flow.combineLatest"]},{"name":"fun <T1, T2, T3, T4, R> combine(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, flow4: Flow<T4>, transform: suspend (T1, T2, T3, T4) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.combine","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine.html","searchKeys":["combine","fun <T1, T2, T3, T4, R> combine(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, flow4: Flow<T4>, transform: suspend (T1, T2, T3, T4) -> R): Flow<R>(source)","kotlinx.coroutines.flow.combine"]},{"name":"fun <T1, T2, T3, T4, R> combineTransform(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, flow4: Flow<T4>, transform: suspend FlowCollector<R>.(T1, T2, T3, T4) -> Unit): Flow<R>(source)","description":"kotlinx.coroutines.flow.combineTransform","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-transform.html","searchKeys":["combineTransform","fun <T1, T2, T3, T4, R> combineTransform(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, flow4: Flow<T4>, transform: suspend FlowCollector<R>.(T1, T2, T3, T4) -> Unit): Flow<R>(source)","kotlinx.coroutines.flow.combineTransform"]},{"name":"fun <T1, T2, T3, T4, T5, R> Flow<T1>.combineLatest(other: Flow<T2>, other2: Flow<T3>, other3: Flow<T4>, other4: Flow<T5>, transform: suspend (T1, T2, T3, T4, T5) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.combineLatest","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-latest.html","searchKeys":["combineLatest","fun <T1, T2, T3, T4, T5, R> Flow<T1>.combineLatest(other: Flow<T2>, other2: Flow<T3>, other3: Flow<T4>, other4: Flow<T5>, transform: suspend (T1, T2, T3, T4, T5) -> R): Flow<R>(source)","kotlinx.coroutines.flow.combineLatest"]},{"name":"fun <T1, T2, T3, T4, T5, R> combine(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, flow4: Flow<T4>, flow5: Flow<T5>, transform: suspend (T1, T2, T3, T4, T5) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.combine","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine.html","searchKeys":["combine","fun <T1, T2, T3, T4, T5, R> combine(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, flow4: Flow<T4>, flow5: Flow<T5>, transform: suspend (T1, T2, T3, T4, T5) -> R): Flow<R>(source)","kotlinx.coroutines.flow.combine"]},{"name":"fun <T1, T2, T3, T4, T5, R> combineTransform(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, flow4: Flow<T4>, flow5: Flow<T5>, transform: suspend FlowCollector<R>.(T1, T2, T3, T4, T5) -> Unit): Flow<R>(source)","description":"kotlinx.coroutines.flow.combineTransform","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-transform.html","searchKeys":["combineTransform","fun <T1, T2, T3, T4, T5, R> combineTransform(flow: Flow<T1>, flow2: Flow<T2>, flow3: Flow<T3>, flow4: Flow<T4>, flow5: Flow<T5>, transform: suspend FlowCollector<R>.(T1, T2, T3, T4, T5) -> Unit): Flow<R>(source)","kotlinx.coroutines.flow.combineTransform"]},{"name":"fun <T> () -> T.asFlow(): Flow<T>(source)","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun <T> () -> T.asFlow(): Flow<T>(source)","kotlinx.coroutines.flow.asFlow"]},{"name":"fun <T> Array<T>.asFlow(): Flow<T>(source)","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun <T> Array<T>.asFlow(): Flow<T>(source)","kotlinx.coroutines.flow.asFlow"]},{"name":"fun <T> BroadcastChannel<T>.asFlow(): Flow<T>(source)","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun <T> BroadcastChannel<T>.asFlow(): Flow<T>(source)","kotlinx.coroutines.flow.asFlow"]},{"name":"fun <T> CompletableDeferred(parent: Job? = null): CompletableDeferred<T>(source)","description":"kotlinx.coroutines.CompletableDeferred","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred.html","searchKeys":["CompletableDeferred","fun <T> CompletableDeferred(parent: Job? = null): CompletableDeferred<T>(source)","kotlinx.coroutines.CompletableDeferred"]},{"name":"fun <T> CompletableDeferred(value: T): CompletableDeferred<T>(source)","description":"kotlinx.coroutines.CompletableDeferred","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred.html","searchKeys":["CompletableDeferred","fun <T> CompletableDeferred(value: T): CompletableDeferred<T>(source)","kotlinx.coroutines.CompletableDeferred"]},{"name":"fun <T> CompletableDeferred<T>.completeWith(result: Result<T>): Boolean(source)","description":"kotlinx.coroutines.completeWith","location":"kotlinx-coroutines-core/kotlinx.coroutines/complete-with.html","searchKeys":["completeWith","fun <T> CompletableDeferred<T>.completeWith(result: Result<T>): Boolean(source)","kotlinx.coroutines.completeWith"]},{"name":"fun <T> Continuation<T>.resumeCancellableWith(result: Result<T>, onCancellation: (cause: Throwable) -> Unit? = null)(source)","description":"kotlinx.coroutines.internal.resumeCancellableWith","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/resume-cancellable-with.html","searchKeys":["resumeCancellableWith","fun <T> Continuation<T>.resumeCancellableWith(result: Result<T>, onCancellation: (cause: Throwable) -> Unit? = null)(source)","kotlinx.coroutines.internal.resumeCancellableWith"]},{"name":"fun <T> CoroutineScope.async(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> T): Deferred<T>(source)","description":"kotlinx.coroutines.async","location":"kotlinx-coroutines-core/kotlinx.coroutines/async.html","searchKeys":["async","fun <T> CoroutineScope.async(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> T): Deferred<T>(source)","kotlinx.coroutines.async"]},{"name":"fun <T> CoroutineScope.promise(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> T): Promise<T>(source)","description":"kotlinx.coroutines.promise","location":"kotlinx-coroutines-core/kotlinx.coroutines/promise.html","searchKeys":["promise","fun <T> CoroutineScope.promise(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> T): Promise<T>(source)","kotlinx.coroutines.promise"]},{"name":"fun <T> Deferred<T>.asPromise(): Promise<T>(source)","description":"kotlinx.coroutines.asPromise","location":"kotlinx-coroutines-core/kotlinx.coroutines/as-promise.html","searchKeys":["asPromise","fun <T> Deferred<T>.asPromise(): Promise<T>(source)","kotlinx.coroutines.asPromise"]},{"name":"fun <T> Flow<Flow<T>>.flatten(): Flow<T>(source)","description":"kotlinx.coroutines.flow.flatten","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flatten.html","searchKeys":["flatten","fun <T> Flow<Flow<T>>.flatten(): Flow<T>(source)","kotlinx.coroutines.flow.flatten"]},{"name":"fun <T> Flow<Flow<T>>.flattenConcat(): Flow<T>(source)","description":"kotlinx.coroutines.flow.flattenConcat","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flatten-concat.html","searchKeys":["flattenConcat","fun <T> Flow<Flow<T>>.flattenConcat(): Flow<T>(source)","kotlinx.coroutines.flow.flattenConcat"]},{"name":"fun <T> Flow<Flow<T>>.flattenMerge(concurrency: Int = DEFAULT_CONCURRENCY): Flow<T>(source)","description":"kotlinx.coroutines.flow.flattenMerge","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flatten-merge.html","searchKeys":["flattenMerge","fun <T> Flow<Flow<T>>.flattenMerge(concurrency: Int = DEFAULT_CONCURRENCY): Flow<T>(source)","kotlinx.coroutines.flow.flattenMerge"]},{"name":"fun <T> Flow<Flow<T>>.merge(): Flow<T>(source)","description":"kotlinx.coroutines.flow.merge","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/merge.html","searchKeys":["merge","fun <T> Flow<Flow<T>>.merge(): Flow<T>(source)","kotlinx.coroutines.flow.merge"]},{"name":"fun <T> Flow<T>.buffer(capacity: Int = BUFFERED, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND): Flow<T>(source)","description":"kotlinx.coroutines.flow.buffer","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/buffer.html","searchKeys":["buffer","fun <T> Flow<T>.buffer(capacity: Int = BUFFERED, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND): Flow<T>(source)","kotlinx.coroutines.flow.buffer"]},{"name":"fun <T> Flow<T>.cache(): Flow<T>(source)","description":"kotlinx.coroutines.flow.cache","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/cache.html","searchKeys":["cache","fun <T> Flow<T>.cache(): Flow<T>(source)","kotlinx.coroutines.flow.cache"]},{"name":"fun <T> Flow<T>.cancellable(): Flow<T>(source)","description":"kotlinx.coroutines.flow.cancellable","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/cancellable.html","searchKeys":["cancellable","fun <T> Flow<T>.cancellable(): Flow<T>(source)","kotlinx.coroutines.flow.cancellable"]},{"name":"fun <T> Flow<T>.catch(action: suspend FlowCollector<T>.(cause: Throwable) -> Unit): Flow<T>(source)","description":"kotlinx.coroutines.flow.catch","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html","searchKeys":["catch","fun <T> Flow<T>.catch(action: suspend FlowCollector<T>.(cause: Throwable) -> Unit): Flow<T>(source)","kotlinx.coroutines.flow.catch"]},{"name":"fun <T> Flow<T>.concatWith(other: Flow<T>): Flow<T>(source)","description":"kotlinx.coroutines.flow.concatWith","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/concat-with.html","searchKeys":["concatWith","fun <T> Flow<T>.concatWith(other: Flow<T>): Flow<T>(source)","kotlinx.coroutines.flow.concatWith"]},{"name":"fun <T> Flow<T>.concatWith(value: T): Flow<T>(source)","description":"kotlinx.coroutines.flow.concatWith","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/concat-with.html","searchKeys":["concatWith","fun <T> Flow<T>.concatWith(value: T): Flow<T>(source)","kotlinx.coroutines.flow.concatWith"]},{"name":"fun <T> Flow<T>.conflate(): Flow<T>(source)","description":"kotlinx.coroutines.flow.conflate","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/conflate.html","searchKeys":["conflate","fun <T> Flow<T>.conflate(): Flow<T>(source)","kotlinx.coroutines.flow.conflate"]},{"name":"fun <T> Flow<T>.debounce(timeout: (T) -> Duration): Flow<T>(source)","description":"kotlinx.coroutines.flow.debounce","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/debounce.html","searchKeys":["debounce","fun <T> Flow<T>.debounce(timeout: (T) -> Duration): Flow<T>(source)","kotlinx.coroutines.flow.debounce"]},{"name":"fun <T> Flow<T>.debounce(timeout: Duration): Flow<T>(source)","description":"kotlinx.coroutines.flow.debounce","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/debounce.html","searchKeys":["debounce","fun <T> Flow<T>.debounce(timeout: Duration): Flow<T>(source)","kotlinx.coroutines.flow.debounce"]},{"name":"fun <T> Flow<T>.debounce(timeoutMillis: (T) -> Long): Flow<T>(source)","description":"kotlinx.coroutines.flow.debounce","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/debounce.html","searchKeys":["debounce","fun <T> Flow<T>.debounce(timeoutMillis: (T) -> Long): Flow<T>(source)","kotlinx.coroutines.flow.debounce"]},{"name":"fun <T> Flow<T>.debounce(timeoutMillis: Long): Flow<T>(source)","description":"kotlinx.coroutines.flow.debounce","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/debounce.html","searchKeys":["debounce","fun <T> Flow<T>.debounce(timeoutMillis: Long): Flow<T>(source)","kotlinx.coroutines.flow.debounce"]},{"name":"fun <T> Flow<T>.delayEach(timeMillis: Long): Flow<T>(source)","description":"kotlinx.coroutines.flow.delayEach","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/delay-each.html","searchKeys":["delayEach","fun <T> Flow<T>.delayEach(timeMillis: Long): Flow<T>(source)","kotlinx.coroutines.flow.delayEach"]},{"name":"fun <T> Flow<T>.delayFlow(timeMillis: Long): Flow<T>(source)","description":"kotlinx.coroutines.flow.delayFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/delay-flow.html","searchKeys":["delayFlow","fun <T> Flow<T>.delayFlow(timeMillis: Long): Flow<T>(source)","kotlinx.coroutines.flow.delayFlow"]},{"name":"fun <T> Flow<T>.distinctUntilChanged(): Flow<T>(source)","description":"kotlinx.coroutines.flow.distinctUntilChanged","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/distinct-until-changed.html","searchKeys":["distinctUntilChanged","fun <T> Flow<T>.distinctUntilChanged(): Flow<T>(source)","kotlinx.coroutines.flow.distinctUntilChanged"]},{"name":"fun <T> Flow<T>.distinctUntilChanged(areEquivalent: (old: T, new: T) -> Boolean): Flow<T>(source)","description":"kotlinx.coroutines.flow.distinctUntilChanged","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/distinct-until-changed.html","searchKeys":["distinctUntilChanged","fun <T> Flow<T>.distinctUntilChanged(areEquivalent: (old: T, new: T) -> Boolean): Flow<T>(source)","kotlinx.coroutines.flow.distinctUntilChanged"]},{"name":"fun <T> Flow<T>.drop(count: Int): Flow<T>(source)","description":"kotlinx.coroutines.flow.drop","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/drop.html","searchKeys":["drop","fun <T> Flow<T>.drop(count: Int): Flow<T>(source)","kotlinx.coroutines.flow.drop"]},{"name":"fun <T> Flow<T>.dropWhile(predicate: suspend (T) -> Boolean): Flow<T>(source)","description":"kotlinx.coroutines.flow.dropWhile","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/drop-while.html","searchKeys":["dropWhile","fun <T> Flow<T>.dropWhile(predicate: suspend (T) -> Boolean): Flow<T>(source)","kotlinx.coroutines.flow.dropWhile"]},{"name":"fun <T> Flow<T>.flowOn(context: CoroutineContext): Flow<T>(source)","description":"kotlinx.coroutines.flow.flowOn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flow-on.html","searchKeys":["flowOn","fun <T> Flow<T>.flowOn(context: CoroutineContext): Flow<T>(source)","kotlinx.coroutines.flow.flowOn"]},{"name":"fun <T> Flow<T>.forEach(action: suspend (value: T) -> Unit)(source)","description":"kotlinx.coroutines.flow.forEach","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/for-each.html","searchKeys":["forEach","fun <T> Flow<T>.forEach(action: suspend (value: T) -> Unit)(source)","kotlinx.coroutines.flow.forEach"]},{"name":"fun <T> Flow<T>.launchIn(scope: CoroutineScope): Job(source)","description":"kotlinx.coroutines.flow.launchIn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/launch-in.html","searchKeys":["launchIn","fun <T> Flow<T>.launchIn(scope: CoroutineScope): Job(source)","kotlinx.coroutines.flow.launchIn"]},{"name":"fun <T> Flow<T>.observeOn(context: CoroutineContext): Flow<T>(source)","description":"kotlinx.coroutines.flow.observeOn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/observe-on.html","searchKeys":["observeOn","fun <T> Flow<T>.observeOn(context: CoroutineContext): Flow<T>(source)","kotlinx.coroutines.flow.observeOn"]},{"name":"fun <T> Flow<T>.onCompletion(action: suspend FlowCollector<T>.(cause: Throwable?) -> Unit): Flow<T>(source)","description":"kotlinx.coroutines.flow.onCompletion","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/on-completion.html","searchKeys":["onCompletion","fun <T> Flow<T>.onCompletion(action: suspend FlowCollector<T>.(cause: Throwable?) -> Unit): Flow<T>(source)","kotlinx.coroutines.flow.onCompletion"]},{"name":"fun <T> Flow<T>.onEach(action: suspend (T) -> Unit): Flow<T>(source)","description":"kotlinx.coroutines.flow.onEach","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/on-each.html","searchKeys":["onEach","fun <T> Flow<T>.onEach(action: suspend (T) -> Unit): Flow<T>(source)","kotlinx.coroutines.flow.onEach"]},{"name":"fun <T> Flow<T>.onEmpty(action: suspend FlowCollector<T>.() -> Unit): Flow<T>(source)","description":"kotlinx.coroutines.flow.onEmpty","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/on-empty.html","searchKeys":["onEmpty","fun <T> Flow<T>.onEmpty(action: suspend FlowCollector<T>.() -> Unit): Flow<T>(source)","kotlinx.coroutines.flow.onEmpty"]},{"name":"fun <T> Flow<T>.onErrorResume(fallback: Flow<T>): Flow<T>(source)","description":"kotlinx.coroutines.flow.onErrorResume","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/on-error-resume.html","searchKeys":["onErrorResume","fun <T> Flow<T>.onErrorResume(fallback: Flow<T>): Flow<T>(source)","kotlinx.coroutines.flow.onErrorResume"]},{"name":"fun <T> Flow<T>.onErrorResumeNext(fallback: Flow<T>): Flow<T>(source)","description":"kotlinx.coroutines.flow.onErrorResumeNext","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/on-error-resume-next.html","searchKeys":["onErrorResumeNext","fun <T> Flow<T>.onErrorResumeNext(fallback: Flow<T>): Flow<T>(source)","kotlinx.coroutines.flow.onErrorResumeNext"]},{"name":"fun <T> Flow<T>.onErrorReturn(fallback: T): Flow<T>(source)","description":"kotlinx.coroutines.flow.onErrorReturn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/on-error-return.html","searchKeys":["onErrorReturn","fun <T> Flow<T>.onErrorReturn(fallback: T): Flow<T>(source)","kotlinx.coroutines.flow.onErrorReturn"]},{"name":"fun <T> Flow<T>.onErrorReturn(fallback: T, predicate: (Throwable) -> Boolean = { true }): Flow<T>(source)","description":"kotlinx.coroutines.flow.onErrorReturn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/on-error-return.html","searchKeys":["onErrorReturn","fun <T> Flow<T>.onErrorReturn(fallback: T, predicate: (Throwable) -> Boolean = { true }): Flow<T>(source)","kotlinx.coroutines.flow.onErrorReturn"]},{"name":"fun <T> Flow<T>.onStart(action: suspend FlowCollector<T>.() -> Unit): Flow<T>(source)","description":"kotlinx.coroutines.flow.onStart","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/on-start.html","searchKeys":["onStart","fun <T> Flow<T>.onStart(action: suspend FlowCollector<T>.() -> Unit): Flow<T>(source)","kotlinx.coroutines.flow.onStart"]},{"name":"fun <T> Flow<T>.produceIn(scope: CoroutineScope): ReceiveChannel<T>(source)","description":"kotlinx.coroutines.flow.produceIn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/produce-in.html","searchKeys":["produceIn","fun <T> Flow<T>.produceIn(scope: CoroutineScope): ReceiveChannel<T>(source)","kotlinx.coroutines.flow.produceIn"]},{"name":"fun <T> Flow<T>.publish(): Flow<T>(source)","description":"kotlinx.coroutines.flow.publish","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/publish.html","searchKeys":["publish","fun <T> Flow<T>.publish(): Flow<T>(source)","kotlinx.coroutines.flow.publish"]},{"name":"fun <T> Flow<T>.publish(bufferSize: Int): Flow<T>(source)","description":"kotlinx.coroutines.flow.publish","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/publish.html","searchKeys":["publish","fun <T> Flow<T>.publish(bufferSize: Int): Flow<T>(source)","kotlinx.coroutines.flow.publish"]},{"name":"fun <T> Flow<T>.publishOn(context: CoroutineContext): Flow<T>(source)","description":"kotlinx.coroutines.flow.publishOn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/publish-on.html","searchKeys":["publishOn","fun <T> Flow<T>.publishOn(context: CoroutineContext): Flow<T>(source)","kotlinx.coroutines.flow.publishOn"]},{"name":"fun <T> Flow<T>.replay(): Flow<T>(source)","description":"kotlinx.coroutines.flow.replay","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/replay.html","searchKeys":["replay","fun <T> Flow<T>.replay(): Flow<T>(source)","kotlinx.coroutines.flow.replay"]},{"name":"fun <T> Flow<T>.replay(bufferSize: Int): Flow<T>(source)","description":"kotlinx.coroutines.flow.replay","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/replay.html","searchKeys":["replay","fun <T> Flow<T>.replay(bufferSize: Int): Flow<T>(source)","kotlinx.coroutines.flow.replay"]},{"name":"fun <T> Flow<T>.retry(retries: Long = Long.MAX_VALUE, predicate: suspend (cause: Throwable) -> Boolean = { true }): Flow<T>(source)","description":"kotlinx.coroutines.flow.retry","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/retry.html","searchKeys":["retry","fun <T> Flow<T>.retry(retries: Long = Long.MAX_VALUE, predicate: suspend (cause: Throwable) -> Boolean = { true }): Flow<T>(source)","kotlinx.coroutines.flow.retry"]},{"name":"fun <T> Flow<T>.retryWhen(predicate: suspend FlowCollector<T>.(cause: Throwable, attempt: Long) -> Boolean): Flow<T>(source)","description":"kotlinx.coroutines.flow.retryWhen","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/retry-when.html","searchKeys":["retryWhen","fun <T> Flow<T>.retryWhen(predicate: suspend FlowCollector<T>.(cause: Throwable, attempt: Long) -> Boolean): Flow<T>(source)","kotlinx.coroutines.flow.retryWhen"]},{"name":"fun <T> Flow<T>.runningReduce(operation: suspend (accumulator: T, value: T) -> T): Flow<T>(source)","description":"kotlinx.coroutines.flow.runningReduce","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/running-reduce.html","searchKeys":["runningReduce","fun <T> Flow<T>.runningReduce(operation: suspend (accumulator: T, value: T) -> T): Flow<T>(source)","kotlinx.coroutines.flow.runningReduce"]},{"name":"fun <T> Flow<T>.sample(period: Duration): Flow<T>(source)","description":"kotlinx.coroutines.flow.sample","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/sample.html","searchKeys":["sample","fun <T> Flow<T>.sample(period: Duration): Flow<T>(source)","kotlinx.coroutines.flow.sample"]},{"name":"fun <T> Flow<T>.sample(periodMillis: Long): Flow<T>(source)","description":"kotlinx.coroutines.flow.sample","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/sample.html","searchKeys":["sample","fun <T> Flow<T>.sample(periodMillis: Long): Flow<T>(source)","kotlinx.coroutines.flow.sample"]},{"name":"fun <T> Flow<T>.scanReduce(operation: suspend (accumulator: T, value: T) -> T): Flow<T>(source)","description":"kotlinx.coroutines.flow.scanReduce","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/scan-reduce.html","searchKeys":["scanReduce","fun <T> Flow<T>.scanReduce(operation: suspend (accumulator: T, value: T) -> T): Flow<T>(source)","kotlinx.coroutines.flow.scanReduce"]},{"name":"fun <T> Flow<T>.shareIn(scope: CoroutineScope, started: SharingStarted, replay: Int = 0): SharedFlow<T>(source)","description":"kotlinx.coroutines.flow.shareIn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/share-in.html","searchKeys":["shareIn","fun <T> Flow<T>.shareIn(scope: CoroutineScope, started: SharingStarted, replay: Int = 0): SharedFlow<T>(source)","kotlinx.coroutines.flow.shareIn"]},{"name":"fun <T> Flow<T>.skip(count: Int): Flow<T>(source)","description":"kotlinx.coroutines.flow.skip","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/skip.html","searchKeys":["skip","fun <T> Flow<T>.skip(count: Int): Flow<T>(source)","kotlinx.coroutines.flow.skip"]},{"name":"fun <T> Flow<T>.startWith(other: Flow<T>): Flow<T>(source)","description":"kotlinx.coroutines.flow.startWith","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/start-with.html","searchKeys":["startWith","fun <T> Flow<T>.startWith(other: Flow<T>): Flow<T>(source)","kotlinx.coroutines.flow.startWith"]},{"name":"fun <T> Flow<T>.startWith(value: T): Flow<T>(source)","description":"kotlinx.coroutines.flow.startWith","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/start-with.html","searchKeys":["startWith","fun <T> Flow<T>.startWith(value: T): Flow<T>(source)","kotlinx.coroutines.flow.startWith"]},{"name":"fun <T> Flow<T>.stateIn(scope: CoroutineScope, started: SharingStarted, initialValue: T): StateFlow<T>(source)","description":"kotlinx.coroutines.flow.stateIn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/state-in.html","searchKeys":["stateIn","fun <T> Flow<T>.stateIn(scope: CoroutineScope, started: SharingStarted, initialValue: T): StateFlow<T>(source)","kotlinx.coroutines.flow.stateIn"]},{"name":"fun <T> Flow<T>.subscribe()(source)","description":"kotlinx.coroutines.flow.subscribe","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/subscribe.html","searchKeys":["subscribe","fun <T> Flow<T>.subscribe()(source)","kotlinx.coroutines.flow.subscribe"]},{"name":"fun <T> Flow<T>.subscribe(onEach: suspend (T) -> Unit)(source)","description":"kotlinx.coroutines.flow.subscribe","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/subscribe.html","searchKeys":["subscribe","fun <T> Flow<T>.subscribe(onEach: suspend (T) -> Unit)(source)","kotlinx.coroutines.flow.subscribe"]},{"name":"fun <T> Flow<T>.subscribe(onEach: suspend (T) -> Unit, onError: suspend (Throwable) -> Unit)(source)","description":"kotlinx.coroutines.flow.subscribe","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/subscribe.html","searchKeys":["subscribe","fun <T> Flow<T>.subscribe(onEach: suspend (T) -> Unit, onError: suspend (Throwable) -> Unit)(source)","kotlinx.coroutines.flow.subscribe"]},{"name":"fun <T> Flow<T>.subscribeOn(context: CoroutineContext): Flow<T>(source)","description":"kotlinx.coroutines.flow.subscribeOn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/subscribe-on.html","searchKeys":["subscribeOn","fun <T> Flow<T>.subscribeOn(context: CoroutineContext): Flow<T>(source)","kotlinx.coroutines.flow.subscribeOn"]},{"name":"fun <T> Flow<T>.take(count: Int): Flow<T>(source)","description":"kotlinx.coroutines.flow.take","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/take.html","searchKeys":["take","fun <T> Flow<T>.take(count: Int): Flow<T>(source)","kotlinx.coroutines.flow.take"]},{"name":"fun <T> Flow<T>.takeWhile(predicate: suspend (T) -> Boolean): Flow<T>(source)","description":"kotlinx.coroutines.flow.takeWhile","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/take-while.html","searchKeys":["takeWhile","fun <T> Flow<T>.takeWhile(predicate: suspend (T) -> Boolean): Flow<T>(source)","kotlinx.coroutines.flow.takeWhile"]},{"name":"fun <T> Flow<T>.withIndex(): Flow<IndexedValue<T>>(source)","description":"kotlinx.coroutines.flow.withIndex","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/with-index.html","searchKeys":["withIndex","fun <T> Flow<T>.withIndex(): Flow<IndexedValue<T>>(source)","kotlinx.coroutines.flow.withIndex"]},{"name":"fun <T> Iterable<Flow<T>>.merge(): Flow<T>(source)","description":"kotlinx.coroutines.flow.merge","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/merge.html","searchKeys":["merge","fun <T> Iterable<Flow<T>>.merge(): Flow<T>(source)","kotlinx.coroutines.flow.merge"]},{"name":"fun <T> Iterable<T>.asFlow(): Flow<T>(source)","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun <T> Iterable<T>.asFlow(): Flow<T>(source)","kotlinx.coroutines.flow.asFlow"]},{"name":"fun <T> Iterator<T>.asFlow(): Flow<T>(source)","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun <T> Iterator<T>.asFlow(): Flow<T>(source)","kotlinx.coroutines.flow.asFlow"]},{"name":"fun <T> MutableSharedFlow(replay: Int = 0, extraBufferCapacity: Int = 0, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND): MutableSharedFlow<T>(source)","description":"kotlinx.coroutines.flow.MutableSharedFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-shared-flow.html","searchKeys":["MutableSharedFlow","fun <T> MutableSharedFlow(replay: Int = 0, extraBufferCapacity: Int = 0, onBufferOverflow: BufferOverflow = BufferOverflow.SUSPEND): MutableSharedFlow<T>(source)","kotlinx.coroutines.flow.MutableSharedFlow"]},{"name":"fun <T> MutableSharedFlow<T>.asSharedFlow(): SharedFlow<T>(source)","description":"kotlinx.coroutines.flow.asSharedFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-shared-flow.html","searchKeys":["asSharedFlow","fun <T> MutableSharedFlow<T>.asSharedFlow(): SharedFlow<T>(source)","kotlinx.coroutines.flow.asSharedFlow"]},{"name":"fun <T> MutableStateFlow(value: T): MutableStateFlow<T>(source)","description":"kotlinx.coroutines.flow.MutableStateFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-state-flow.html","searchKeys":["MutableStateFlow","fun <T> MutableStateFlow(value: T): MutableStateFlow<T>(source)","kotlinx.coroutines.flow.MutableStateFlow"]},{"name":"fun <T> MutableStateFlow<T>.asStateFlow(): StateFlow<T>(source)","description":"kotlinx.coroutines.flow.asStateFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-state-flow.html","searchKeys":["asStateFlow","fun <T> MutableStateFlow<T>.asStateFlow(): StateFlow<T>(source)","kotlinx.coroutines.flow.asStateFlow"]},{"name":"fun <T> Promise<T>.asDeferred(): Deferred<T>(source)","description":"kotlinx.coroutines.asDeferred","location":"kotlinx-coroutines-core/kotlinx.coroutines/as-deferred.html","searchKeys":["asDeferred","fun <T> Promise<T>.asDeferred(): Deferred<T>(source)","kotlinx.coroutines.asDeferred"]},{"name":"fun <T> ReceiveChannel<T>.consumeAsFlow(): Flow<T>(source)","description":"kotlinx.coroutines.flow.consumeAsFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/consume-as-flow.html","searchKeys":["consumeAsFlow","fun <T> ReceiveChannel<T>.consumeAsFlow(): Flow<T>(source)","kotlinx.coroutines.flow.consumeAsFlow"]},{"name":"fun <T> ReceiveChannel<T>.receiveAsFlow(): Flow<T>(source)","description":"kotlinx.coroutines.flow.receiveAsFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/receive-as-flow.html","searchKeys":["receiveAsFlow","fun <T> ReceiveChannel<T>.receiveAsFlow(): Flow<T>(source)","kotlinx.coroutines.flow.receiveAsFlow"]},{"name":"fun <T> SendingCollector(channel: SendChannel<T>)(source)","description":"kotlinx.coroutines.flow.internal.SendingCollector.SendingCollector","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow.internal/-sending-collector/-sending-collector.html","searchKeys":["SendingCollector","fun <T> SendingCollector(channel: SendChannel<T>)(source)","kotlinx.coroutines.flow.internal.SendingCollector.SendingCollector"]},{"name":"fun <T> Sequence<T>.asFlow(): Flow<T>(source)","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun <T> Sequence<T>.asFlow(): Flow<T>(source)","kotlinx.coroutines.flow.asFlow"]},{"name":"fun <T> SharedFlow<T>.cancellable(): Flow<T>(source)","description":"kotlinx.coroutines.flow.cancellable","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/cancellable.html","searchKeys":["cancellable","fun <T> SharedFlow<T>.cancellable(): Flow<T>(source)","kotlinx.coroutines.flow.cancellable"]},{"name":"fun <T> SharedFlow<T>.flowOn(context: CoroutineContext): Flow<T>(source)","description":"kotlinx.coroutines.flow.flowOn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flow-on.html","searchKeys":["flowOn","fun <T> SharedFlow<T>.flowOn(context: CoroutineContext): Flow<T>(source)","kotlinx.coroutines.flow.flowOn"]},{"name":"fun <T> SharedFlow<T>.onSubscription(action: suspend FlowCollector<T>.() -> Unit): SharedFlow<T>(source)","description":"kotlinx.coroutines.flow.onSubscription","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/on-subscription.html","searchKeys":["onSubscription","fun <T> SharedFlow<T>.onSubscription(action: suspend FlowCollector<T>.() -> Unit): SharedFlow<T>(source)","kotlinx.coroutines.flow.onSubscription"]},{"name":"fun <T> StateFlow<T>.conflate(): Flow<T>(source)","description":"kotlinx.coroutines.flow.conflate","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/conflate.html","searchKeys":["conflate","fun <T> StateFlow<T>.conflate(): Flow<T>(source)","kotlinx.coroutines.flow.conflate"]},{"name":"fun <T> StateFlow<T>.distinctUntilChanged(): Flow<T>(source)","description":"kotlinx.coroutines.flow.distinctUntilChanged","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/distinct-until-changed.html","searchKeys":["distinctUntilChanged","fun <T> StateFlow<T>.distinctUntilChanged(): Flow<T>(source)","kotlinx.coroutines.flow.distinctUntilChanged"]},{"name":"fun <T> ThreadLocal<T>.asContextElement(value: T = get()): ThreadContextElement<T>(source)","description":"kotlinx.coroutines.asContextElement","location":"kotlinx-coroutines-core/kotlinx.coroutines/as-context-element.html","searchKeys":["asContextElement","fun <T> ThreadLocal<T>.asContextElement(value: T = get()): ThreadContextElement<T>(source)","kotlinx.coroutines.asContextElement"]},{"name":"fun <T> callbackFlow(block: suspend ProducerScope<T>.() -> Unit): Flow<T>(source)","description":"kotlinx.coroutines.flow.callbackFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/callback-flow.html","searchKeys":["callbackFlow","fun <T> callbackFlow(block: suspend ProducerScope<T>.() -> Unit): Flow<T>(source)","kotlinx.coroutines.flow.callbackFlow"]},{"name":"fun <T> channelFlow(block: suspend ProducerScope<T>.() -> Unit): Flow<T>(source)","description":"kotlinx.coroutines.flow.channelFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/channel-flow.html","searchKeys":["channelFlow","fun <T> channelFlow(block: suspend ProducerScope<T>.() -> Unit): Flow<T>(source)","kotlinx.coroutines.flow.channelFlow"]},{"name":"fun <T> emptyFlow(): Flow<T>(source)","description":"kotlinx.coroutines.flow.emptyFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/empty-flow.html","searchKeys":["emptyFlow","fun <T> emptyFlow(): Flow<T>(source)","kotlinx.coroutines.flow.emptyFlow"]},{"name":"fun <T> flow(block: suspend FlowCollector<T>.() -> Unit): Flow<T>(source)","description":"kotlinx.coroutines.flow.flow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flow.html","searchKeys":["flow","fun <T> flow(block: suspend FlowCollector<T>.() -> Unit): Flow<T>(source)","kotlinx.coroutines.flow.flow"]},{"name":"fun <T> flowOf(value: T): Flow<T>(source)","description":"kotlinx.coroutines.flow.flowOf","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flow-of.html","searchKeys":["flowOf","fun <T> flowOf(value: T): Flow<T>(source)","kotlinx.coroutines.flow.flowOf"]},{"name":"fun <T> flowOf(vararg elements: T): Flow<T>(source)","description":"kotlinx.coroutines.flow.flowOf","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flow-of.html","searchKeys":["flowOf","fun <T> flowOf(vararg elements: T): Flow<T>(source)","kotlinx.coroutines.flow.flowOf"]},{"name":"fun <T> merge(vararg flows: Flow<T>): Flow<T>(source)","description":"kotlinx.coroutines.flow.merge","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/merge.html","searchKeys":["merge","fun <T> merge(vararg flows: Flow<T>): Flow<T>(source)","kotlinx.coroutines.flow.merge"]},{"name":"fun <T> suspend () -> T.asFlow(): Flow<T>(source)","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun <T> suspend () -> T.asFlow(): Flow<T>(source)","kotlinx.coroutines.flow.asFlow"]},{"name":"fun <T> suspend () -> T.startCoroutineCancellable(completion: Continuation<T>)(source)","description":"kotlinx.coroutines.intrinsics.startCoroutineCancellable","location":"kotlinx-coroutines-core/kotlinx.coroutines.intrinsics/start-coroutine-cancellable.html","searchKeys":["startCoroutineCancellable","fun <T> suspend () -> T.startCoroutineCancellable(completion: Continuation<T>)(source)","kotlinx.coroutines.intrinsics.startCoroutineCancellable"]},{"name":"fun AbstractAtomicDesc()","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.AbstractAtomicDesc","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-abstract-atomic-desc/-abstract-atomic-desc.html","searchKeys":["AbstractAtomicDesc","fun AbstractAtomicDesc()","kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.AbstractAtomicDesc"]},{"name":"fun AbstractAtomicDesc()(source)","description":"kotlinx.coroutines.internal.AbstractAtomicDesc.AbstractAtomicDesc","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-abstract-atomic-desc/-abstract-atomic-desc.html","searchKeys":["AbstractAtomicDesc","fun AbstractAtomicDesc()(source)","kotlinx.coroutines.internal.AbstractAtomicDesc.AbstractAtomicDesc"]},{"name":"fun AbstractCoroutine(parentContext: CoroutineContext, initParentJob: Boolean, active: Boolean)(source)","description":"kotlinx.coroutines.AbstractCoroutine.AbstractCoroutine","location":"kotlinx-coroutines-core/kotlinx.coroutines/-abstract-coroutine/-abstract-coroutine.html","searchKeys":["AbstractCoroutine","fun AbstractCoroutine(parentContext: CoroutineContext, initParentJob: Boolean, active: Boolean)(source)","kotlinx.coroutines.AbstractCoroutine.AbstractCoroutine"]},{"name":"fun AbstractFlow()(source)","description":"kotlinx.coroutines.flow.AbstractFlow.AbstractFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-abstract-flow/-abstract-flow.html","searchKeys":["AbstractFlow","fun AbstractFlow()(source)","kotlinx.coroutines.flow.AbstractFlow.AbstractFlow"]},{"name":"fun AtomicDesc()(source)","description":"kotlinx.coroutines.internal.AtomicDesc.AtomicDesc","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-atomic-desc/-atomic-desc.html","searchKeys":["AtomicDesc","fun AtomicDesc()(source)","kotlinx.coroutines.internal.AtomicDesc.AtomicDesc"]},{"name":"fun AtomicOp()(source)","description":"kotlinx.coroutines.internal.AtomicOp.AtomicOp","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-atomic-op/-atomic-op.html","searchKeys":["AtomicOp","fun AtomicOp()(source)","kotlinx.coroutines.internal.AtomicOp.AtomicOp"]},{"name":"fun CancellableContinuation<*>.cancelFutureOnCancellation(future: Future<*>)(source)","description":"kotlinx.coroutines.cancelFutureOnCancellation","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel-future-on-cancellation.html","searchKeys":["cancelFutureOnCancellation","fun CancellableContinuation<*>.cancelFutureOnCancellation(future: Future<*>)(source)","kotlinx.coroutines.cancelFutureOnCancellation"]},{"name":"fun CancellableContinuation<*>.disposeOnCancellation(handle: DisposableHandle)(source)","description":"kotlinx.coroutines.disposeOnCancellation","location":"kotlinx-coroutines-core/kotlinx.coroutines/dispose-on-cancellation.html","searchKeys":["disposeOnCancellation","fun CancellableContinuation<*>.disposeOnCancellation(handle: DisposableHandle)(source)","kotlinx.coroutines.disposeOnCancellation"]},{"name":"fun ChannelFlow(context: CoroutineContext, capacity: Int, onBufferOverflow: BufferOverflow)(source)","description":"kotlinx.coroutines.flow.internal.ChannelFlow.ChannelFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow.internal/-channel-flow/-channel-flow.html","searchKeys":["ChannelFlow","fun ChannelFlow(context: CoroutineContext, capacity: Int, onBufferOverflow: BufferOverflow)(source)","kotlinx.coroutines.flow.internal.ChannelFlow.ChannelFlow"]},{"name":"fun ClosedReceiveChannelException(message: String?)(source)","description":"kotlinx.coroutines.channels.ClosedReceiveChannelException.ClosedReceiveChannelException","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-closed-receive-channel-exception/-closed-receive-channel-exception.html","searchKeys":["ClosedReceiveChannelException","fun ClosedReceiveChannelException(message: String?)(source)","kotlinx.coroutines.channels.ClosedReceiveChannelException.ClosedReceiveChannelException"]},{"name":"fun ClosedSendChannelException(message: String?)(source)","description":"kotlinx.coroutines.channels.ClosedSendChannelException.ClosedSendChannelException","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-closed-send-channel-exception/-closed-send-channel-exception.html","searchKeys":["ClosedSendChannelException","fun ClosedSendChannelException(message: String?)(source)","kotlinx.coroutines.channels.ClosedSendChannelException.ClosedSendChannelException"]},{"name":"fun CompletionHandlerException(message: String, cause: Throwable)(source)","description":"kotlinx.coroutines.CompletionHandlerException.CompletionHandlerException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completion-handler-exception/-completion-handler-exception.html","searchKeys":["CompletionHandlerException","fun CompletionHandlerException(message: String, cause: Throwable)(source)","kotlinx.coroutines.CompletionHandlerException.CompletionHandlerException"]},{"name":"fun ConflatedBroadcastChannel()(source)","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel.ConflatedBroadcastChannel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/-conflated-broadcast-channel.html","searchKeys":["ConflatedBroadcastChannel","fun ConflatedBroadcastChannel()(source)","kotlinx.coroutines.channels.ConflatedBroadcastChannel.ConflatedBroadcastChannel"]},{"name":"fun CoroutineContext.cancel(cause: CancellationException? = null)(source)","description":"kotlinx.coroutines.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel.html","searchKeys":["cancel","fun CoroutineContext.cancel(cause: CancellationException? = null)(source)","kotlinx.coroutines.cancel"]},{"name":"fun CoroutineContext.cancelChildren(cause: CancellationException? = null)(source)","description":"kotlinx.coroutines.cancelChildren","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel-children.html","searchKeys":["cancelChildren","fun CoroutineContext.cancelChildren(cause: CancellationException? = null)(source)","kotlinx.coroutines.cancelChildren"]},{"name":"fun CoroutineContext.ensureActive()(source)","description":"kotlinx.coroutines.ensureActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html","searchKeys":["ensureActive","fun CoroutineContext.ensureActive()(source)","kotlinx.coroutines.ensureActive"]},{"name":"fun CoroutineDispatcher()(source)","description":"kotlinx.coroutines.CoroutineDispatcher.CoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/-coroutine-dispatcher.html","searchKeys":["CoroutineDispatcher","fun CoroutineDispatcher()(source)","kotlinx.coroutines.CoroutineDispatcher.CoroutineDispatcher"]},{"name":"fun CoroutineDispatcher.asExecutor(): Executor(source)","description":"kotlinx.coroutines.asExecutor","location":"kotlinx-coroutines-core/kotlinx.coroutines/as-executor.html","searchKeys":["asExecutor","fun CoroutineDispatcher.asExecutor(): Executor(source)","kotlinx.coroutines.asExecutor"]},{"name":"fun CoroutineName(name: String)(source)","description":"kotlinx.coroutines.CoroutineName.CoroutineName","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/-coroutine-name.html","searchKeys":["CoroutineName","fun CoroutineName(name: String)(source)","kotlinx.coroutines.CoroutineName.CoroutineName"]},{"name":"fun CoroutineScope(context: CoroutineContext): CoroutineScope(source)","description":"kotlinx.coroutines.CoroutineScope","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope.html","searchKeys":["CoroutineScope","fun CoroutineScope(context: CoroutineContext): CoroutineScope(source)","kotlinx.coroutines.CoroutineScope"]},{"name":"fun CoroutineScope.cancel(cause: CancellationException? = null)(source)","description":"kotlinx.coroutines.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel.html","searchKeys":["cancel","fun CoroutineScope.cancel(cause: CancellationException? = null)(source)","kotlinx.coroutines.cancel"]},{"name":"fun CoroutineScope.cancel(message: String, cause: Throwable? = null)(source)","description":"kotlinx.coroutines.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel.html","searchKeys":["cancel","fun CoroutineScope.cancel(message: String, cause: Throwable? = null)(source)","kotlinx.coroutines.cancel"]},{"name":"fun CoroutineScope.ensureActive()(source)","description":"kotlinx.coroutines.ensureActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html","searchKeys":["ensureActive","fun CoroutineScope.ensureActive()(source)","kotlinx.coroutines.ensureActive"]},{"name":"fun CoroutineScope.launch(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> Unit): Job(source)","description":"kotlinx.coroutines.launch","location":"kotlinx-coroutines-core/kotlinx.coroutines/launch.html","searchKeys":["launch","fun CoroutineScope.launch(context: CoroutineContext = EmptyCoroutineContext, start: CoroutineStart = CoroutineStart.DEFAULT, block: suspend CoroutineScope.() -> Unit): Job(source)","kotlinx.coroutines.launch"]},{"name":"fun DelicateCoroutinesApi()(source)","description":"kotlinx.coroutines.DelicateCoroutinesApi.DelicateCoroutinesApi","location":"kotlinx-coroutines-core/kotlinx.coroutines/-delicate-coroutines-api/-delicate-coroutines-api.html","searchKeys":["DelicateCoroutinesApi","fun DelicateCoroutinesApi()(source)","kotlinx.coroutines.DelicateCoroutinesApi.DelicateCoroutinesApi"]},{"name":"fun Executor.asCoroutineDispatcher(): CoroutineDispatcher(source)","description":"kotlinx.coroutines.asCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/as-coroutine-dispatcher.html","searchKeys":["asCoroutineDispatcher","fun Executor.asCoroutineDispatcher(): CoroutineDispatcher(source)","kotlinx.coroutines.asCoroutineDispatcher"]},{"name":"fun ExecutorCoroutineDispatcher()(source)","description":"kotlinx.coroutines.ExecutorCoroutineDispatcher.ExecutorCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/-executor-coroutine-dispatcher/-executor-coroutine-dispatcher.html","searchKeys":["ExecutorCoroutineDispatcher","fun ExecutorCoroutineDispatcher()(source)","kotlinx.coroutines.ExecutorCoroutineDispatcher.ExecutorCoroutineDispatcher"]},{"name":"fun ExecutorService.asCoroutineDispatcher(): ExecutorCoroutineDispatcher(source)","description":"kotlinx.coroutines.asCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/as-coroutine-dispatcher.html","searchKeys":["asCoroutineDispatcher","fun ExecutorService.asCoroutineDispatcher(): ExecutorCoroutineDispatcher(source)","kotlinx.coroutines.asCoroutineDispatcher"]},{"name":"fun ExperimentalCoroutinesApi()(source)","description":"kotlinx.coroutines.ExperimentalCoroutinesApi.ExperimentalCoroutinesApi","location":"kotlinx-coroutines-core/kotlinx.coroutines/-experimental-coroutines-api/-experimental-coroutines-api.html","searchKeys":["ExperimentalCoroutinesApi","fun ExperimentalCoroutinesApi()(source)","kotlinx.coroutines.ExperimentalCoroutinesApi.ExperimentalCoroutinesApi"]},{"name":"fun FlowCollector<*>.cancel(cause: CancellationException? = null)(source)","description":"kotlinx.coroutines.flow.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/cancel.html","searchKeys":["cancel","fun FlowCollector<*>.cancel(cause: CancellationException? = null)(source)","kotlinx.coroutines.flow.cancel"]},{"name":"fun FlowPreview()(source)","description":"kotlinx.coroutines.FlowPreview.FlowPreview","location":"kotlinx-coroutines-core/kotlinx.coroutines/-flow-preview/-flow-preview.html","searchKeys":["FlowPreview","fun FlowPreview()(source)","kotlinx.coroutines.FlowPreview.FlowPreview"]},{"name":"fun IntArray.asFlow(): Flow<Int>(source)","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun IntArray.asFlow(): Flow<Int>(source)","kotlinx.coroutines.flow.asFlow"]},{"name":"fun IntRange.asFlow(): Flow<Int>(source)","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun IntRange.asFlow(): Flow<Int>(source)","kotlinx.coroutines.flow.asFlow"]},{"name":"fun InternalCoroutinesApi()(source)","description":"kotlinx.coroutines.InternalCoroutinesApi.InternalCoroutinesApi","location":"kotlinx-coroutines-core/kotlinx.coroutines/-internal-coroutines-api/-internal-coroutines-api.html","searchKeys":["InternalCoroutinesApi","fun InternalCoroutinesApi()(source)","kotlinx.coroutines.InternalCoroutinesApi.InternalCoroutinesApi"]},{"name":"fun Job(parent: Job? = null): CompletableJob(source)","description":"kotlinx.coroutines.Job","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job.html","searchKeys":["Job","fun Job(parent: Job? = null): CompletableJob(source)","kotlinx.coroutines.Job"]},{"name":"fun Job.cancel(message: String, cause: Throwable? = null)(source)","description":"kotlinx.coroutines.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel.html","searchKeys":["cancel","fun Job.cancel(message: String, cause: Throwable? = null)(source)","kotlinx.coroutines.cancel"]},{"name":"fun Job.cancelChildren(cause: CancellationException? = null)(source)","description":"kotlinx.coroutines.cancelChildren","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel-children.html","searchKeys":["cancelChildren","fun Job.cancelChildren(cause: CancellationException? = null)(source)","kotlinx.coroutines.cancelChildren"]},{"name":"fun Job.cancelFutureOnCompletion(future: Future<*>): DisposableHandle(source)","description":"kotlinx.coroutines.cancelFutureOnCompletion","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel-future-on-completion.html","searchKeys":["cancelFutureOnCompletion","fun Job.cancelFutureOnCompletion(future: Future<*>): DisposableHandle(source)","kotlinx.coroutines.cancelFutureOnCompletion"]},{"name":"fun Job.ensureActive()(source)","description":"kotlinx.coroutines.ensureActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/ensure-active.html","searchKeys":["ensureActive","fun Job.ensureActive()(source)","kotlinx.coroutines.ensureActive"]},{"name":"fun JobSupport(active: Boolean)(source)","description":"kotlinx.coroutines.JobSupport.JobSupport","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/-job-support.html","searchKeys":["JobSupport","fun JobSupport(active: Boolean)(source)","kotlinx.coroutines.JobSupport.JobSupport"]},{"name":"fun LinkedListHead()(source)","description":"kotlinx.coroutines.internal.LinkedListHead.LinkedListHead","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-head/-linked-list-head.html","searchKeys":["LinkedListHead","fun LinkedListHead()(source)","kotlinx.coroutines.internal.LinkedListHead.LinkedListHead"]},{"name":"fun LinkedListNode()(source)","description":"kotlinx.coroutines.internal.LinkedListNode.LinkedListNode","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-node/-linked-list-node.html","searchKeys":["LinkedListNode","fun LinkedListNode()(source)","kotlinx.coroutines.internal.LinkedListNode.LinkedListNode"]},{"name":"fun LockFreeLinkedListHead()","description":"kotlinx.coroutines.internal.LockFreeLinkedListHead.LockFreeLinkedListHead","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-head/-lock-free-linked-list-head.html","searchKeys":["LockFreeLinkedListHead","fun LockFreeLinkedListHead()","kotlinx.coroutines.internal.LockFreeLinkedListHead.LockFreeLinkedListHead"]},{"name":"fun LockFreeLinkedListNode()","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.LockFreeLinkedListNode","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-lock-free-linked-list-node.html","searchKeys":["LockFreeLinkedListNode","fun LockFreeLinkedListNode()","kotlinx.coroutines.internal.LockFreeLinkedListNode.LockFreeLinkedListNode"]},{"name":"fun LongArray.asFlow(): Flow<Long>(source)","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun LongArray.asFlow(): Flow<Long>(source)","kotlinx.coroutines.flow.asFlow"]},{"name":"fun LongRange.asFlow(): Flow<Long>(source)","description":"kotlinx.coroutines.flow.asFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/as-flow.html","searchKeys":["asFlow","fun LongRange.asFlow(): Flow<Long>(source)","kotlinx.coroutines.flow.asFlow"]},{"name":"fun MainCoroutineDispatcher()(source)","description":"kotlinx.coroutines.MainCoroutineDispatcher.MainCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/-main-coroutine-dispatcher/-main-coroutine-dispatcher.html","searchKeys":["MainCoroutineDispatcher","fun MainCoroutineDispatcher()(source)","kotlinx.coroutines.MainCoroutineDispatcher.MainCoroutineDispatcher"]},{"name":"fun MainCoroutineDispatcher.isMissing(): Boolean(source)","description":"kotlinx.coroutines.internal.isMissing","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/is-missing.html","searchKeys":["isMissing","fun MainCoroutineDispatcher.isMissing(): Boolean(source)","kotlinx.coroutines.internal.isMissing"]},{"name":"fun MainDispatcherFactory.tryCreateDispatcher(factories: List<MainDispatcherFactory>): MainCoroutineDispatcher(source)","description":"kotlinx.coroutines.internal.tryCreateDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/try-create-dispatcher.html","searchKeys":["tryCreateDispatcher","fun MainDispatcherFactory.tryCreateDispatcher(factories: List<MainDispatcherFactory>): MainCoroutineDispatcher(source)","kotlinx.coroutines.internal.tryCreateDispatcher"]},{"name":"fun MainScope(): CoroutineScope(source)","description":"kotlinx.coroutines.MainScope","location":"kotlinx-coroutines-core/kotlinx.coroutines/-main-scope.html","searchKeys":["MainScope","fun MainScope(): CoroutineScope(source)","kotlinx.coroutines.MainScope"]},{"name":"fun Mutex(locked: Boolean = false): Mutex(source)","description":"kotlinx.coroutines.sync.Mutex","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex.html","searchKeys":["Mutex","fun Mutex(locked: Boolean = false): Mutex(source)","kotlinx.coroutines.sync.Mutex"]},{"name":"fun ObsoleteCoroutinesApi()(source)","description":"kotlinx.coroutines.ObsoleteCoroutinesApi.ObsoleteCoroutinesApi","location":"kotlinx-coroutines-core/kotlinx.coroutines/-obsolete-coroutines-api/-obsolete-coroutines-api.html","searchKeys":["ObsoleteCoroutinesApi","fun ObsoleteCoroutinesApi()(source)","kotlinx.coroutines.ObsoleteCoroutinesApi.ObsoleteCoroutinesApi"]},{"name":"fun OpDescriptor()(source)","description":"kotlinx.coroutines.internal.OpDescriptor.OpDescriptor","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-op-descriptor/-op-descriptor.html","searchKeys":["OpDescriptor","fun OpDescriptor()(source)","kotlinx.coroutines.internal.OpDescriptor.OpDescriptor"]},{"name":"fun PrepareOp(affected: LockFreeLinkedListNode, desc: AbstractAtomicDesc, atomicOp: AtomicOp<*>)(source)","description":"kotlinx.coroutines.internal.PrepareOp.PrepareOp","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-prepare-op/-prepare-op.html","searchKeys":["PrepareOp","fun PrepareOp(affected: LockFreeLinkedListNode, desc: AbstractAtomicDesc, atomicOp: AtomicOp<*>)(source)","kotlinx.coroutines.internal.PrepareOp.PrepareOp"]},{"name":"fun PrepareOp(affected: Node, next: Node, desc: LockFreeLinkedListNode.AbstractAtomicDesc)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.PrepareOp","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-prepare-op/-prepare-op.html","searchKeys":["PrepareOp","fun PrepareOp(affected: Node, next: Node, desc: LockFreeLinkedListNode.AbstractAtomicDesc)","kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.PrepareOp"]},{"name":"fun RemoveFirstDesc(queue: Node)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.RemoveFirstDesc","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-remove-first-desc/-remove-first-desc.html","searchKeys":["RemoveFirstDesc","fun RemoveFirstDesc(queue: Node)","kotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.RemoveFirstDesc"]},{"name":"fun Semaphore(permits: Int, acquiredPermits: Int = 0): Semaphore(source)","description":"kotlinx.coroutines.sync.Semaphore","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-semaphore.html","searchKeys":["Semaphore","fun Semaphore(permits: Int, acquiredPermits: Int = 0): Semaphore(source)","kotlinx.coroutines.sync.Semaphore"]},{"name":"fun SharingStarted.Companion.WhileSubscribed(stopTimeout: Duration = Duration.ZERO, replayExpiration: Duration = Duration.INFINITE): SharingStarted(source)","description":"kotlinx.coroutines.flow.WhileSubscribed","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-while-subscribed.html","searchKeys":["WhileSubscribed","fun SharingStarted.Companion.WhileSubscribed(stopTimeout: Duration = Duration.ZERO, replayExpiration: Duration = Duration.INFINITE): SharingStarted(source)","kotlinx.coroutines.flow.WhileSubscribed"]},{"name":"fun SupervisorJob(parent: Job? = null): CompletableJob(source)","description":"kotlinx.coroutines.SupervisorJob","location":"kotlinx-coroutines-core/kotlinx.coroutines/-supervisor-job.html","searchKeys":["SupervisorJob","fun SupervisorJob(parent: Job? = null): CompletableJob(source)","kotlinx.coroutines.SupervisorJob"]},{"name":"fun ThreadSafeHeap()(source)","description":"kotlinx.coroutines.internal.ThreadSafeHeap.ThreadSafeHeap","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-thread-safe-heap/-thread-safe-heap.html","searchKeys":["ThreadSafeHeap","fun ThreadSafeHeap()(source)","kotlinx.coroutines.internal.ThreadSafeHeap.ThreadSafeHeap"]},{"name":"fun WhileSubscribed(stopTimeoutMillis: Long = 0, replayExpirationMillis: Long = Long.MAX_VALUE): SharingStarted(source)","description":"kotlinx.coroutines.flow.SharingStarted.Companion.WhileSubscribed","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-started/-companion/-while-subscribed.html","searchKeys":["WhileSubscribed","fun WhileSubscribed(stopTimeoutMillis: Long = 0, replayExpirationMillis: Long = Long.MAX_VALUE): SharingStarted(source)","kotlinx.coroutines.flow.SharingStarted.Companion.WhileSubscribed"]},{"name":"fun Window.asCoroutineDispatcher(): CoroutineDispatcher(source)","description":"kotlinx.coroutines.asCoroutineDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines/as-coroutine-dispatcher.html","searchKeys":["asCoroutineDispatcher","fun Window.asCoroutineDispatcher(): CoroutineDispatcher(source)","kotlinx.coroutines.asCoroutineDispatcher"]},{"name":"fun addLast(node: Node)(source)","description":"kotlinx.coroutines.internal.LinkedListNode.addLast","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-node/add-last.html","searchKeys":["addLast","fun addLast(node: Node)(source)","kotlinx.coroutines.internal.LinkedListNode.addLast"]},{"name":"fun addLast(node: T)(source)","description":"kotlinx.coroutines.internal.ThreadSafeHeap.addLast","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-thread-safe-heap/add-last.html","searchKeys":["addLast","fun addLast(node: T)(source)","kotlinx.coroutines.internal.ThreadSafeHeap.addLast"]},{"name":"fun addOneIfEmpty(node: Node): Boolean(source)","description":"kotlinx.coroutines.internal.LinkedListNode.addOneIfEmpty","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-node/add-one-if-empty.html","searchKeys":["addOneIfEmpty","fun addOneIfEmpty(node: Node): Boolean(source)","kotlinx.coroutines.internal.LinkedListNode.addOneIfEmpty"]},{"name":"fun artificialFrame(message: String): StackTraceElement(source)","description":"kotlinx.coroutines.internal.artificialFrame","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/artificial-frame.html","searchKeys":["artificialFrame","fun artificialFrame(message: String): StackTraceElement(source)","kotlinx.coroutines.internal.artificialFrame"]},{"name":"fun cancelCoroutine(cause: Throwable?): Boolean(source)","description":"kotlinx.coroutines.JobSupport.cancelCoroutine","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/cancel-coroutine.html","searchKeys":["cancelCoroutine","fun cancelCoroutine(cause: Throwable?): Boolean(source)","kotlinx.coroutines.JobSupport.cancelCoroutine"]},{"name":"fun clear()(source)","description":"kotlinx.coroutines.internal.ThreadSafeHeap.clear","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-thread-safe-heap/clear.html","searchKeys":["clear","fun clear()(source)","kotlinx.coroutines.internal.ThreadSafeHeap.clear"]},{"name":"fun decide(decision: Any?): Any?(source)","description":"kotlinx.coroutines.internal.AtomicOp.decide","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-atomic-op/decide.html","searchKeys":["decide","fun decide(decision: Any?): Any?(source)","kotlinx.coroutines.internal.AtomicOp.decide"]},{"name":"fun describeRemoveFirst(): LockFreeLinkedListNode.RemoveFirstDesc<Node>","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.describeRemoveFirst","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/describe-remove-first.html","searchKeys":["describeRemoveFirst","fun describeRemoveFirst(): LockFreeLinkedListNode.RemoveFirstDesc<Node>","kotlinx.coroutines.internal.LockFreeLinkedListNode.describeRemoveFirst"]},{"name":"fun exceptionOrNull(): Throwable?(source)","description":"kotlinx.coroutines.channels.ChannelResult.exceptionOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/exception-or-null.html","searchKeys":["exceptionOrNull","fun exceptionOrNull(): Throwable?(source)","kotlinx.coroutines.channels.ChannelResult.exceptionOrNull"]},{"name":"fun find(predicate: (value: T) -> Boolean): T?(source)","description":"kotlinx.coroutines.internal.ThreadSafeHeap.find","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-thread-safe-heap/find.html","searchKeys":["find","fun find(predicate: (value: T) -> Boolean): T?(source)","kotlinx.coroutines.internal.ThreadSafeHeap.find"]},{"name":"fun finishPrepare()","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.finishPrepare","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-prepare-op/finish-prepare.html","searchKeys":["finishPrepare","fun finishPrepare()","kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.finishPrepare"]},{"name":"fun getCompletionExceptionOrNull(): Throwable?(source)","description":"kotlinx.coroutines.JobSupport.getCompletionExceptionOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/get-completion-exception-or-null.html","searchKeys":["getCompletionExceptionOrNull","fun getCompletionExceptionOrNull(): Throwable?(source)","kotlinx.coroutines.JobSupport.getCompletionExceptionOrNull"]},{"name":"fun getOrNull(): T?(source)","description":"kotlinx.coroutines.channels.ChannelResult.getOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/get-or-null.html","searchKeys":["getOrNull","fun getOrNull(): T?(source)","kotlinx.coroutines.channels.ChannelResult.getOrNull"]},{"name":"fun getOrThrow(): T(source)","description":"kotlinx.coroutines.channels.ChannelResult.getOrThrow","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/get-or-throw.html","searchKeys":["getOrThrow","fun getOrThrow(): T(source)","kotlinx.coroutines.channels.ChannelResult.getOrThrow"]},{"name":"fun handleCoroutineException(context: CoroutineContext, exception: Throwable)(source)","description":"kotlinx.coroutines.handleCoroutineException","location":"kotlinx-coroutines-core/kotlinx.coroutines/handle-coroutine-exception.html","searchKeys":["handleCoroutineException","fun handleCoroutineException(context: CoroutineContext, exception: Throwable)(source)","kotlinx.coroutines.handleCoroutineException"]},{"name":"fun helpRemove()(source)","description":"kotlinx.coroutines.internal.LinkedListNode.helpRemove","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-node/help-remove.html","searchKeys":["helpRemove","fun helpRemove()(source)","kotlinx.coroutines.internal.LinkedListNode.helpRemove"]},{"name":"fun interface DisposableHandle(source)","description":"kotlinx.coroutines.DisposableHandle","location":"kotlinx-coroutines-core/kotlinx.coroutines/-disposable-handle/index.html","searchKeys":["DisposableHandle","fun interface DisposableHandle(source)","kotlinx.coroutines.DisposableHandle"]},{"name":"fun interface FlowCollector<in T>(source)","description":"kotlinx.coroutines.flow.FlowCollector","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow-collector/index.html","searchKeys":["FlowCollector","fun interface FlowCollector<in T>(source)","kotlinx.coroutines.flow.FlowCollector"]},{"name":"fun interface SharingStarted(source)","description":"kotlinx.coroutines.flow.SharingStarted","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-started/index.html","searchKeys":["SharingStarted","fun interface SharingStarted(source)","kotlinx.coroutines.flow.SharingStarted"]},{"name":"fun isEarlierThan(that: OpDescriptor): Boolean(source)","description":"kotlinx.coroutines.internal.OpDescriptor.isEarlierThan","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-op-descriptor/is-earlier-than.html","searchKeys":["isEarlierThan","fun isEarlierThan(that: OpDescriptor): Boolean(source)","kotlinx.coroutines.internal.OpDescriptor.isEarlierThan"]},{"name":"fun peek(): T?(source)","description":"kotlinx.coroutines.internal.ThreadSafeHeap.peek","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-thread-safe-heap/peek.html","searchKeys":["peek","fun peek(): T?(source)","kotlinx.coroutines.internal.ThreadSafeHeap.peek"]},{"name":"fun processNextEventInCurrentThread(): Long(source)","description":"kotlinx.coroutines.processNextEventInCurrentThread","location":"kotlinx-coroutines-core/kotlinx.coroutines/process-next-event-in-current-thread.html","searchKeys":["processNextEventInCurrentThread","fun processNextEventInCurrentThread(): Long(source)","kotlinx.coroutines.processNextEventInCurrentThread"]},{"name":"fun remove(node: T): Boolean(source)","description":"kotlinx.coroutines.internal.ThreadSafeHeap.remove","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-thread-safe-heap/remove.html","searchKeys":["remove","fun remove(node: T): Boolean(source)","kotlinx.coroutines.internal.ThreadSafeHeap.remove"]},{"name":"fun removeFirstOrNull(): Node?(source)","description":"kotlinx.coroutines.internal.LinkedListNode.removeFirstOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-node/remove-first-or-null.html","searchKeys":["removeFirstOrNull","fun removeFirstOrNull(): Node?(source)","kotlinx.coroutines.internal.LinkedListNode.removeFirstOrNull"]},{"name":"fun removeFirstOrNull(): T?(source)","description":"kotlinx.coroutines.internal.ThreadSafeHeap.removeFirstOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-thread-safe-heap/remove-first-or-null.html","searchKeys":["removeFirstOrNull","fun removeFirstOrNull(): T?(source)","kotlinx.coroutines.internal.ThreadSafeHeap.removeFirstOrNull"]},{"name":"fun shutdown()(source)","description":"kotlinx.coroutines.Dispatchers.shutdown","location":"kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/shutdown.html","searchKeys":["shutdown","fun shutdown()(source)","kotlinx.coroutines.Dispatchers.shutdown"]},{"name":"fun ticker(delayMillis: Long, initialDelayMillis: Long = delayMillis, context: CoroutineContext = EmptyCoroutineContext, mode: TickerMode = TickerMode.FIXED_PERIOD): ReceiveChannel<Unit>(source)","description":"kotlinx.coroutines.channels.ticker","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/ticker.html","searchKeys":["ticker","fun ticker(delayMillis: Long, initialDelayMillis: Long = delayMillis, context: CoroutineContext = EmptyCoroutineContext, mode: TickerMode = TickerMode.FIXED_PERIOD): ReceiveChannel<Unit>(source)","kotlinx.coroutines.channels.ticker"]},{"name":"fun toDebugString(): String(source)","description":"kotlinx.coroutines.JobSupport.toDebugString","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/to-debug-string.html","searchKeys":["toDebugString","fun toDebugString(): String(source)","kotlinx.coroutines.JobSupport.toDebugString"]},{"name":"inline fun <E, R> BroadcastChannel<E>.consume(block: ReceiveChannel<E>.() -> R): R(source)","description":"kotlinx.coroutines.channels.consume","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/consume.html","searchKeys":["consume","inline fun <E, R> BroadcastChannel<E>.consume(block: ReceiveChannel<E>.() -> R): R(source)","kotlinx.coroutines.channels.consume"]},{"name":"inline fun <E, R> ReceiveChannel<E>.consume(block: ReceiveChannel<E>.() -> R): R(source)","description":"kotlinx.coroutines.channels.consume","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/consume.html","searchKeys":["consume","inline fun <E, R> ReceiveChannel<E>.consume(block: ReceiveChannel<E>.() -> R): R(source)","kotlinx.coroutines.channels.consume"]},{"name":"inline fun <R> Flow<*>.filterIsInstance(): Flow<R>(source)","description":"kotlinx.coroutines.flow.filterIsInstance","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/filter-is-instance.html","searchKeys":["filterIsInstance","inline fun <R> Flow<*>.filterIsInstance(): Flow<R>(source)","kotlinx.coroutines.flow.filterIsInstance"]},{"name":"inline fun <T : Node> forEach(block: (T) -> Unit)(source)","description":"kotlinx.coroutines.internal.LinkedListHead.forEach","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-head/for-each.html","searchKeys":["forEach","inline fun <T : Node> forEach(block: (T) -> Unit)(source)","kotlinx.coroutines.internal.LinkedListHead.forEach"]},{"name":"inline fun <T, R : Any> Flow<T>.mapNotNull(crossinline transform: suspend (value: T) -> R?): Flow<R>(source)","description":"kotlinx.coroutines.flow.mapNotNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/map-not-null.html","searchKeys":["mapNotNull","inline fun <T, R : Any> Flow<T>.mapNotNull(crossinline transform: suspend (value: T) -> R?): Flow<R>(source)","kotlinx.coroutines.flow.mapNotNull"]},{"name":"inline fun <T, R> Flow<T>.flatMapLatest(crossinline transform: suspend (value: T) -> Flow<R>): Flow<R>(source)","description":"kotlinx.coroutines.flow.flatMapLatest","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/flat-map-latest.html","searchKeys":["flatMapLatest","inline fun <T, R> Flow<T>.flatMapLatest(crossinline transform: suspend (value: T) -> Flow<R>): Flow<R>(source)","kotlinx.coroutines.flow.flatMapLatest"]},{"name":"inline fun <T, R> Flow<T>.map(crossinline transform: suspend (value: T) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.map","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html","searchKeys":["map","inline fun <T, R> Flow<T>.map(crossinline transform: suspend (value: T) -> R): Flow<R>(source)","kotlinx.coroutines.flow.map"]},{"name":"inline fun <T, R> Flow<T>.transform(crossinline transform: suspend FlowCollector<R>.(value: T) -> Unit): Flow<R>(source)","description":"kotlinx.coroutines.flow.transform","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/transform.html","searchKeys":["transform","inline fun <T, R> Flow<T>.transform(crossinline transform: suspend FlowCollector<R>.(value: T) -> Unit): Flow<R>(source)","kotlinx.coroutines.flow.transform"]},{"name":"inline fun <T, R> combine(flows: Iterable<Flow<T>>, crossinline transform: suspend (Array<T>) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.combine","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine.html","searchKeys":["combine","inline fun <T, R> combine(flows: Iterable<Flow<T>>, crossinline transform: suspend (Array<T>) -> R): Flow<R>(source)","kotlinx.coroutines.flow.combine"]},{"name":"inline fun <T, R> combine(vararg flows: Flow<T>, crossinline transform: suspend (Array<T>) -> R): Flow<R>(source)","description":"kotlinx.coroutines.flow.combine","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine.html","searchKeys":["combine","inline fun <T, R> combine(vararg flows: Flow<T>, crossinline transform: suspend (Array<T>) -> R): Flow<R>(source)","kotlinx.coroutines.flow.combine"]},{"name":"inline fun <T, R> combineTransform(flows: Iterable<Flow<T>>, crossinline transform: suspend FlowCollector<R>.(Array<T>) -> Unit): Flow<R>(source)","description":"kotlinx.coroutines.flow.combineTransform","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-transform.html","searchKeys":["combineTransform","inline fun <T, R> combineTransform(flows: Iterable<Flow<T>>, crossinline transform: suspend FlowCollector<R>.(Array<T>) -> Unit): Flow<R>(source)","kotlinx.coroutines.flow.combineTransform"]},{"name":"inline fun <T, R> combineTransform(vararg flows: Flow<T>, crossinline transform: suspend FlowCollector<R>.(Array<T>) -> Unit): Flow<R>(source)","description":"kotlinx.coroutines.flow.combineTransform","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/combine-transform.html","searchKeys":["combineTransform","inline fun <T, R> combineTransform(vararg flows: Flow<T>, crossinline transform: suspend FlowCollector<R>.(Array<T>) -> Unit): Flow<R>(source)","kotlinx.coroutines.flow.combineTransform"]},{"name":"inline fun <T> ChannelResult<T>.getOrElse(onFailure: (exception: Throwable?) -> T): T(source)","description":"kotlinx.coroutines.channels.getOrElse","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/get-or-else.html","searchKeys":["getOrElse","inline fun <T> ChannelResult<T>.getOrElse(onFailure: (exception: Throwable?) -> T): T(source)","kotlinx.coroutines.channels.getOrElse"]},{"name":"inline fun <T> ChannelResult<T>.onClosed(action: (exception: Throwable?) -> Unit): ChannelResult<T>(source)","description":"kotlinx.coroutines.channels.onClosed","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/on-closed.html","searchKeys":["onClosed","inline fun <T> ChannelResult<T>.onClosed(action: (exception: Throwable?) -> Unit): ChannelResult<T>(source)","kotlinx.coroutines.channels.onClosed"]},{"name":"inline fun <T> ChannelResult<T>.onFailure(action: (exception: Throwable?) -> Unit): ChannelResult<T>(source)","description":"kotlinx.coroutines.channels.onFailure","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/on-failure.html","searchKeys":["onFailure","inline fun <T> ChannelResult<T>.onFailure(action: (exception: Throwable?) -> Unit): ChannelResult<T>(source)","kotlinx.coroutines.channels.onFailure"]},{"name":"inline fun <T> ChannelResult<T>.onSuccess(action: (value: T) -> Unit): ChannelResult<T>(source)","description":"kotlinx.coroutines.channels.onSuccess","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/on-success.html","searchKeys":["onSuccess","inline fun <T> ChannelResult<T>.onSuccess(action: (value: T) -> Unit): ChannelResult<T>(source)","kotlinx.coroutines.channels.onSuccess"]},{"name":"inline fun <T> Flow<T>.filter(crossinline predicate: suspend (T) -> Boolean): Flow<T>(source)","description":"kotlinx.coroutines.flow.filter","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/filter.html","searchKeys":["filter","inline fun <T> Flow<T>.filter(crossinline predicate: suspend (T) -> Boolean): Flow<T>(source)","kotlinx.coroutines.flow.filter"]},{"name":"inline fun <T> Flow<T>.filterNot(crossinline predicate: suspend (T) -> Boolean): Flow<T>(source)","description":"kotlinx.coroutines.flow.filterNot","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/filter-not.html","searchKeys":["filterNot","inline fun <T> Flow<T>.filterNot(crossinline predicate: suspend (T) -> Boolean): Flow<T>(source)","kotlinx.coroutines.flow.filterNot"]},{"name":"inline fun <T> MutableStateFlow<T>.getAndUpdate(function: (T) -> T): T(source)","description":"kotlinx.coroutines.flow.getAndUpdate","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/get-and-update.html","searchKeys":["getAndUpdate","inline fun <T> MutableStateFlow<T>.getAndUpdate(function: (T) -> T): T(source)","kotlinx.coroutines.flow.getAndUpdate"]},{"name":"inline fun <T> MutableStateFlow<T>.update(function: (T) -> T)(source)","description":"kotlinx.coroutines.flow.update","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/update.html","searchKeys":["update","inline fun <T> MutableStateFlow<T>.update(function: (T) -> T)(source)","kotlinx.coroutines.flow.update"]},{"name":"inline fun <T> MutableStateFlow<T>.updateAndGet(function: (T) -> T): T(source)","description":"kotlinx.coroutines.flow.updateAndGet","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/update-and-get.html","searchKeys":["updateAndGet","inline fun <T> MutableStateFlow<T>.updateAndGet(function: (T) -> T): T(source)","kotlinx.coroutines.flow.updateAndGet"]},{"name":"inline fun <T> SharedFlow<T>.catch(noinline action: suspend FlowCollector<T>.(cause: Throwable) -> Unit): Flow<T>(source)","description":"kotlinx.coroutines.flow.catch","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/catch.html","searchKeys":["catch","inline fun <T> SharedFlow<T>.catch(noinline action: suspend FlowCollector<T>.(cause: Throwable) -> Unit): Flow<T>(source)","kotlinx.coroutines.flow.catch"]},{"name":"inline fun <T> SharedFlow<T>.retry(retries: Long = Long.MAX_VALUE, noinline predicate: suspend (cause: Throwable) -> Boolean = { true }): Flow<T>(source)","description":"kotlinx.coroutines.flow.retry","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/retry.html","searchKeys":["retry","inline fun <T> SharedFlow<T>.retry(retries: Long = Long.MAX_VALUE, noinline predicate: suspend (cause: Throwable) -> Boolean = { true }): Flow<T>(source)","kotlinx.coroutines.flow.retry"]},{"name":"inline fun <T> SharedFlow<T>.retryWhen(noinline predicate: suspend FlowCollector<T>.(cause: Throwable, attempt: Long) -> Boolean): Flow<T>(source)","description":"kotlinx.coroutines.flow.retryWhen","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/retry-when.html","searchKeys":["retryWhen","inline fun <T> SharedFlow<T>.retryWhen(noinline predicate: suspend FlowCollector<T>.(cause: Throwable, attempt: Long) -> Boolean): Flow<T>(source)","kotlinx.coroutines.flow.retryWhen"]},{"name":"inline fun <T> removeFirstIfIsInstanceOfOrPeekIf(predicate: (T) -> Boolean): T?(source)","description":"kotlinx.coroutines.internal.LinkedListNode.removeFirstIfIsInstanceOfOrPeekIf","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-node/remove-first-if-is-instance-of-or-peek-if.html","searchKeys":["removeFirstIfIsInstanceOfOrPeekIf","inline fun <T> removeFirstIfIsInstanceOfOrPeekIf(predicate: (T) -> Boolean): T?(source)","kotlinx.coroutines.internal.LinkedListNode.removeFirstIfIsInstanceOfOrPeekIf"]},{"name":"inline fun CoroutineExceptionHandler(crossinline handler: (CoroutineContext, Throwable) -> Unit): CoroutineExceptionHandler(source)","description":"kotlinx.coroutines.CoroutineExceptionHandler","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler.html","searchKeys":["CoroutineExceptionHandler","inline fun CoroutineExceptionHandler(crossinline handler: (CoroutineContext, Throwable) -> Unit): CoroutineExceptionHandler(source)","kotlinx.coroutines.CoroutineExceptionHandler"]},{"name":"inline fun addLastIf(node: Node, crossinline condition: () -> Boolean): Boolean(source)","description":"kotlinx.coroutines.internal.LinkedListNode.addLastIf","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-node/add-last-if.html","searchKeys":["addLastIf","inline fun addLastIf(node: Node, crossinline condition: () -> Boolean): Boolean(source)","kotlinx.coroutines.internal.LinkedListNode.addLastIf"]},{"name":"inline fun addLastIf(node: T, cond: (T?) -> Boolean): Boolean(source)","description":"kotlinx.coroutines.internal.ThreadSafeHeap.addLastIf","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-thread-safe-heap/add-last-if.html","searchKeys":["addLastIf","inline fun addLastIf(node: T, cond: (T?) -> Boolean): Boolean(source)","kotlinx.coroutines.internal.ThreadSafeHeap.addLastIf"]},{"name":"inline fun addLastIfPrev(node: Node, predicate: (Node) -> Boolean): Boolean(source)","description":"kotlinx.coroutines.internal.LinkedListNode.addLastIfPrev","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-node/add-last-if-prev.html","searchKeys":["addLastIfPrev","inline fun addLastIfPrev(node: Node, predicate: (Node) -> Boolean): Boolean(source)","kotlinx.coroutines.internal.LinkedListNode.addLastIfPrev"]},{"name":"inline fun addLastIfPrevAndIf(node: Node, predicate: (Node) -> Boolean, crossinline condition: () -> Boolean): Boolean(source)","description":"kotlinx.coroutines.internal.LinkedListNode.addLastIfPrevAndIf","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-node/add-last-if-prev-and-if.html","searchKeys":["addLastIfPrevAndIf","inline fun addLastIfPrevAndIf(node: Node, predicate: (Node) -> Boolean, crossinline condition: () -> Boolean): Boolean(source)","kotlinx.coroutines.internal.LinkedListNode.addLastIfPrevAndIf"]},{"name":"inline fun removeFirstIf(predicate: (T) -> Boolean): T?(source)","description":"kotlinx.coroutines.internal.ThreadSafeHeap.removeFirstIf","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-thread-safe-heap/remove-first-if.html","searchKeys":["removeFirstIf","inline fun removeFirstIf(predicate: (T) -> Boolean): T?(source)","kotlinx.coroutines.internal.ThreadSafeHeap.removeFirstIf"]},{"name":"inline suspend fun <E> BroadcastChannel<E>.consumeEach(action: (E) -> Unit)(source)","description":"kotlinx.coroutines.channels.consumeEach","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/consume-each.html","searchKeys":["consumeEach","inline suspend fun <E> BroadcastChannel<E>.consumeEach(action: (E) -> Unit)(source)","kotlinx.coroutines.channels.consumeEach"]},{"name":"inline suspend fun <E> ReceiveChannel<E>.consumeEach(action: (E) -> Unit)(source)","description":"kotlinx.coroutines.channels.consumeEach","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/consume-each.html","searchKeys":["consumeEach","inline suspend fun <E> ReceiveChannel<E>.consumeEach(action: (E) -> Unit)(source)","kotlinx.coroutines.channels.consumeEach"]},{"name":"inline suspend fun <R> select(crossinline builder: SelectBuilder<R>.() -> Unit): R(source)","description":"kotlinx.coroutines.selects.select","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/select.html","searchKeys":["select","inline suspend fun <R> select(crossinline builder: SelectBuilder<R>.() -> Unit): R(source)","kotlinx.coroutines.selects.select"]},{"name":"inline suspend fun <R> selectUnbiased(crossinline builder: SelectBuilder<R>.() -> Unit): R(source)","description":"kotlinx.coroutines.selects.selectUnbiased","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/select-unbiased.html","searchKeys":["selectUnbiased","inline suspend fun <R> selectUnbiased(crossinline builder: SelectBuilder<R>.() -> Unit): R(source)","kotlinx.coroutines.selects.selectUnbiased"]},{"name":"inline suspend fun <T, R> Flow<T>.fold(initial: R, crossinline operation: suspend (acc: R, value: T) -> R): R(source)","description":"kotlinx.coroutines.flow.fold","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/fold.html","searchKeys":["fold","inline suspend fun <T, R> Flow<T>.fold(initial: R, crossinline operation: suspend (acc: R, value: T) -> R): R(source)","kotlinx.coroutines.flow.fold"]},{"name":"inline suspend fun <T> Flow<T>.collectIndexed(crossinline action: suspend (index: Int, value: T) -> Unit)(source)","description":"kotlinx.coroutines.flow.collectIndexed","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/collect-indexed.html","searchKeys":["collectIndexed","inline suspend fun <T> Flow<T>.collectIndexed(crossinline action: suspend (index: Int, value: T) -> Unit)(source)","kotlinx.coroutines.flow.collectIndexed"]},{"name":"inline suspend fun <T> Mutex.withLock(owner: Any? = null, action: () -> T): T(source)","description":"kotlinx.coroutines.sync.withLock","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/with-lock.html","searchKeys":["withLock","inline suspend fun <T> Mutex.withLock(owner: Any? = null, action: () -> T): T(source)","kotlinx.coroutines.sync.withLock"]},{"name":"inline suspend fun <T> Semaphore.withPermit(action: () -> T): T(source)","description":"kotlinx.coroutines.sync.withPermit","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/with-permit.html","searchKeys":["withPermit","inline suspend fun <T> Semaphore.withPermit(action: () -> T): T(source)","kotlinx.coroutines.sync.withPermit"]},{"name":"inline suspend fun <T> SharedFlow<T>.count(): Int(source)","description":"kotlinx.coroutines.flow.count","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/count.html","searchKeys":["count","inline suspend fun <T> SharedFlow<T>.count(): Int(source)","kotlinx.coroutines.flow.count"]},{"name":"inline suspend fun <T> SharedFlow<T>.toList(): List<T>(source)","description":"kotlinx.coroutines.flow.toList","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/to-list.html","searchKeys":["toList","inline suspend fun <T> SharedFlow<T>.toList(): List<T>(source)","kotlinx.coroutines.flow.toList"]},{"name":"inline suspend fun <T> SharedFlow<T>.toSet(): Set<T>(source)","description":"kotlinx.coroutines.flow.toSet","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/to-set.html","searchKeys":["toSet","inline suspend fun <T> SharedFlow<T>.toSet(): Set<T>(source)","kotlinx.coroutines.flow.toSet"]},{"name":"inline suspend fun <T> suspendCancellableCoroutine(crossinline block: (CancellableContinuation<T>) -> Unit): T(source)","description":"kotlinx.coroutines.suspendCancellableCoroutine","location":"kotlinx-coroutines-core/kotlinx.coroutines/suspend-cancellable-coroutine.html","searchKeys":["suspendCancellableCoroutine","inline suspend fun <T> suspendCancellableCoroutine(crossinline block: (CancellableContinuation<T>) -> Unit): T(source)","kotlinx.coroutines.suspendCancellableCoroutine"]},{"name":"inline suspend fun ThreadLocal<*>.ensurePresent()(source)","description":"kotlinx.coroutines.ensurePresent","location":"kotlinx-coroutines-core/kotlinx.coroutines/ensure-present.html","searchKeys":["ensurePresent","inline suspend fun ThreadLocal<*>.ensurePresent()(source)","kotlinx.coroutines.ensurePresent"]},{"name":"inline suspend fun ThreadLocal<*>.isPresent(): Boolean(source)","description":"kotlinx.coroutines.isPresent","location":"kotlinx-coroutines-core/kotlinx.coroutines/is-present.html","searchKeys":["isPresent","inline suspend fun ThreadLocal<*>.isPresent(): Boolean(source)","kotlinx.coroutines.isPresent"]},{"name":"inline suspend fun currentCoroutineContext(): CoroutineContext(source)","description":"kotlinx.coroutines.currentCoroutineContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/current-coroutine-context.html","searchKeys":["currentCoroutineContext","inline suspend fun currentCoroutineContext(): CoroutineContext(source)","kotlinx.coroutines.currentCoroutineContext"]},{"name":"inline suspend fun whileSelect(crossinline builder: SelectBuilder<Boolean>.() -> Unit)(source)","description":"kotlinx.coroutines.selects.whileSelect","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/while-select.html","searchKeys":["whileSelect","inline suspend fun whileSelect(crossinline builder: SelectBuilder<Boolean>.() -> Unit)(source)","kotlinx.coroutines.selects.whileSelect"]},{"name":"inline suspend operator fun <T> CoroutineDispatcher.invoke(noinline block: suspend CoroutineScope.() -> T): T(source)","description":"kotlinx.coroutines.invoke","location":"kotlinx-coroutines-core/kotlinx.coroutines/invoke.html","searchKeys":["invoke","inline suspend operator fun <T> CoroutineDispatcher.invoke(noinline block: suspend CoroutineScope.() -> T): T(source)","kotlinx.coroutines.invoke"]},{"name":"interface ActorScope<E> : CoroutineScope, ReceiveChannel<E> (source)","description":"kotlinx.coroutines.channels.ActorScope","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-actor-scope/index.html","searchKeys":["ActorScope","interface ActorScope<E> : CoroutineScope, ReceiveChannel<E> (source)","kotlinx.coroutines.channels.ActorScope"]},{"name":"interface BroadcastChannel<E> : SendChannel<E> (source)","description":"kotlinx.coroutines.channels.BroadcastChannel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-broadcast-channel/index.html","searchKeys":["BroadcastChannel","interface BroadcastChannel<E> : SendChannel<E> (source)","kotlinx.coroutines.channels.BroadcastChannel"]},{"name":"interface CancellableContinuation<in T> : Continuation<T> (source)","description":"kotlinx.coroutines.CancellableContinuation","location":"kotlinx-coroutines-core/kotlinx.coroutines/-cancellable-continuation/index.html","searchKeys":["CancellableContinuation","interface CancellableContinuation<in T> : Continuation<T> (source)","kotlinx.coroutines.CancellableContinuation"]},{"name":"interface Channel<E> : SendChannel<E> , ReceiveChannel<E> (source)","description":"kotlinx.coroutines.channels.Channel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/index.html","searchKeys":["Channel","interface Channel<E> : SendChannel<E> , ReceiveChannel<E> (source)","kotlinx.coroutines.channels.Channel"]},{"name":"interface ChannelIterator<out E>(source)","description":"kotlinx.coroutines.channels.ChannelIterator","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-iterator/index.html","searchKeys":["ChannelIterator","interface ChannelIterator<out E>(source)","kotlinx.coroutines.channels.ChannelIterator"]},{"name":"interface ChildHandle : DisposableHandle(source)","description":"kotlinx.coroutines.ChildHandle","location":"kotlinx-coroutines-core/kotlinx.coroutines/-child-handle/index.html","searchKeys":["ChildHandle","interface ChildHandle : DisposableHandle(source)","kotlinx.coroutines.ChildHandle"]},{"name":"interface ChildJob : Job(source)","description":"kotlinx.coroutines.ChildJob","location":"kotlinx-coroutines-core/kotlinx.coroutines/-child-job/index.html","searchKeys":["ChildJob","interface ChildJob : Job(source)","kotlinx.coroutines.ChildJob"]},{"name":"interface CompletableDeferred<T> : Deferred<T> (source)","description":"kotlinx.coroutines.CompletableDeferred","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completable-deferred/index.html","searchKeys":["CompletableDeferred","interface CompletableDeferred<T> : Deferred<T> (source)","kotlinx.coroutines.CompletableDeferred"]},{"name":"interface CompletableJob : Job(source)","description":"kotlinx.coroutines.CompletableJob","location":"kotlinx-coroutines-core/kotlinx.coroutines/-completable-job/index.html","searchKeys":["CompletableJob","interface CompletableJob : Job(source)","kotlinx.coroutines.CompletableJob"]},{"name":"interface CopyableThreadContextElement<S> : ThreadContextElement<S> (source)","description":"kotlinx.coroutines.CopyableThreadContextElement","location":"kotlinx-coroutines-core/kotlinx.coroutines/-copyable-thread-context-element/index.html","searchKeys":["CopyableThreadContextElement","interface CopyableThreadContextElement<S> : ThreadContextElement<S> (source)","kotlinx.coroutines.CopyableThreadContextElement"]},{"name":"interface CopyableThrowable<T : Throwable, CopyableThrowable<T>>(source)","description":"kotlinx.coroutines.CopyableThrowable","location":"kotlinx-coroutines-core/kotlinx.coroutines/-copyable-throwable/index.html","searchKeys":["CopyableThrowable","interface CopyableThrowable<T : Throwable, CopyableThrowable<T>>(source)","kotlinx.coroutines.CopyableThrowable"]},{"name":"interface CoroutineExceptionHandler : CoroutineContext.Element(source)","description":"kotlinx.coroutines.CoroutineExceptionHandler","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/index.html","searchKeys":["CoroutineExceptionHandler","interface CoroutineExceptionHandler : CoroutineContext.Element(source)","kotlinx.coroutines.CoroutineExceptionHandler"]},{"name":"interface CoroutineScope(source)","description":"kotlinx.coroutines.CoroutineScope","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/index.html","searchKeys":["CoroutineScope","interface CoroutineScope(source)","kotlinx.coroutines.CoroutineScope"]},{"name":"interface Deferred<out T> : Job(source)","description":"kotlinx.coroutines.Deferred","location":"kotlinx-coroutines-core/kotlinx.coroutines/-deferred/index.html","searchKeys":["Deferred","interface Deferred<out T> : Job(source)","kotlinx.coroutines.Deferred"]},{"name":"interface Delay(source)","description":"kotlinx.coroutines.Delay","location":"kotlinx-coroutines-core/kotlinx.coroutines/-delay/index.html","searchKeys":["Delay","interface Delay(source)","kotlinx.coroutines.Delay"]},{"name":"interface Flow<out T>(source)","description":"kotlinx.coroutines.flow.Flow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html","searchKeys":["Flow","interface Flow<out T>(source)","kotlinx.coroutines.flow.Flow"]},{"name":"interface FusibleFlow<T> : Flow<T> (source)","description":"kotlinx.coroutines.flow.internal.FusibleFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow.internal/-fusible-flow/index.html","searchKeys":["FusibleFlow","interface FusibleFlow<T> : Flow<T> (source)","kotlinx.coroutines.flow.internal.FusibleFlow"]},{"name":"interface Job : CoroutineContext.Element(source)","description":"kotlinx.coroutines.Job","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/index.html","searchKeys":["Job","interface Job : CoroutineContext.Element(source)","kotlinx.coroutines.Job"]},{"name":"interface MainDispatcherFactory(source)","description":"kotlinx.coroutines.internal.MainDispatcherFactory","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-main-dispatcher-factory/index.html","searchKeys":["MainDispatcherFactory","interface MainDispatcherFactory(source)","kotlinx.coroutines.internal.MainDispatcherFactory"]},{"name":"interface MutableSharedFlow<T> : SharedFlow<T> , FlowCollector<T> (source)","description":"kotlinx.coroutines.flow.MutableSharedFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-shared-flow/index.html","searchKeys":["MutableSharedFlow","interface MutableSharedFlow<T> : SharedFlow<T> , FlowCollector<T> (source)","kotlinx.coroutines.flow.MutableSharedFlow"]},{"name":"interface MutableStateFlow<T> : StateFlow<T> , MutableSharedFlow<T> (source)","description":"kotlinx.coroutines.flow.MutableStateFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-mutable-state-flow/index.html","searchKeys":["MutableStateFlow","interface MutableStateFlow<T> : StateFlow<T> , MutableSharedFlow<T> (source)","kotlinx.coroutines.flow.MutableStateFlow"]},{"name":"interface Mutex(source)","description":"kotlinx.coroutines.sync.Mutex","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-mutex/index.html","searchKeys":["Mutex","interface Mutex(source)","kotlinx.coroutines.sync.Mutex"]},{"name":"interface ParentJob : Job(source)","description":"kotlinx.coroutines.ParentJob","location":"kotlinx-coroutines-core/kotlinx.coroutines/-parent-job/index.html","searchKeys":["ParentJob","interface ParentJob : Job(source)","kotlinx.coroutines.ParentJob"]},{"name":"interface ProducerScope<in E> : CoroutineScope, SendChannel<E> (source)","description":"kotlinx.coroutines.channels.ProducerScope","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-producer-scope/index.html","searchKeys":["ProducerScope","interface ProducerScope<in E> : CoroutineScope, SendChannel<E> (source)","kotlinx.coroutines.channels.ProducerScope"]},{"name":"interface ReceiveChannel<out E>(source)","description":"kotlinx.coroutines.channels.ReceiveChannel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/index.html","searchKeys":["ReceiveChannel","interface ReceiveChannel<out E>(source)","kotlinx.coroutines.channels.ReceiveChannel"]},{"name":"interface SelectBuilder<in R>(source)","description":"kotlinx.coroutines.selects.SelectBuilder","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-builder/index.html","searchKeys":["SelectBuilder","interface SelectBuilder<in R>(source)","kotlinx.coroutines.selects.SelectBuilder"]},{"name":"interface SelectClause0(source)","description":"kotlinx.coroutines.selects.SelectClause0","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-clause0/index.html","searchKeys":["SelectClause0","interface SelectClause0(source)","kotlinx.coroutines.selects.SelectClause0"]},{"name":"interface SelectClause1<out Q>(source)","description":"kotlinx.coroutines.selects.SelectClause1","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-clause1/index.html","searchKeys":["SelectClause1","interface SelectClause1<out Q>(source)","kotlinx.coroutines.selects.SelectClause1"]},{"name":"interface SelectClause2<in P, out Q>(source)","description":"kotlinx.coroutines.selects.SelectClause2","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-clause2/index.html","searchKeys":["SelectClause2","interface SelectClause2<in P, out Q>(source)","kotlinx.coroutines.selects.SelectClause2"]},{"name":"interface SelectInstance<in R>(source)","description":"kotlinx.coroutines.selects.SelectInstance","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-instance/index.html","searchKeys":["SelectInstance","interface SelectInstance<in R>(source)","kotlinx.coroutines.selects.SelectInstance"]},{"name":"interface Semaphore(source)","description":"kotlinx.coroutines.sync.Semaphore","location":"kotlinx-coroutines-core/kotlinx.coroutines.sync/-semaphore/index.html","searchKeys":["Semaphore","interface Semaphore(source)","kotlinx.coroutines.sync.Semaphore"]},{"name":"interface SendChannel<in E>(source)","description":"kotlinx.coroutines.channels.SendChannel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/index.html","searchKeys":["SendChannel","interface SendChannel<in E>(source)","kotlinx.coroutines.channels.SendChannel"]},{"name":"interface SharedFlow<out T> : Flow<T> (source)","description":"kotlinx.coroutines.flow.SharedFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-shared-flow/index.html","searchKeys":["SharedFlow","interface SharedFlow<out T> : Flow<T> (source)","kotlinx.coroutines.flow.SharedFlow"]},{"name":"interface StateFlow<out T> : SharedFlow<T> (source)","description":"kotlinx.coroutines.flow.StateFlow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-state-flow/index.html","searchKeys":["StateFlow","interface StateFlow<out T> : SharedFlow<T> (source)","kotlinx.coroutines.flow.StateFlow"]},{"name":"interface ThreadContextElement<S> : CoroutineContext.Element(source)","description":"kotlinx.coroutines.ThreadContextElement","location":"kotlinx-coroutines-core/kotlinx.coroutines/-thread-context-element/index.html","searchKeys":["ThreadContextElement","interface ThreadContextElement<S> : CoroutineContext.Element(source)","kotlinx.coroutines.ThreadContextElement"]},{"name":"interface ThreadSafeHeapNode(source)","description":"kotlinx.coroutines.internal.ThreadSafeHeapNode","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-thread-safe-heap-node/index.html","searchKeys":["ThreadSafeHeapNode","interface ThreadSafeHeapNode(source)","kotlinx.coroutines.internal.ThreadSafeHeapNode"]},{"name":"lateinit var atomicOp: AtomicOp<*>(source)","description":"kotlinx.coroutines.internal.AtomicDesc.atomicOp","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-atomic-desc/atomic-op.html","searchKeys":["atomicOp","lateinit var atomicOp: AtomicOp<*>(source)","kotlinx.coroutines.internal.AtomicDesc.atomicOp"]},{"name":"object Companion(source)","description":"kotlinx.coroutines.channels.ChannelResult.Companion","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/-companion/index.html","searchKeys":["Companion","object Companion(source)","kotlinx.coroutines.channels.ChannelResult.Companion"]},{"name":"object Companion(source)","description":"kotlinx.coroutines.flow.SharingStarted.Companion","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-started/-companion/index.html","searchKeys":["Companion","object Companion(source)","kotlinx.coroutines.flow.SharingStarted.Companion"]},{"name":"object Factory(source)","description":"kotlinx.coroutines.channels.Channel.Factory","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/-factory/index.html","searchKeys":["Factory","object Factory(source)","kotlinx.coroutines.channels.Channel.Factory"]},{"name":"object GlobalScope : CoroutineScope(source)","description":"kotlinx.coroutines.GlobalScope","location":"kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/index.html","searchKeys":["GlobalScope","object GlobalScope : CoroutineScope(source)","kotlinx.coroutines.GlobalScope"]},{"name":"object Key : AbstractCoroutineContextKey<ContinuationInterceptor, CoroutineDispatcher> (source)","description":"kotlinx.coroutines.CoroutineDispatcher.Key","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/-key/index.html","searchKeys":["Key","object Key : AbstractCoroutineContextKey<ContinuationInterceptor, CoroutineDispatcher> (source)","kotlinx.coroutines.CoroutineDispatcher.Key"]},{"name":"object Key : AbstractCoroutineContextKey<CoroutineDispatcher, ExecutorCoroutineDispatcher> (source)","description":"kotlinx.coroutines.ExecutorCoroutineDispatcher.Key","location":"kotlinx-coroutines-core/kotlinx.coroutines/-executor-coroutine-dispatcher/-key/index.html","searchKeys":["Key","object Key : AbstractCoroutineContextKey<CoroutineDispatcher, ExecutorCoroutineDispatcher> (source)","kotlinx.coroutines.ExecutorCoroutineDispatcher.Key"]},{"name":"object Key : CoroutineContext.Key<CoroutineExceptionHandler> (source)","description":"kotlinx.coroutines.CoroutineExceptionHandler.Key","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/-key/index.html","searchKeys":["Key","object Key : CoroutineContext.Key<CoroutineExceptionHandler> (source)","kotlinx.coroutines.CoroutineExceptionHandler.Key"]},{"name":"object Key : CoroutineContext.Key<CoroutineName> (source)","description":"kotlinx.coroutines.CoroutineName.Key","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/-key/index.html","searchKeys":["Key","object Key : CoroutineContext.Key<CoroutineName> (source)","kotlinx.coroutines.CoroutineName.Key"]},{"name":"object Key : CoroutineContext.Key<Job> (source)","description":"kotlinx.coroutines.Job.Key","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/-key/index.html","searchKeys":["Key","object Key : CoroutineContext.Key<Job> (source)","kotlinx.coroutines.Job.Key"]},{"name":"object MissingMainCoroutineDispatcherFactory : MainDispatcherFactory(source)","description":"kotlinx.coroutines.internal.MissingMainCoroutineDispatcherFactory","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-missing-main-coroutine-dispatcher-factory/index.html","searchKeys":["MissingMainCoroutineDispatcherFactory","object MissingMainCoroutineDispatcherFactory : MainDispatcherFactory(source)","kotlinx.coroutines.internal.MissingMainCoroutineDispatcherFactory"]},{"name":"object NonCancellable : AbstractCoroutineContextElement, Job(source)","description":"kotlinx.coroutines.NonCancellable","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable/index.html","searchKeys":["NonCancellable","object NonCancellable : AbstractCoroutineContextElement, Job(source)","kotlinx.coroutines.NonCancellable"]},{"name":"object NonDisposableHandle : DisposableHandle, ChildHandle(source)","description":"kotlinx.coroutines.NonDisposableHandle","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-disposable-handle/index.html","searchKeys":["NonDisposableHandle","object NonDisposableHandle : DisposableHandle, ChildHandle(source)","kotlinx.coroutines.NonDisposableHandle"]},{"name":"open class AddLastDesc<T : Node>(val queue: Node, val node: T) : LockFreeLinkedListNode.AbstractAtomicDesc","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.AddLastDesc","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-add-last-desc/index.html","searchKeys":["AddLastDesc","open class AddLastDesc<T : Node>(val queue: Node, val node: T) : LockFreeLinkedListNode.AbstractAtomicDesc","kotlinx.coroutines.internal.LockFreeLinkedListNode.AddLastDesc"]},{"name":"open class JobSupport(active: Boolean) : Job, ChildJob, ParentJob, SelectClause0(source)","description":"kotlinx.coroutines.JobSupport","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/index.html","searchKeys":["JobSupport","open class JobSupport(active: Boolean) : Job, ChildJob, ParentJob, SelectClause0(source)","kotlinx.coroutines.JobSupport"]},{"name":"open class LinkedListHead : LinkedListNode(source)","description":"kotlinx.coroutines.internal.LinkedListHead","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-head/index.html","searchKeys":["LinkedListHead","open class LinkedListHead : LinkedListNode(source)","kotlinx.coroutines.internal.LinkedListHead"]},{"name":"open class LinkedListNode(source)","description":"kotlinx.coroutines.internal.LinkedListNode","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-node/index.html","searchKeys":["LinkedListNode","open class LinkedListNode(source)","kotlinx.coroutines.internal.LinkedListNode"]},{"name":"open class RemoveFirstDesc<T>(val queue: Node) : LockFreeLinkedListNode.AbstractAtomicDesc","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-remove-first-desc/index.html","searchKeys":["RemoveFirstDesc","open class RemoveFirstDesc<T>(val queue: Node) : LockFreeLinkedListNode.AbstractAtomicDesc","kotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc"]},{"name":"open class ThreadSafeHeap<T : ThreadSafeHeapNode, Comparable<T>> : SynchronizedObject(source)","description":"kotlinx.coroutines.internal.ThreadSafeHeap","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-thread-safe-heap/index.html","searchKeys":["ThreadSafeHeap","open class ThreadSafeHeap<T : ThreadSafeHeapNode, Comparable<T>> : SynchronizedObject(source)","kotlinx.coroutines.internal.ThreadSafeHeap"]},{"name":"open fun cancelInternal(cause: Throwable)(source)","description":"kotlinx.coroutines.JobSupport.cancelInternal","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/cancel-internal.html","searchKeys":["cancelInternal","open fun cancelInternal(cause: Throwable)(source)","kotlinx.coroutines.JobSupport.cancelInternal"]},{"name":"open fun childCancelled(cause: Throwable): Boolean(source)","description":"kotlinx.coroutines.JobSupport.childCancelled","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/child-cancelled.html","searchKeys":["childCancelled","open fun childCancelled(cause: Throwable): Boolean(source)","kotlinx.coroutines.JobSupport.childCancelled"]},{"name":"open fun dispatchYield(context: CoroutineContext, block: Runnable)(source)","description":"kotlinx.coroutines.CoroutineDispatcher.dispatchYield","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/dispatch-yield.html","searchKeys":["dispatchYield","open fun dispatchYield(context: CoroutineContext, block: Runnable)(source)","kotlinx.coroutines.CoroutineDispatcher.dispatchYield"]},{"name":"open fun dropChannelOperators(): Flow<T>?(source)","description":"kotlinx.coroutines.flow.internal.ChannelFlow.dropChannelOperators","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow.internal/-channel-flow/drop-channel-operators.html","searchKeys":["dropChannelOperators","open fun dropChannelOperators(): Flow<T>?(source)","kotlinx.coroutines.flow.internal.ChannelFlow.dropChannelOperators"]},{"name":"open fun hintOnError(): String?(source)","description":"kotlinx.coroutines.internal.MainDispatcherFactory.hintOnError","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-main-dispatcher-factory/hint-on-error.html","searchKeys":["hintOnError","open fun hintOnError(): String?(source)","kotlinx.coroutines.internal.MainDispatcherFactory.hintOnError"]},{"name":"open fun invokeOnTimeout(timeMillis: Long, block: Runnable, context: CoroutineContext): DisposableHandle(source)","description":"kotlinx.coroutines.Delay.invokeOnTimeout","location":"kotlinx-coroutines-core/kotlinx.coroutines/-delay/invoke-on-timeout.html","searchKeys":["invokeOnTimeout","open fun invokeOnTimeout(timeMillis: Long, block: Runnable, context: CoroutineContext): DisposableHandle(source)","kotlinx.coroutines.Delay.invokeOnTimeout"]},{"name":"open fun isDispatchNeeded(context: CoroutineContext): Boolean(source)","description":"kotlinx.coroutines.CoroutineDispatcher.isDispatchNeeded","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/is-dispatch-needed.html","searchKeys":["isDispatchNeeded","open fun isDispatchNeeded(context: CoroutineContext): Boolean(source)","kotlinx.coroutines.CoroutineDispatcher.isDispatchNeeded"]},{"name":"open fun limitedParallelism(parallelism: Int): CoroutineDispatcher(source)","description":"kotlinx.coroutines.CoroutineDispatcher.limitedParallelism","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/limited-parallelism.html","searchKeys":["limitedParallelism","open fun limitedParallelism(parallelism: Int): CoroutineDispatcher(source)","kotlinx.coroutines.CoroutineDispatcher.limitedParallelism"]},{"name":"open fun offer(element: E): Boolean(source)","description":"kotlinx.coroutines.channels.SendChannel.offer","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-send-channel/offer.html","searchKeys":["offer","open fun offer(element: E): Boolean(source)","kotlinx.coroutines.channels.SendChannel.offer"]},{"name":"open fun onPrepare(prepareOp: LockFreeLinkedListNode.PrepareOp): Any?","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.onPrepare","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-abstract-atomic-desc/on-prepare.html","searchKeys":["onPrepare","open fun onPrepare(prepareOp: LockFreeLinkedListNode.PrepareOp): Any?","kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.onPrepare"]},{"name":"open fun onRemoved(affected: Node)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.onRemoved","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-abstract-atomic-desc/on-removed.html","searchKeys":["onRemoved","open fun onRemoved(affected: Node)","kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.onRemoved"]},{"name":"open fun poll(): E?(source)","description":"kotlinx.coroutines.channels.ReceiveChannel.poll","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/poll.html","searchKeys":["poll","open fun poll(): E?(source)","kotlinx.coroutines.channels.ReceiveChannel.poll"]},{"name":"open fun produceImpl(scope: CoroutineScope): ReceiveChannel<T>(source)","description":"kotlinx.coroutines.flow.internal.ChannelFlow.produceImpl","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow.internal/-channel-flow/produce-impl.html","searchKeys":["produceImpl","open fun produceImpl(scope: CoroutineScope): ReceiveChannel<T>(source)","kotlinx.coroutines.flow.internal.ChannelFlow.produceImpl"]},{"name":"open fun remove(): Boolean(source)","description":"kotlinx.coroutines.internal.LinkedListNode.remove","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-node/remove.html","searchKeys":["remove","open fun remove(): Boolean(source)","kotlinx.coroutines.internal.LinkedListNode.remove"]},{"name":"open operator fun <P, Q> SelectClause2<P?, Q>.invoke(block: suspend (Q) -> R)(source)","description":"kotlinx.coroutines.selects.SelectBuilder.invoke","location":"kotlinx-coroutines-core/kotlinx.coroutines.selects/-select-builder/invoke.html","searchKeys":["invoke","open operator fun <P, Q> SelectClause2<P?, Q>.invoke(block: suspend (Q) -> R)(source)","kotlinx.coroutines.selects.SelectBuilder.invoke"]},{"name":"open operator fun plus(other: Job): Job(source)","description":"kotlinx.coroutines.Job.plus","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job/plus.html","searchKeys":["plus","open operator fun plus(other: Job): Job(source)","kotlinx.coroutines.Job.plus"]},{"name":"open override fun attachChild(child: ChildJob): ChildHandle(source)","description":"kotlinx.coroutines.NonCancellable.attachChild","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable/attach-child.html","searchKeys":["attachChild","open override fun attachChild(child: ChildJob): ChildHandle(source)","kotlinx.coroutines.NonCancellable.attachChild"]},{"name":"open override fun cancel(cause: CancellationException?)(source)","description":"kotlinx.coroutines.JobSupport.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/cancel.html","searchKeys":["cancel","open override fun cancel(cause: CancellationException?)(source)","kotlinx.coroutines.JobSupport.cancel"]},{"name":"open override fun cancel(cause: CancellationException?)(source)","description":"kotlinx.coroutines.NonCancellable.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable/cancel.html","searchKeys":["cancel","open override fun cancel(cause: CancellationException?)(source)","kotlinx.coroutines.NonCancellable.cancel"]},{"name":"open override fun cancel(cause: CancellationException?)(source)","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel.cancel","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/cancel.html","searchKeys":["cancel","open override fun cancel(cause: CancellationException?)(source)","kotlinx.coroutines.channels.ConflatedBroadcastChannel.cancel"]},{"name":"open override fun childCancelled(cause: Throwable): Boolean(source)","description":"kotlinx.coroutines.NonDisposableHandle.childCancelled","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-disposable-handle/child-cancelled.html","searchKeys":["childCancelled","open override fun childCancelled(cause: Throwable): Boolean(source)","kotlinx.coroutines.NonDisposableHandle.childCancelled"]},{"name":"open override fun close(cause: Throwable?): Boolean(source)","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel.close","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/close.html","searchKeys":["close","open override fun close(cause: Throwable?): Boolean(source)","kotlinx.coroutines.channels.ConflatedBroadcastChannel.close"]},{"name":"open override fun createCopy(): TimeoutCancellationException(source)","description":"kotlinx.coroutines.TimeoutCancellationException.createCopy","location":"kotlinx-coroutines-core/kotlinx.coroutines/-timeout-cancellation-exception/create-copy.html","searchKeys":["createCopy","open override fun createCopy(): TimeoutCancellationException(source)","kotlinx.coroutines.TimeoutCancellationException.createCopy"]},{"name":"open override fun createDispatcher(allFactories: List<MainDispatcherFactory>): MainCoroutineDispatcher(source)","description":"kotlinx.coroutines.internal.MissingMainCoroutineDispatcherFactory.createDispatcher","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-missing-main-coroutine-dispatcher-factory/create-dispatcher.html","searchKeys":["createDispatcher","open override fun createDispatcher(allFactories: List<MainDispatcherFactory>): MainCoroutineDispatcher(source)","kotlinx.coroutines.internal.MissingMainCoroutineDispatcherFactory.createDispatcher"]},{"name":"open override fun dispose()(source)","description":"kotlinx.coroutines.NonDisposableHandle.dispose","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-disposable-handle/dispose.html","searchKeys":["dispose","open override fun dispose()(source)","kotlinx.coroutines.NonDisposableHandle.dispose"]},{"name":"open override fun finishPrepare(prepareOp: LockFreeLinkedListNode.PrepareOp)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.AddLastDesc.finishPrepare","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-add-last-desc/finish-prepare.html","searchKeys":["finishPrepare","open override fun finishPrepare(prepareOp: LockFreeLinkedListNode.PrepareOp)","kotlinx.coroutines.internal.LockFreeLinkedListNode.AddLastDesc.finishPrepare"]},{"name":"open override fun finishPrepare(prepareOp: LockFreeLinkedListNode.PrepareOp)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.finishPrepare","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-remove-first-desc/finish-prepare.html","searchKeys":["finishPrepare","open override fun finishPrepare(prepareOp: LockFreeLinkedListNode.PrepareOp)","kotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.finishPrepare"]},{"name":"open override fun fuse(context: CoroutineContext, capacity: Int, onBufferOverflow: BufferOverflow): Flow<T>(source)","description":"kotlinx.coroutines.flow.internal.ChannelFlow.fuse","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow.internal/-channel-flow/fuse.html","searchKeys":["fuse","open override fun fuse(context: CoroutineContext, capacity: Int, onBufferOverflow: BufferOverflow): Flow<T>(source)","kotlinx.coroutines.flow.internal.ChannelFlow.fuse"]},{"name":"open override fun getCancellationException(): CancellationException(source)","description":"kotlinx.coroutines.NonCancellable.getCancellationException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable/get-cancellation-exception.html","searchKeys":["getCancellationException","open override fun getCancellationException(): CancellationException(source)","kotlinx.coroutines.NonCancellable.getCancellationException"]},{"name":"open override fun getChildJobCancellationCause(): CancellationException(source)","description":"kotlinx.coroutines.JobSupport.getChildJobCancellationCause","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/get-child-job-cancellation-cause.html","searchKeys":["getChildJobCancellationCause","open override fun getChildJobCancellationCause(): CancellationException(source)","kotlinx.coroutines.JobSupport.getChildJobCancellationCause"]},{"name":"open override fun invokeOnClose(handler: Handler)(source)","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel.invokeOnClose","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/invoke-on-close.html","searchKeys":["invokeOnClose","open override fun invokeOnClose(handler: Handler)(source)","kotlinx.coroutines.channels.ConflatedBroadcastChannel.invokeOnClose"]},{"name":"open override fun invokeOnCompletion(handler: CompletionHandler): DisposableHandle(source)","description":"kotlinx.coroutines.NonCancellable.invokeOnCompletion","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable/invoke-on-completion.html","searchKeys":["invokeOnCompletion","open override fun invokeOnCompletion(handler: CompletionHandler): DisposableHandle(source)","kotlinx.coroutines.NonCancellable.invokeOnCompletion"]},{"name":"open override fun invokeOnCompletion(onCancelling: Boolean, invokeImmediately: Boolean, handler: CompletionHandler): DisposableHandle(source)","description":"kotlinx.coroutines.NonCancellable.invokeOnCompletion","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable/invoke-on-completion.html","searchKeys":["invokeOnCompletion","open override fun invokeOnCompletion(onCancelling: Boolean, invokeImmediately: Boolean, handler: CompletionHandler): DisposableHandle(source)","kotlinx.coroutines.NonCancellable.invokeOnCompletion"]},{"name":"open override fun limitedParallelism(parallelism: Int): CoroutineDispatcher(source)","description":"kotlinx.coroutines.MainCoroutineDispatcher.limitedParallelism","location":"kotlinx-coroutines-core/kotlinx.coroutines/-main-coroutine-dispatcher/limited-parallelism.html","searchKeys":["limitedParallelism","open override fun limitedParallelism(parallelism: Int): CoroutineDispatcher(source)","kotlinx.coroutines.MainCoroutineDispatcher.limitedParallelism"]},{"name":"open override fun openSubscription(): ReceiveChannel<E>(source)","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel.openSubscription","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/open-subscription.html","searchKeys":["openSubscription","open override fun openSubscription(): ReceiveChannel<E>(source)","kotlinx.coroutines.channels.ConflatedBroadcastChannel.openSubscription"]},{"name":"open override fun perform(affected: Any?): Any?","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.perform","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-prepare-op/perform.html","searchKeys":["perform","open override fun perform(affected: Any?): Any?","kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.perform"]},{"name":"open override fun perform(affected: Any?): Any?(source)","description":"kotlinx.coroutines.internal.PrepareOp.perform","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-prepare-op/perform.html","searchKeys":["perform","open override fun perform(affected: Any?): Any?(source)","kotlinx.coroutines.internal.PrepareOp.perform"]},{"name":"open override fun start(): Boolean(source)","description":"kotlinx.coroutines.NonCancellable.start","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable/start.html","searchKeys":["start","open override fun start(): Boolean(source)","kotlinx.coroutines.NonCancellable.start"]},{"name":"open override fun toString(): String","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.toString","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-prepare-op/to-string.html","searchKeys":["toString","open override fun toString(): String","kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.toString"]},{"name":"open override fun toString(): String","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.toString","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/to-string.html","searchKeys":["toString","open override fun toString(): String","kotlinx.coroutines.internal.LockFreeLinkedListNode.toString"]},{"name":"open override fun toString(): String(source)","description":"kotlinx.coroutines.CoroutineDispatcher.toString","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/to-string.html","searchKeys":["toString","open override fun toString(): String(source)","kotlinx.coroutines.CoroutineDispatcher.toString"]},{"name":"open override fun toString(): String(source)","description":"kotlinx.coroutines.CoroutineName.toString","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/to-string.html","searchKeys":["toString","open override fun toString(): String(source)","kotlinx.coroutines.CoroutineName.toString"]},{"name":"open override fun toString(): String(source)","description":"kotlinx.coroutines.JobSupport.toString","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/to-string.html","searchKeys":["toString","open override fun toString(): String(source)","kotlinx.coroutines.JobSupport.toString"]},{"name":"open override fun toString(): String(source)","description":"kotlinx.coroutines.MainCoroutineDispatcher.toString","location":"kotlinx-coroutines-core/kotlinx.coroutines/-main-coroutine-dispatcher/to-string.html","searchKeys":["toString","open override fun toString(): String(source)","kotlinx.coroutines.MainCoroutineDispatcher.toString"]},{"name":"open override fun toString(): String(source)","description":"kotlinx.coroutines.NonCancellable.toString","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable/to-string.html","searchKeys":["toString","open override fun toString(): String(source)","kotlinx.coroutines.NonCancellable.toString"]},{"name":"open override fun toString(): String(source)","description":"kotlinx.coroutines.NonDisposableHandle.toString","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-disposable-handle/to-string.html","searchKeys":["toString","open override fun toString(): String(source)","kotlinx.coroutines.NonDisposableHandle.toString"]},{"name":"open override fun toString(): String(source)","description":"kotlinx.coroutines.channels.ChannelResult.toString","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/to-string.html","searchKeys":["toString","open override fun toString(): String(source)","kotlinx.coroutines.channels.ChannelResult.toString"]},{"name":"open override fun toString(): String(source)","description":"kotlinx.coroutines.flow.internal.ChannelFlow.toString","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow.internal/-channel-flow/to-string.html","searchKeys":["toString","open override fun toString(): String(source)","kotlinx.coroutines.flow.internal.ChannelFlow.toString"]},{"name":"open override fun toString(): String(source)","description":"kotlinx.coroutines.internal.OpDescriptor.toString","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-op-descriptor/to-string.html","searchKeys":["toString","open override fun toString(): String(source)","kotlinx.coroutines.internal.OpDescriptor.toString"]},{"name":"open override fun trySend(element: E): ChannelResult<Unit>(source)","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel.trySend","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/try-send.html","searchKeys":["trySend","open override fun trySend(element: E): ChannelResult<Unit>(source)","kotlinx.coroutines.channels.ConflatedBroadcastChannel.trySend"]},{"name":"open override fun updatedNext(affected: Node, next: Node): Any","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.AddLastDesc.updatedNext","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-add-last-desc/updated-next.html","searchKeys":["updatedNext","open override fun updatedNext(affected: Node, next: Node): Any","kotlinx.coroutines.internal.LockFreeLinkedListNode.AddLastDesc.updatedNext"]},{"name":"open override val atomicOp: AtomicOp<*>","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.atomicOp","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-prepare-op/atomic-op.html","searchKeys":["atomicOp","open override val atomicOp: AtomicOp<*>","kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.atomicOp"]},{"name":"open override val atomicOp: AtomicOp<*>(source)","description":"kotlinx.coroutines.internal.AtomicOp.atomicOp","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-atomic-op/atomic-op.html","searchKeys":["atomicOp","open override val atomicOp: AtomicOp<*>(source)","kotlinx.coroutines.internal.AtomicOp.atomicOp"]},{"name":"open override val children: Sequence<Job>(source)","description":"kotlinx.coroutines.NonCancellable.children","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable/children.html","searchKeys":["children","open override val children: Sequence<Job>(source)","kotlinx.coroutines.NonCancellable.children"]},{"name":"open override val coroutineContext: CoroutineContext(source)","description":"kotlinx.coroutines.AbstractCoroutine.coroutineContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/-abstract-coroutine/coroutine-context.html","searchKeys":["coroutineContext","open override val coroutineContext: CoroutineContext(source)","kotlinx.coroutines.AbstractCoroutine.coroutineContext"]},{"name":"open override val coroutineContext: CoroutineContext(source)","description":"kotlinx.coroutines.GlobalScope.coroutineContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/-global-scope/coroutine-context.html","searchKeys":["coroutineContext","open override val coroutineContext: CoroutineContext(source)","kotlinx.coroutines.GlobalScope.coroutineContext"]},{"name":"open override val isActive: Boolean(source)","description":"kotlinx.coroutines.AbstractCoroutine.isActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/-abstract-coroutine/is-active.html","searchKeys":["isActive","open override val isActive: Boolean(source)","kotlinx.coroutines.AbstractCoroutine.isActive"]},{"name":"open override val isActive: Boolean(source)","description":"kotlinx.coroutines.JobSupport.isActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/is-active.html","searchKeys":["isActive","open override val isActive: Boolean(source)","kotlinx.coroutines.JobSupport.isActive"]},{"name":"open override val isActive: Boolean(source)","description":"kotlinx.coroutines.NonCancellable.isActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable/is-active.html","searchKeys":["isActive","open override val isActive: Boolean(source)","kotlinx.coroutines.NonCancellable.isActive"]},{"name":"open override val isCancelled: Boolean(source)","description":"kotlinx.coroutines.NonCancellable.isCancelled","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable/is-cancelled.html","searchKeys":["isCancelled","open override val isCancelled: Boolean(source)","kotlinx.coroutines.NonCancellable.isCancelled"]},{"name":"open override val isClosedForSend: Boolean(source)","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel.isClosedForSend","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/is-closed-for-send.html","searchKeys":["isClosedForSend","open override val isClosedForSend: Boolean(source)","kotlinx.coroutines.channels.ConflatedBroadcastChannel.isClosedForSend"]},{"name":"open override val isCompleted: Boolean(source)","description":"kotlinx.coroutines.NonCancellable.isCompleted","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable/is-completed.html","searchKeys":["isCompleted","open override val isCompleted: Boolean(source)","kotlinx.coroutines.NonCancellable.isCompleted"]},{"name":"open override val isRemoved: Boolean","description":"kotlinx.coroutines.internal.LockFreeLinkedListHead.isRemoved","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-head/is-removed.html","searchKeys":["isRemoved","open override val isRemoved: Boolean","kotlinx.coroutines.internal.LockFreeLinkedListHead.isRemoved"]},{"name":"open override val loadPriority: Int(source)","description":"kotlinx.coroutines.internal.MissingMainCoroutineDispatcherFactory.loadPriority","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-missing-main-coroutine-dispatcher-factory/load-priority.html","searchKeys":["loadPriority","open override val loadPriority: Int(source)","kotlinx.coroutines.internal.MissingMainCoroutineDispatcherFactory.loadPriority"]},{"name":"open override val onJoin: SelectClause0(source)","description":"kotlinx.coroutines.NonCancellable.onJoin","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable/on-join.html","searchKeys":["onJoin","open override val onJoin: SelectClause0(source)","kotlinx.coroutines.NonCancellable.onJoin"]},{"name":"open override val onSend: SelectClause2<E, SendChannel<E>>(source)","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel.onSend","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/on-send.html","searchKeys":["onSend","open override val onSend: SelectClause2<E, SendChannel<E>>(source)","kotlinx.coroutines.channels.ConflatedBroadcastChannel.onSend"]},{"name":"open override val parent: Job?(source)","description":"kotlinx.coroutines.NonDisposableHandle.parent","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-disposable-handle/parent.html","searchKeys":["parent","open override val parent: Job?(source)","kotlinx.coroutines.NonDisposableHandle.parent"]},{"name":"open suspend fun delay(time: Long)(source)","description":"kotlinx.coroutines.Delay.delay","location":"kotlinx-coroutines-core/kotlinx.coroutines/-delay/delay.html","searchKeys":["delay","open suspend fun delay(time: Long)(source)","kotlinx.coroutines.Delay.delay"]},{"name":"open suspend fun receiveOrNull(): E?(source)","description":"kotlinx.coroutines.channels.ReceiveChannel.receiveOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/receive-or-null.html","searchKeys":["receiveOrNull","open suspend fun receiveOrNull(): E?(source)","kotlinx.coroutines.channels.ReceiveChannel.receiveOrNull"]},{"name":"open suspend override fun collect(collector: FlowCollector<T>)(source)","description":"kotlinx.coroutines.flow.internal.ChannelFlow.collect","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow.internal/-channel-flow/collect.html","searchKeys":["collect","open suspend override fun collect(collector: FlowCollector<T>)(source)","kotlinx.coroutines.flow.internal.ChannelFlow.collect"]},{"name":"open suspend override fun emit(value: T)(source)","description":"kotlinx.coroutines.flow.internal.SendingCollector.emit","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow.internal/-sending-collector/emit.html","searchKeys":["emit","open suspend override fun emit(value: T)(source)","kotlinx.coroutines.flow.internal.SendingCollector.emit"]},{"name":"open suspend override fun join()(source)","description":"kotlinx.coroutines.NonCancellable.join","location":"kotlinx-coroutines-core/kotlinx.coroutines/-non-cancellable/join.html","searchKeys":["join","open suspend override fun join()(source)","kotlinx.coroutines.NonCancellable.join"]},{"name":"open suspend override fun send(element: E)(source)","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel.send","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/send.html","searchKeys":["send","open suspend override fun send(element: E)(source)","kotlinx.coroutines.channels.ConflatedBroadcastChannel.send"]},{"name":"open val onReceiveOrNull: SelectClause1<E?>(source)","description":"kotlinx.coroutines.channels.ReceiveChannel.onReceiveOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-receive-channel/on-receive-or-null.html","searchKeys":["onReceiveOrNull","open val onReceiveOrNull: SelectClause1<E?>(source)","kotlinx.coroutines.channels.ReceiveChannel.onReceiveOrNull"]},{"name":"open val opSequence: Long(source)","description":"kotlinx.coroutines.internal.AtomicOp.opSequence","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-atomic-op/op-sequence.html","searchKeys":["opSequence","open val opSequence: Long(source)","kotlinx.coroutines.internal.AtomicOp.opSequence"]},{"name":"operator fun <R, T> invoke(block: suspend R.() -> T, receiver: R, completion: Continuation<T>)(source)","description":"kotlinx.coroutines.CoroutineStart.invoke","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/invoke.html","searchKeys":["invoke","operator fun <R, T> invoke(block: suspend R.() -> T, receiver: R, completion: Continuation<T>)(source)","kotlinx.coroutines.CoroutineStart.invoke"]},{"name":"operator fun <T> invoke(block: suspend () -> T, completion: Continuation<T>)(source)","description":"kotlinx.coroutines.CoroutineStart.invoke","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/invoke.html","searchKeys":["invoke","operator fun <T> invoke(block: suspend () -> T, completion: Continuation<T>)(source)","kotlinx.coroutines.CoroutineStart.invoke"]},{"name":"operator fun CoroutineScope.plus(context: CoroutineContext): CoroutineScope(source)","description":"kotlinx.coroutines.plus","location":"kotlinx-coroutines-core/kotlinx.coroutines/plus.html","searchKeys":["plus","operator fun CoroutineScope.plus(context: CoroutineContext): CoroutineScope(source)","kotlinx.coroutines.plus"]},{"name":"operator fun plus(other: CoroutineDispatcher): CoroutineDispatcher(source)","description":"kotlinx.coroutines.CoroutineDispatcher.plus","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/plus.html","searchKeys":["plus","operator fun plus(other: CoroutineDispatcher): CoroutineDispatcher(source)","kotlinx.coroutines.CoroutineDispatcher.plus"]},{"name":"override fun <R> registerSelectClause0(select: SelectInstance<R>, block: suspend () -> R)(source)","description":"kotlinx.coroutines.JobSupport.registerSelectClause0","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/register-select-clause0.html","searchKeys":["registerSelectClause0","override fun <R> registerSelectClause0(select: SelectInstance<R>, block: suspend () -> R)(source)","kotlinx.coroutines.JobSupport.registerSelectClause0"]},{"name":"override fun <T> interceptContinuation(continuation: Continuation<T>): Continuation<T>(source)","description":"kotlinx.coroutines.CoroutineDispatcher.interceptContinuation","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/intercept-continuation.html","searchKeys":["interceptContinuation","override fun <T> interceptContinuation(continuation: Continuation<T>): Continuation<T>(source)","kotlinx.coroutines.CoroutineDispatcher.interceptContinuation"]},{"name":"override fun attachChild(child: ChildJob): ChildHandle(source)","description":"kotlinx.coroutines.JobSupport.attachChild","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/attach-child.html","searchKeys":["attachChild","override fun attachChild(child: ChildJob): ChildHandle(source)","kotlinx.coroutines.JobSupport.attachChild"]},{"name":"override fun complete(op: AtomicOp<*>, failure: Any?)","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.complete","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-abstract-atomic-desc/complete.html","searchKeys":["complete","override fun complete(op: AtomicOp<*>, failure: Any?)","kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.complete"]},{"name":"override fun getCancellationException(): CancellationException(source)","description":"kotlinx.coroutines.JobSupport.getCancellationException","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/get-cancellation-exception.html","searchKeys":["getCancellationException","override fun getCancellationException(): CancellationException(source)","kotlinx.coroutines.JobSupport.getCancellationException"]},{"name":"override fun invokeOnCompletion(handler: CompletionHandler): DisposableHandle(source)","description":"kotlinx.coroutines.JobSupport.invokeOnCompletion","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/invoke-on-completion.html","searchKeys":["invokeOnCompletion","override fun invokeOnCompletion(handler: CompletionHandler): DisposableHandle(source)","kotlinx.coroutines.JobSupport.invokeOnCompletion"]},{"name":"override fun invokeOnCompletion(onCancelling: Boolean, invokeImmediately: Boolean, handler: CompletionHandler): DisposableHandle(source)","description":"kotlinx.coroutines.JobSupport.invokeOnCompletion","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/invoke-on-completion.html","searchKeys":["invokeOnCompletion","override fun invokeOnCompletion(onCancelling: Boolean, invokeImmediately: Boolean, handler: CompletionHandler): DisposableHandle(source)","kotlinx.coroutines.JobSupport.invokeOnCompletion"]},{"name":"override fun parentCancelled(parentJob: ParentJob)(source)","description":"kotlinx.coroutines.JobSupport.parentCancelled","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/parent-cancelled.html","searchKeys":["parentCancelled","override fun parentCancelled(parentJob: ParentJob)(source)","kotlinx.coroutines.JobSupport.parentCancelled"]},{"name":"override fun perform(affected: Any?): Any?(source)","description":"kotlinx.coroutines.internal.AtomicOp.perform","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-atomic-op/perform.html","searchKeys":["perform","override fun perform(affected: Any?): Any?(source)","kotlinx.coroutines.internal.AtomicOp.perform"]},{"name":"override fun prepare(op: AtomicOp<*>): Any?","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.prepare","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-abstract-atomic-desc/prepare.html","searchKeys":["prepare","override fun prepare(op: AtomicOp<*>): Any?","kotlinx.coroutines.internal.LockFreeLinkedListNode.AbstractAtomicDesc.prepare"]},{"name":"override fun releaseInterceptedContinuation(continuation: Continuation<*>)(source)","description":"kotlinx.coroutines.CoroutineDispatcher.releaseInterceptedContinuation","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/release-intercepted-continuation.html","searchKeys":["releaseInterceptedContinuation","override fun releaseInterceptedContinuation(continuation: Continuation<*>)(source)","kotlinx.coroutines.CoroutineDispatcher.releaseInterceptedContinuation"]},{"name":"override fun remove(): Nothing(source)","description":"kotlinx.coroutines.internal.LinkedListHead.remove","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-head/remove.html","searchKeys":["remove","override fun remove(): Nothing(source)","kotlinx.coroutines.internal.LinkedListHead.remove"]},{"name":"override fun resumeWith(result: Result<T>)(source)","description":"kotlinx.coroutines.AbstractCoroutine.resumeWith","location":"kotlinx-coroutines-core/kotlinx.coroutines/-abstract-coroutine/resume-with.html","searchKeys":["resumeWith","override fun resumeWith(result: Result<T>)(source)","kotlinx.coroutines.AbstractCoroutine.resumeWith"]},{"name":"override fun start(): Boolean(source)","description":"kotlinx.coroutines.JobSupport.start","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/start.html","searchKeys":["start","override fun start(): Boolean(source)","kotlinx.coroutines.JobSupport.start"]},{"name":"override fun updatedNext(affected: Node, next: Node): Any","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.updatedNext","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-remove-first-desc/updated-next.html","searchKeys":["updatedNext","override fun updatedNext(affected: Node, next: Node): Any","kotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.updatedNext"]},{"name":"override val children: Sequence<Job>(source)","description":"kotlinx.coroutines.JobSupport.children","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/children.html","searchKeys":["children","override val children: Sequence<Job>(source)","kotlinx.coroutines.JobSupport.children"]},{"name":"override val context: CoroutineContext(source)","description":"kotlinx.coroutines.AbstractCoroutine.context","location":"kotlinx-coroutines-core/kotlinx.coroutines/-abstract-coroutine/context.html","searchKeys":["context","override val context: CoroutineContext(source)","kotlinx.coroutines.AbstractCoroutine.context"]},{"name":"override val isCancelled: Boolean(source)","description":"kotlinx.coroutines.JobSupport.isCancelled","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/is-cancelled.html","searchKeys":["isCancelled","override val isCancelled: Boolean(source)","kotlinx.coroutines.JobSupport.isCancelled"]},{"name":"override val isCompleted: Boolean(source)","description":"kotlinx.coroutines.JobSupport.isCompleted","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/is-completed.html","searchKeys":["isCompleted","override val isCompleted: Boolean(source)","kotlinx.coroutines.JobSupport.isCompleted"]},{"name":"override val key: CoroutineContext.Key<*>(source)","description":"kotlinx.coroutines.JobSupport.key","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/key.html","searchKeys":["key","override val key: CoroutineContext.Key<*>(source)","kotlinx.coroutines.JobSupport.key"]},{"name":"override val onJoin: SelectClause0(source)","description":"kotlinx.coroutines.JobSupport.onJoin","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/on-join.html","searchKeys":["onJoin","override val onJoin: SelectClause0(source)","kotlinx.coroutines.JobSupport.onJoin"]},{"name":"suspend fun <E : Any> ReceiveChannel<E>.receiveOrNull(): E?(source)","description":"kotlinx.coroutines.channels.receiveOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/receive-or-null.html","searchKeys":["receiveOrNull","suspend fun <E : Any> ReceiveChannel<E>.receiveOrNull(): E?(source)","kotlinx.coroutines.channels.receiveOrNull"]},{"name":"suspend fun <E> ReceiveChannel<E>.toList(): List<E>(source)","description":"kotlinx.coroutines.channels.toList","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/to-list.html","searchKeys":["toList","suspend fun <E> ReceiveChannel<E>.toList(): List<E>(source)","kotlinx.coroutines.channels.toList"]},{"name":"suspend fun <R> coroutineScope(block: suspend CoroutineScope.() -> R): R(source)","description":"kotlinx.coroutines.coroutineScope","location":"kotlinx-coroutines-core/kotlinx.coroutines/coroutine-scope.html","searchKeys":["coroutineScope","suspend fun <R> coroutineScope(block: suspend CoroutineScope.() -> R): R(source)","kotlinx.coroutines.coroutineScope"]},{"name":"suspend fun <R> supervisorScope(block: suspend CoroutineScope.() -> R): R(source)","description":"kotlinx.coroutines.supervisorScope","location":"kotlinx-coroutines-core/kotlinx.coroutines/supervisor-scope.html","searchKeys":["supervisorScope","suspend fun <R> supervisorScope(block: suspend CoroutineScope.() -> R): R(source)","kotlinx.coroutines.supervisorScope"]},{"name":"suspend fun <S, T : S> Flow<T>.reduce(operation: suspend (accumulator: S, value: T) -> S): S(source)","description":"kotlinx.coroutines.flow.reduce","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/reduce.html","searchKeys":["reduce","suspend fun <S, T : S> Flow<T>.reduce(operation: suspend (accumulator: S, value: T) -> S): S(source)","kotlinx.coroutines.flow.reduce"]},{"name":"suspend fun <T, C : MutableCollection<in T>> Flow<T>.toCollection(destination: C): C(source)","description":"kotlinx.coroutines.flow.toCollection","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/to-collection.html","searchKeys":["toCollection","suspend fun <T, C : MutableCollection<in T>> Flow<T>.toCollection(destination: C): C(source)","kotlinx.coroutines.flow.toCollection"]},{"name":"suspend fun <T> Collection<Deferred<T>>.awaitAll(): List<T>(source)","description":"kotlinx.coroutines.awaitAll","location":"kotlinx-coroutines-core/kotlinx.coroutines/await-all.html","searchKeys":["awaitAll","suspend fun <T> Collection<Deferred<T>>.awaitAll(): List<T>(source)","kotlinx.coroutines.awaitAll"]},{"name":"suspend fun <T> Flow<T>.collectLatest(action: suspend (value: T) -> Unit)(source)","description":"kotlinx.coroutines.flow.collectLatest","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/collect-latest.html","searchKeys":["collectLatest","suspend fun <T> Flow<T>.collectLatest(action: suspend (value: T) -> Unit)(source)","kotlinx.coroutines.flow.collectLatest"]},{"name":"suspend fun <T> Flow<T>.count(): Int(source)","description":"kotlinx.coroutines.flow.count","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/count.html","searchKeys":["count","suspend fun <T> Flow<T>.count(): Int(source)","kotlinx.coroutines.flow.count"]},{"name":"suspend fun <T> Flow<T>.count(predicate: suspend (T) -> Boolean): Int(source)","description":"kotlinx.coroutines.flow.count","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/count.html","searchKeys":["count","suspend fun <T> Flow<T>.count(predicate: suspend (T) -> Boolean): Int(source)","kotlinx.coroutines.flow.count"]},{"name":"suspend fun <T> Flow<T>.first(): T(source)","description":"kotlinx.coroutines.flow.first","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/first.html","searchKeys":["first","suspend fun <T> Flow<T>.first(): T(source)","kotlinx.coroutines.flow.first"]},{"name":"suspend fun <T> Flow<T>.first(predicate: suspend (T) -> Boolean): T(source)","description":"kotlinx.coroutines.flow.first","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/first.html","searchKeys":["first","suspend fun <T> Flow<T>.first(predicate: suspend (T) -> Boolean): T(source)","kotlinx.coroutines.flow.first"]},{"name":"suspend fun <T> Flow<T>.firstOrNull(): T?(source)","description":"kotlinx.coroutines.flow.firstOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/first-or-null.html","searchKeys":["firstOrNull","suspend fun <T> Flow<T>.firstOrNull(): T?(source)","kotlinx.coroutines.flow.firstOrNull"]},{"name":"suspend fun <T> Flow<T>.firstOrNull(predicate: suspend (T) -> Boolean): T?(source)","description":"kotlinx.coroutines.flow.firstOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/first-or-null.html","searchKeys":["firstOrNull","suspend fun <T> Flow<T>.firstOrNull(predicate: suspend (T) -> Boolean): T?(source)","kotlinx.coroutines.flow.firstOrNull"]},{"name":"suspend fun <T> Flow<T>.last(): T(source)","description":"kotlinx.coroutines.flow.last","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/last.html","searchKeys":["last","suspend fun <T> Flow<T>.last(): T(source)","kotlinx.coroutines.flow.last"]},{"name":"suspend fun <T> Flow<T>.lastOrNull(): T?(source)","description":"kotlinx.coroutines.flow.lastOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/last-or-null.html","searchKeys":["lastOrNull","suspend fun <T> Flow<T>.lastOrNull(): T?(source)","kotlinx.coroutines.flow.lastOrNull"]},{"name":"suspend fun <T> Flow<T>.single(): T(source)","description":"kotlinx.coroutines.flow.single","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/single.html","searchKeys":["single","suspend fun <T> Flow<T>.single(): T(source)","kotlinx.coroutines.flow.single"]},{"name":"suspend fun <T> Flow<T>.singleOrNull(): T?(source)","description":"kotlinx.coroutines.flow.singleOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/single-or-null.html","searchKeys":["singleOrNull","suspend fun <T> Flow<T>.singleOrNull(): T?(source)","kotlinx.coroutines.flow.singleOrNull"]},{"name":"suspend fun <T> Flow<T>.stateIn(scope: CoroutineScope): StateFlow<T>(source)","description":"kotlinx.coroutines.flow.stateIn","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/state-in.html","searchKeys":["stateIn","suspend fun <T> Flow<T>.stateIn(scope: CoroutineScope): StateFlow<T>(source)","kotlinx.coroutines.flow.stateIn"]},{"name":"suspend fun <T> Flow<T>.toList(destination: MutableList<T> = ArrayList()): List<T>(source)","description":"kotlinx.coroutines.flow.toList","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/to-list.html","searchKeys":["toList","suspend fun <T> Flow<T>.toList(destination: MutableList<T> = ArrayList()): List<T>(source)","kotlinx.coroutines.flow.toList"]},{"name":"suspend fun <T> Flow<T>.toSet(destination: MutableSet<T> = LinkedHashSet()): Set<T>(source)","description":"kotlinx.coroutines.flow.toSet","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/to-set.html","searchKeys":["toSet","suspend fun <T> Flow<T>.toSet(destination: MutableSet<T> = LinkedHashSet()): Set<T>(source)","kotlinx.coroutines.flow.toSet"]},{"name":"suspend fun <T> FlowCollector<T>.emitAll(channel: ReceiveChannel<T>)(source)","description":"kotlinx.coroutines.flow.emitAll","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/emit-all.html","searchKeys":["emitAll","suspend fun <T> FlowCollector<T>.emitAll(channel: ReceiveChannel<T>)(source)","kotlinx.coroutines.flow.emitAll"]},{"name":"suspend fun <T> FlowCollector<T>.emitAll(flow: Flow<T>)(source)","description":"kotlinx.coroutines.flow.emitAll","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/emit-all.html","searchKeys":["emitAll","suspend fun <T> FlowCollector<T>.emitAll(flow: Flow<T>)(source)","kotlinx.coroutines.flow.emitAll"]},{"name":"suspend fun <T> Promise<T>.await(): T(source)","description":"kotlinx.coroutines.await","location":"kotlinx-coroutines-core/kotlinx.coroutines/await.html","searchKeys":["await","suspend fun <T> Promise<T>.await(): T(source)","kotlinx.coroutines.await"]},{"name":"suspend fun <T> awaitAll(vararg deferreds: Deferred<T>): List<T>(source)","description":"kotlinx.coroutines.awaitAll","location":"kotlinx-coroutines-core/kotlinx.coroutines/await-all.html","searchKeys":["awaitAll","suspend fun <T> awaitAll(vararg deferreds: Deferred<T>): List<T>(source)","kotlinx.coroutines.awaitAll"]},{"name":"suspend fun <T> runInterruptible(context: CoroutineContext = EmptyCoroutineContext, block: () -> T): T(source)","description":"kotlinx.coroutines.runInterruptible","location":"kotlinx-coroutines-core/kotlinx.coroutines/run-interruptible.html","searchKeys":["runInterruptible","suspend fun <T> runInterruptible(context: CoroutineContext = EmptyCoroutineContext, block: () -> T): T(source)","kotlinx.coroutines.runInterruptible"]},{"name":"suspend fun <T> withContext(context: CoroutineContext, block: suspend CoroutineScope.() -> T): T(source)","description":"kotlinx.coroutines.withContext","location":"kotlinx-coroutines-core/kotlinx.coroutines/with-context.html","searchKeys":["withContext","suspend fun <T> withContext(context: CoroutineContext, block: suspend CoroutineScope.() -> T): T(source)","kotlinx.coroutines.withContext"]},{"name":"suspend fun <T> withTimeout(timeMillis: Long, block: suspend CoroutineScope.() -> T): T(source)","description":"kotlinx.coroutines.withTimeout","location":"kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html","searchKeys":["withTimeout","suspend fun <T> withTimeout(timeMillis: Long, block: suspend CoroutineScope.() -> T): T(source)","kotlinx.coroutines.withTimeout"]},{"name":"suspend fun <T> withTimeout(timeout: Duration, block: suspend CoroutineScope.() -> T): T(source)","description":"kotlinx.coroutines.withTimeout","location":"kotlinx-coroutines-core/kotlinx.coroutines/with-timeout.html","searchKeys":["withTimeout","suspend fun <T> withTimeout(timeout: Duration, block: suspend CoroutineScope.() -> T): T(source)","kotlinx.coroutines.withTimeout"]},{"name":"suspend fun <T> withTimeoutOrNull(timeMillis: Long, block: suspend CoroutineScope.() -> T): T?(source)","description":"kotlinx.coroutines.withTimeoutOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines/with-timeout-or-null.html","searchKeys":["withTimeoutOrNull","suspend fun <T> withTimeoutOrNull(timeMillis: Long, block: suspend CoroutineScope.() -> T): T?(source)","kotlinx.coroutines.withTimeoutOrNull"]},{"name":"suspend fun <T> withTimeoutOrNull(timeout: Duration, block: suspend CoroutineScope.() -> T): T?(source)","description":"kotlinx.coroutines.withTimeoutOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines/with-timeout-or-null.html","searchKeys":["withTimeoutOrNull","suspend fun <T> withTimeoutOrNull(timeout: Duration, block: suspend CoroutineScope.() -> T): T?(source)","kotlinx.coroutines.withTimeoutOrNull"]},{"name":"suspend fun Collection<Job>.joinAll()(source)","description":"kotlinx.coroutines.joinAll","location":"kotlinx-coroutines-core/kotlinx.coroutines/join-all.html","searchKeys":["joinAll","suspend fun Collection<Job>.joinAll()(source)","kotlinx.coroutines.joinAll"]},{"name":"suspend fun Flow<*>.collect()(source)","description":"kotlinx.coroutines.flow.collect","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html","searchKeys":["collect","suspend fun Flow<*>.collect()(source)","kotlinx.coroutines.flow.collect"]},{"name":"suspend fun Job.cancelAndJoin()(source)","description":"kotlinx.coroutines.cancelAndJoin","location":"kotlinx-coroutines-core/kotlinx.coroutines/cancel-and-join.html","searchKeys":["cancelAndJoin","suspend fun Job.cancelAndJoin()(source)","kotlinx.coroutines.cancelAndJoin"]},{"name":"suspend fun ProducerScope<*>.awaitClose(block: () -> Unit = {})(source)","description":"kotlinx.coroutines.channels.awaitClose","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/await-close.html","searchKeys":["awaitClose","suspend fun ProducerScope<*>.awaitClose(block: () -> Unit = {})(source)","kotlinx.coroutines.channels.awaitClose"]},{"name":"suspend fun Window.awaitAnimationFrame(): Double(source)","description":"kotlinx.coroutines.awaitAnimationFrame","location":"kotlinx-coroutines-core/kotlinx.coroutines/await-animation-frame.html","searchKeys":["awaitAnimationFrame","suspend fun Window.awaitAnimationFrame(): Double(source)","kotlinx.coroutines.awaitAnimationFrame"]},{"name":"suspend fun awaitCancellation(): Nothing(source)","description":"kotlinx.coroutines.awaitCancellation","location":"kotlinx-coroutines-core/kotlinx.coroutines/await-cancellation.html","searchKeys":["awaitCancellation","suspend fun awaitCancellation(): Nothing(source)","kotlinx.coroutines.awaitCancellation"]},{"name":"suspend fun delay(duration: Duration)(source)","description":"kotlinx.coroutines.delay","location":"kotlinx-coroutines-core/kotlinx.coroutines/delay.html","searchKeys":["delay","suspend fun delay(duration: Duration)(source)","kotlinx.coroutines.delay"]},{"name":"suspend fun delay(timeMillis: Long)(source)","description":"kotlinx.coroutines.delay","location":"kotlinx-coroutines-core/kotlinx.coroutines/delay.html","searchKeys":["delay","suspend fun delay(timeMillis: Long)(source)","kotlinx.coroutines.delay"]},{"name":"suspend fun joinAll(vararg jobs: Job)(source)","description":"kotlinx.coroutines.joinAll","location":"kotlinx-coroutines-core/kotlinx.coroutines/join-all.html","searchKeys":["joinAll","suspend fun joinAll(vararg jobs: Job)(source)","kotlinx.coroutines.joinAll"]},{"name":"suspend fun yield()(source)","description":"kotlinx.coroutines.yield","location":"kotlinx-coroutines-core/kotlinx.coroutines/yield.html","searchKeys":["yield","suspend fun yield()(source)","kotlinx.coroutines.yield"]},{"name":"suspend override fun collect(collector: FlowCollector<T>)(source)","description":"kotlinx.coroutines.flow.AbstractFlow.collect","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-abstract-flow/collect.html","searchKeys":["collect","suspend override fun collect(collector: FlowCollector<T>)(source)","kotlinx.coroutines.flow.AbstractFlow.collect"]},{"name":"suspend override fun join()(source)","description":"kotlinx.coroutines.JobSupport.join","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/join.html","searchKeys":["join","suspend override fun join()(source)","kotlinx.coroutines.JobSupport.join"]},{"name":"val CoroutineContext.isActive: Boolean(source)","description":"kotlinx.coroutines.isActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/is-active.html","searchKeys":["isActive","val CoroutineContext.isActive: Boolean(source)","kotlinx.coroutines.isActive"]},{"name":"val CoroutineContext.job: Job(source)","description":"kotlinx.coroutines.job","location":"kotlinx-coroutines-core/kotlinx.coroutines/job.html","searchKeys":["job","val CoroutineContext.job: Job(source)","kotlinx.coroutines.job"]},{"name":"val CoroutineScope.isActive: Boolean(source)","description":"kotlinx.coroutines.isActive","location":"kotlinx-coroutines-core/kotlinx.coroutines/is-active.html","searchKeys":["isActive","val CoroutineScope.isActive: Boolean(source)","kotlinx.coroutines.isActive"]},{"name":"val DEFAULT_CONCURRENCY: Int(source)","description":"kotlinx.coroutines.flow.DEFAULT_CONCURRENCY","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-d-e-f-a-u-l-t_-c-o-n-c-u-r-r-e-n-c-y.html","searchKeys":["DEFAULT_CONCURRENCY","val DEFAULT_CONCURRENCY: Int(source)","kotlinx.coroutines.flow.DEFAULT_CONCURRENCY"]},{"name":"val Eagerly: SharingStarted(source)","description":"kotlinx.coroutines.flow.SharingStarted.Companion.Eagerly","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-started/-companion/-eagerly.html","searchKeys":["Eagerly","val Eagerly: SharingStarted(source)","kotlinx.coroutines.flow.SharingStarted.Companion.Eagerly"]},{"name":"val FlowCollector<*>.coroutineContext: CoroutineContext(source)","description":"kotlinx.coroutines.flow.coroutineContext","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/coroutine-context.html","searchKeys":["coroutineContext","val FlowCollector<*>.coroutineContext: CoroutineContext(source)","kotlinx.coroutines.flow.coroutineContext"]},{"name":"val FlowCollector<*>.isActive: Boolean(source)","description":"kotlinx.coroutines.flow.isActive","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/is-active.html","searchKeys":["isActive","val FlowCollector<*>.isActive: Boolean(source)","kotlinx.coroutines.flow.isActive"]},{"name":"val IO: CoroutineDispatcher(source)","description":"kotlinx.coroutines.Dispatchers.IO","location":"kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-i-o.html","searchKeys":["IO","val IO: CoroutineDispatcher(source)","kotlinx.coroutines.Dispatchers.IO"]},{"name":"val Lazily: SharingStarted(source)","description":"kotlinx.coroutines.flow.SharingStarted.Companion.Lazily","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow/-sharing-started/-companion/-lazily.html","searchKeys":["Lazily","val Lazily: SharingStarted(source)","kotlinx.coroutines.flow.SharingStarted.Companion.Lazily"]},{"name":"val affected: Node","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.affected","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-prepare-op/affected.html","searchKeys":["affected","val affected: Node","kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.affected"]},{"name":"val capacity: Int(source)","description":"kotlinx.coroutines.flow.internal.ChannelFlow.capacity","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow.internal/-channel-flow/capacity.html","searchKeys":["capacity","val capacity: Int(source)","kotlinx.coroutines.flow.internal.ChannelFlow.capacity"]},{"name":"val consensus: Any?(source)","description":"kotlinx.coroutines.internal.AtomicOp.consensus","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-atomic-op/consensus.html","searchKeys":["consensus","val consensus: Any?(source)","kotlinx.coroutines.internal.AtomicOp.consensus"]},{"name":"val context: CoroutineContext(source)","description":"kotlinx.coroutines.flow.internal.ChannelFlow.context","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow.internal/-channel-flow/context.html","searchKeys":["context","val context: CoroutineContext(source)","kotlinx.coroutines.flow.internal.ChannelFlow.context"]},{"name":"val desc: LockFreeLinkedListNode.AbstractAtomicDesc","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.desc","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-prepare-op/desc.html","searchKeys":["desc","val desc: LockFreeLinkedListNode.AbstractAtomicDesc","kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.desc"]},{"name":"val isClosed: Boolean(source)","description":"kotlinx.coroutines.channels.ChannelResult.isClosed","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/is-closed.html","searchKeys":["isClosed","val isClosed: Boolean(source)","kotlinx.coroutines.channels.ChannelResult.isClosed"]},{"name":"val isCompletedExceptionally: Boolean(source)","description":"kotlinx.coroutines.JobSupport.isCompletedExceptionally","location":"kotlinx-coroutines-core/kotlinx.coroutines/-job-support/is-completed-exceptionally.html","searchKeys":["isCompletedExceptionally","val isCompletedExceptionally: Boolean(source)","kotlinx.coroutines.JobSupport.isCompletedExceptionally"]},{"name":"val isDecided: Boolean(source)","description":"kotlinx.coroutines.internal.AtomicOp.isDecided","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-atomic-op/is-decided.html","searchKeys":["isDecided","val isDecided: Boolean(source)","kotlinx.coroutines.internal.AtomicOp.isDecided"]},{"name":"val isEmpty: Boolean(source)","description":"kotlinx.coroutines.internal.LinkedListHead.isEmpty","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-head/is-empty.html","searchKeys":["isEmpty","val isEmpty: Boolean(source)","kotlinx.coroutines.internal.LinkedListHead.isEmpty"]},{"name":"val isEmpty: Boolean(source)","description":"kotlinx.coroutines.internal.ThreadSafeHeap.isEmpty","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-thread-safe-heap/is-empty.html","searchKeys":["isEmpty","val isEmpty: Boolean(source)","kotlinx.coroutines.internal.ThreadSafeHeap.isEmpty"]},{"name":"val isFailure: Boolean(source)","description":"kotlinx.coroutines.channels.ChannelResult.isFailure","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/is-failure.html","searchKeys":["isFailure","val isFailure: Boolean(source)","kotlinx.coroutines.channels.ChannelResult.isFailure"]},{"name":"val isLazy: Boolean(source)","description":"kotlinx.coroutines.CoroutineStart.isLazy","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-start/is-lazy.html","searchKeys":["isLazy","val isLazy: Boolean(source)","kotlinx.coroutines.CoroutineStart.isLazy"]},{"name":"val isRemoved: Boolean(source)","description":"kotlinx.coroutines.internal.LinkedListNode.isRemoved","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-node/is-removed.html","searchKeys":["isRemoved","val isRemoved: Boolean(source)","kotlinx.coroutines.internal.LinkedListNode.isRemoved"]},{"name":"val isSuccess: Boolean(source)","description":"kotlinx.coroutines.channels.ChannelResult.isSuccess","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/is-success.html","searchKeys":["isSuccess","val isSuccess: Boolean(source)","kotlinx.coroutines.channels.ChannelResult.isSuccess"]},{"name":"val name: String(source)","description":"kotlinx.coroutines.CoroutineName.name","location":"kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-name/name.html","searchKeys":["name","val name: String(source)","kotlinx.coroutines.CoroutineName.name"]},{"name":"val next: Any","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.next","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/next.html","searchKeys":["next","val next: Any","kotlinx.coroutines.internal.LockFreeLinkedListNode.next"]},{"name":"val next: Node","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.next","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-prepare-op/next.html","searchKeys":["next","val next: Node","kotlinx.coroutines.internal.LockFreeLinkedListNode.PrepareOp.next"]},{"name":"val nextNode: LinkedListNode(source)","description":"kotlinx.coroutines.internal.LinkedListNode.nextNode","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-node/next-node.html","searchKeys":["nextNode","val nextNode: LinkedListNode(source)","kotlinx.coroutines.internal.LinkedListNode.nextNode"]},{"name":"val node: T","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.AddLastDesc.node","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-add-last-desc/node.html","searchKeys":["node","val node: T","kotlinx.coroutines.internal.LockFreeLinkedListNode.AddLastDesc.node"]},{"name":"val onBufferOverflow: BufferOverflow(source)","description":"kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow","location":"kotlinx-coroutines-core/kotlinx.coroutines.flow.internal/-channel-flow/on-buffer-overflow.html","searchKeys":["onBufferOverflow","val onBufferOverflow: BufferOverflow(source)","kotlinx.coroutines.flow.internal.ChannelFlow.onBufferOverflow"]},{"name":"val prevNode: LinkedListNode(source)","description":"kotlinx.coroutines.internal.LinkedListNode.prevNode","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-linked-list-node/prev-node.html","searchKeys":["prevNode","val prevNode: LinkedListNode(source)","kotlinx.coroutines.internal.LinkedListNode.prevNode"]},{"name":"val queue: Node","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.AddLastDesc.queue","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-add-last-desc/queue.html","searchKeys":["queue","val queue: Node","kotlinx.coroutines.internal.LockFreeLinkedListNode.AddLastDesc.queue"]},{"name":"val queue: Node","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.queue","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-remove-first-desc/queue.html","searchKeys":["queue","val queue: Node","kotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.queue"]},{"name":"val result: T","description":"kotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.result","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-lock-free-linked-list-node/-remove-first-desc/result.html","searchKeys":["result","val result: T","kotlinx.coroutines.internal.LockFreeLinkedListNode.RemoveFirstDesc.result"]},{"name":"val value: E(source)","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel.value","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/value.html","searchKeys":["value","val value: E(source)","kotlinx.coroutines.channels.ConflatedBroadcastChannel.value"]},{"name":"val valueOrNull: E?(source)","description":"kotlinx.coroutines.channels.ConflatedBroadcastChannel.valueOrNull","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-conflated-broadcast-channel/value-or-null.html","searchKeys":["valueOrNull","val valueOrNull: E?(source)","kotlinx.coroutines.channels.ConflatedBroadcastChannel.valueOrNull"]},{"name":"value class ChannelResult<out T>(source)","description":"kotlinx.coroutines.channels.ChannelResult","location":"kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel-result/index.html","searchKeys":["ChannelResult","value class ChannelResult<out T>(source)","kotlinx.coroutines.channels.ChannelResult"]},{"name":"var size: Int(source)","description":"kotlinx.coroutines.internal.ThreadSafeHeap.size","location":"kotlinx-coroutines-core/kotlinx.coroutines.internal/-thread-safe-heap/size.html","searchKeys":["size","var size: Int(source)","kotlinx.coroutines.internal.ThreadSafeHeap.size"]},{"name":"abstract fun <T> injectCoroutineContext(publisher: Publisher<T>, coroutineContext: CoroutineContext): Publisher<T>","description":"kotlinx.coroutines.reactive.ContextInjector.injectCoroutineContext","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-context-injector/inject-coroutine-context.html","searchKeys":["injectCoroutineContext","abstract fun <T> injectCoroutineContext(publisher: Publisher<T>, coroutineContext: CoroutineContext): Publisher<T>","kotlinx.coroutines.reactive.ContextInjector.injectCoroutineContext"]},{"name":"class FlowSubscription<T>(val flow: Flow<T>, val subscriber: Subscriber<in T>, context: CoroutineContext) : AbstractCoroutine<Unit> , Subscription","description":"kotlinx.coroutines.reactive.FlowSubscription","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-flow-subscription/index.html","searchKeys":["FlowSubscription","class FlowSubscription<T>(val flow: Flow<T>, val subscriber: Subscriber<in T>, context: CoroutineContext) : AbstractCoroutine<Unit> , Subscription","kotlinx.coroutines.reactive.FlowSubscription"]},{"name":"class PublisherCoroutine<in T>(parentContext: CoroutineContext, val subscriber: Subscriber<T>, exceptionOnCancelHandler: (Throwable, CoroutineContext) -> Unit) : AbstractCoroutine<Unit> , ProducerScope<T> , Subscription, SelectClause2<T, SendChannel<T>> ","description":"kotlinx.coroutines.reactive.PublisherCoroutine","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-publisher-coroutine/index.html","searchKeys":["PublisherCoroutine","class PublisherCoroutine<in T>(parentContext: CoroutineContext, val subscriber: Subscriber<T>, exceptionOnCancelHandler: (Throwable, CoroutineContext) -> Unit) : AbstractCoroutine<Unit> , ProducerScope<T> , Subscription, SelectClause2<T, SendChannel<T>> ","kotlinx.coroutines.reactive.PublisherCoroutine"]},{"name":"fun <T : Any> Flow<T>.asPublisher(context: CoroutineContext = EmptyCoroutineContext): Publisher<T>","description":"kotlinx.coroutines.reactive.asPublisher","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/as-publisher.html","searchKeys":["asPublisher","fun <T : Any> Flow<T>.asPublisher(context: CoroutineContext = EmptyCoroutineContext): Publisher<T>","kotlinx.coroutines.reactive.asPublisher"]},{"name":"fun <T : Any> Publisher<T>.asFlow(): Flow<T>","description":"kotlinx.coroutines.reactive.asFlow","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/as-flow.html","searchKeys":["asFlow","fun <T : Any> Publisher<T>.asFlow(): Flow<T>","kotlinx.coroutines.reactive.asFlow"]},{"name":"fun <T> FlowSubscription(flow: Flow<T>, subscriber: Subscriber<in T>, context: CoroutineContext)","description":"kotlinx.coroutines.reactive.FlowSubscription.FlowSubscription","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-flow-subscription/-flow-subscription.html","searchKeys":["FlowSubscription","fun <T> FlowSubscription(flow: Flow<T>, subscriber: Subscriber<in T>, context: CoroutineContext)","kotlinx.coroutines.reactive.FlowSubscription.FlowSubscription"]},{"name":"fun <T> publish(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Publisher<T>","description":"kotlinx.coroutines.reactive.publish","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/publish.html","searchKeys":["publish","fun <T> publish(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Publisher<T>","kotlinx.coroutines.reactive.publish"]},{"name":"fun <T> publishInternal(scope: CoroutineScope, context: CoroutineContext, exceptionOnCancelHandler: (Throwable, CoroutineContext) -> Unit, block: suspend ProducerScope<T>.() -> Unit): Publisher<T>","description":"kotlinx.coroutines.reactive.publishInternal","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/publish-internal.html","searchKeys":["publishInternal","fun <T> publishInternal(scope: CoroutineScope, context: CoroutineContext, exceptionOnCancelHandler: (Throwable, CoroutineContext) -> Unit, block: suspend ProducerScope<T>.() -> Unit): Publisher<T>","kotlinx.coroutines.reactive.publishInternal"]},{"name":"fun <in T> PublisherCoroutine(parentContext: CoroutineContext, subscriber: Subscriber<T>, exceptionOnCancelHandler: (Throwable, CoroutineContext) -> Unit)","description":"kotlinx.coroutines.reactive.PublisherCoroutine.PublisherCoroutine","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-publisher-coroutine/-publisher-coroutine.html","searchKeys":["PublisherCoroutine","fun <in T> PublisherCoroutine(parentContext: CoroutineContext, subscriber: Subscriber<T>, exceptionOnCancelHandler: (Throwable, CoroutineContext) -> Unit)","kotlinx.coroutines.reactive.PublisherCoroutine.PublisherCoroutine"]},{"name":"inline suspend fun <T> Publisher<T>.collect(action: (T) -> Unit)","description":"kotlinx.coroutines.reactive.collect","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/collect.html","searchKeys":["collect","inline suspend fun <T> Publisher<T>.collect(action: (T) -> Unit)","kotlinx.coroutines.reactive.collect"]},{"name":"interface ContextInjector","description":"kotlinx.coroutines.reactive.ContextInjector","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-context-injector/index.html","searchKeys":["ContextInjector","interface ContextInjector","kotlinx.coroutines.reactive.ContextInjector"]},{"name":"open override fun <R> registerSelectClause2(select: SelectInstance<R>, element: T, block: suspend (SendChannel<T>) -> R)","description":"kotlinx.coroutines.reactive.PublisherCoroutine.registerSelectClause2","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-publisher-coroutine/register-select-clause2.html","searchKeys":["registerSelectClause2","open override fun <R> registerSelectClause2(select: SelectInstance<R>, element: T, block: suspend (SendChannel<T>) -> R)","kotlinx.coroutines.reactive.PublisherCoroutine.registerSelectClause2"]},{"name":"open override fun cancel()","description":"kotlinx.coroutines.reactive.FlowSubscription.cancel","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-flow-subscription/cancel.html","searchKeys":["cancel","open override fun cancel()","kotlinx.coroutines.reactive.FlowSubscription.cancel"]},{"name":"open override fun cancel()","description":"kotlinx.coroutines.reactive.PublisherCoroutine.cancel","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-publisher-coroutine/cancel.html","searchKeys":["cancel","open override fun cancel()","kotlinx.coroutines.reactive.PublisherCoroutine.cancel"]},{"name":"open override fun close(cause: Throwable?): Boolean","description":"kotlinx.coroutines.reactive.PublisherCoroutine.close","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-publisher-coroutine/close.html","searchKeys":["close","open override fun close(cause: Throwable?): Boolean","kotlinx.coroutines.reactive.PublisherCoroutine.close"]},{"name":"open override fun invokeOnClose(handler: (Throwable?) -> Unit): Nothing","description":"kotlinx.coroutines.reactive.PublisherCoroutine.invokeOnClose","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-publisher-coroutine/invoke-on-close.html","searchKeys":["invokeOnClose","open override fun invokeOnClose(handler: (Throwable?) -> Unit): Nothing","kotlinx.coroutines.reactive.PublisherCoroutine.invokeOnClose"]},{"name":"open override fun request(n: Long)","description":"kotlinx.coroutines.reactive.FlowSubscription.request","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-flow-subscription/request.html","searchKeys":["request","open override fun request(n: Long)","kotlinx.coroutines.reactive.FlowSubscription.request"]},{"name":"open override fun request(n: Long)","description":"kotlinx.coroutines.reactive.PublisherCoroutine.request","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-publisher-coroutine/request.html","searchKeys":["request","open override fun request(n: Long)","kotlinx.coroutines.reactive.PublisherCoroutine.request"]},{"name":"open override fun trySend(element: T): ChannelResult<Unit>","description":"kotlinx.coroutines.reactive.PublisherCoroutine.trySend","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-publisher-coroutine/try-send.html","searchKeys":["trySend","open override fun trySend(element: T): ChannelResult<Unit>","kotlinx.coroutines.reactive.PublisherCoroutine.trySend"]},{"name":"open override val channel: SendChannel<T>","description":"kotlinx.coroutines.reactive.PublisherCoroutine.channel","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-publisher-coroutine/channel.html","searchKeys":["channel","open override val channel: SendChannel<T>","kotlinx.coroutines.reactive.PublisherCoroutine.channel"]},{"name":"open override val isClosedForSend: Boolean","description":"kotlinx.coroutines.reactive.PublisherCoroutine.isClosedForSend","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-publisher-coroutine/is-closed-for-send.html","searchKeys":["isClosedForSend","open override val isClosedForSend: Boolean","kotlinx.coroutines.reactive.PublisherCoroutine.isClosedForSend"]},{"name":"open override val onSend: SelectClause2<T, SendChannel<T>>","description":"kotlinx.coroutines.reactive.PublisherCoroutine.onSend","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-publisher-coroutine/on-send.html","searchKeys":["onSend","open override val onSend: SelectClause2<T, SendChannel<T>>","kotlinx.coroutines.reactive.PublisherCoroutine.onSend"]},{"name":"open suspend override fun send(element: T)","description":"kotlinx.coroutines.reactive.PublisherCoroutine.send","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-publisher-coroutine/send.html","searchKeys":["send","open suspend override fun send(element: T)","kotlinx.coroutines.reactive.PublisherCoroutine.send"]},{"name":"suspend fun <T> Publisher<T>.awaitFirst(): T","description":"kotlinx.coroutines.reactive.awaitFirst","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-first.html","searchKeys":["awaitFirst","suspend fun <T> Publisher<T>.awaitFirst(): T","kotlinx.coroutines.reactive.awaitFirst"]},{"name":"suspend fun <T> Publisher<T>.awaitFirstOrDefault(default: T): T","description":"kotlinx.coroutines.reactive.awaitFirstOrDefault","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-first-or-default.html","searchKeys":["awaitFirstOrDefault","suspend fun <T> Publisher<T>.awaitFirstOrDefault(default: T): T","kotlinx.coroutines.reactive.awaitFirstOrDefault"]},{"name":"suspend fun <T> Publisher<T>.awaitFirstOrElse(defaultValue: () -> T): T","description":"kotlinx.coroutines.reactive.awaitFirstOrElse","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-first-or-else.html","searchKeys":["awaitFirstOrElse","suspend fun <T> Publisher<T>.awaitFirstOrElse(defaultValue: () -> T): T","kotlinx.coroutines.reactive.awaitFirstOrElse"]},{"name":"suspend fun <T> Publisher<T>.awaitFirstOrNull(): T?","description":"kotlinx.coroutines.reactive.awaitFirstOrNull","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-first-or-null.html","searchKeys":["awaitFirstOrNull","suspend fun <T> Publisher<T>.awaitFirstOrNull(): T?","kotlinx.coroutines.reactive.awaitFirstOrNull"]},{"name":"suspend fun <T> Publisher<T>.awaitLast(): T","description":"kotlinx.coroutines.reactive.awaitLast","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-last.html","searchKeys":["awaitLast","suspend fun <T> Publisher<T>.awaitLast(): T","kotlinx.coroutines.reactive.awaitLast"]},{"name":"suspend fun <T> Publisher<T>.awaitSingle(): T","description":"kotlinx.coroutines.reactive.awaitSingle","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-single.html","searchKeys":["awaitSingle","suspend fun <T> Publisher<T>.awaitSingle(): T","kotlinx.coroutines.reactive.awaitSingle"]},{"name":"suspend fun <T> Publisher<T>.awaitSingleOrDefault(default: T): T","description":"kotlinx.coroutines.reactive.awaitSingleOrDefault","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-single-or-default.html","searchKeys":["awaitSingleOrDefault","suspend fun <T> Publisher<T>.awaitSingleOrDefault(default: T): T","kotlinx.coroutines.reactive.awaitSingleOrDefault"]},{"name":"suspend fun <T> Publisher<T>.awaitSingleOrElse(defaultValue: () -> T): T","description":"kotlinx.coroutines.reactive.awaitSingleOrElse","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-single-or-else.html","searchKeys":["awaitSingleOrElse","suspend fun <T> Publisher<T>.awaitSingleOrElse(defaultValue: () -> T): T","kotlinx.coroutines.reactive.awaitSingleOrElse"]},{"name":"suspend fun <T> Publisher<T>.awaitSingleOrNull(): T?","description":"kotlinx.coroutines.reactive.awaitSingleOrNull","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/await-single-or-null.html","searchKeys":["awaitSingleOrNull","suspend fun <T> Publisher<T>.awaitSingleOrNull(): T?","kotlinx.coroutines.reactive.awaitSingleOrNull"]},{"name":"val flow: Flow<T>","description":"kotlinx.coroutines.reactive.FlowSubscription.flow","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-flow-subscription/flow.html","searchKeys":["flow","val flow: Flow<T>","kotlinx.coroutines.reactive.FlowSubscription.flow"]},{"name":"val subscriber: Subscriber<T>","description":"kotlinx.coroutines.reactive.PublisherCoroutine.subscriber","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-publisher-coroutine/subscriber.html","searchKeys":["subscriber","val subscriber: Subscriber<T>","kotlinx.coroutines.reactive.PublisherCoroutine.subscriber"]},{"name":"val subscriber: Subscriber<in T>","description":"kotlinx.coroutines.reactive.FlowSubscription.subscriber","location":"kotlinx-coroutines-reactive/kotlinx.coroutines.reactive/-flow-subscription/subscriber.html","searchKeys":["subscriber","val subscriber: Subscriber<in T>","kotlinx.coroutines.reactive.FlowSubscription.subscriber"]},{"name":"class SchedulerCoroutineDispatcher(val scheduler: Scheduler) : CoroutineDispatcher, Delay","description":"kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/-scheduler-coroutine-dispatcher/index.html","searchKeys":["SchedulerCoroutineDispatcher","class SchedulerCoroutineDispatcher(val scheduler: Scheduler) : CoroutineDispatcher, Delay","kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher"]},{"name":"fun <T : Any> Deferred<T>.asSingle(context: CoroutineContext): Single<T>","description":"kotlinx.coroutines.rx2.asSingle","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-single.html","searchKeys":["asSingle","fun <T : Any> Deferred<T>.asSingle(context: CoroutineContext): Single<T>","kotlinx.coroutines.rx2.asSingle"]},{"name":"fun <T : Any> Flow<T>.asFlowable(context: CoroutineContext = EmptyCoroutineContext): Flowable<T>","description":"kotlinx.coroutines.rx2.asFlowable","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-flowable.html","searchKeys":["asFlowable","fun <T : Any> Flow<T>.asFlowable(context: CoroutineContext = EmptyCoroutineContext): Flowable<T>","kotlinx.coroutines.rx2.asFlowable"]},{"name":"fun <T : Any> Flow<T>.asObservable(context: CoroutineContext = EmptyCoroutineContext): Observable<T>","description":"kotlinx.coroutines.rx2.asObservable","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-observable.html","searchKeys":["asObservable","fun <T : Any> Flow<T>.asObservable(context: CoroutineContext = EmptyCoroutineContext): Observable<T>","kotlinx.coroutines.rx2.asObservable"]},{"name":"fun <T : Any> ObservableSource<T>.asFlow(): Flow<T>","description":"kotlinx.coroutines.rx2.asFlow","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-flow.html","searchKeys":["asFlow","fun <T : Any> ObservableSource<T>.asFlow(): Flow<T>","kotlinx.coroutines.rx2.asFlow"]},{"name":"fun <T : Any> ReceiveChannel<T>.asObservable(context: CoroutineContext): Observable<T>","description":"kotlinx.coroutines.rx2.asObservable","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-observable.html","searchKeys":["asObservable","fun <T : Any> ReceiveChannel<T>.asObservable(context: CoroutineContext): Observable<T>","kotlinx.coroutines.rx2.asObservable"]},{"name":"fun <T : Any> rxFlowable(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Flowable<T>","description":"kotlinx.coroutines.rx2.rxFlowable","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-flowable.html","searchKeys":["rxFlowable","fun <T : Any> rxFlowable(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Flowable<T>","kotlinx.coroutines.rx2.rxFlowable"]},{"name":"fun <T : Any> rxObservable(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Observable<T>","description":"kotlinx.coroutines.rx2.rxObservable","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-observable.html","searchKeys":["rxObservable","fun <T : Any> rxObservable(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Observable<T>","kotlinx.coroutines.rx2.rxObservable"]},{"name":"fun <T : Any> rxSingle(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T): Single<T>","description":"kotlinx.coroutines.rx2.rxSingle","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-single.html","searchKeys":["rxSingle","fun <T : Any> rxSingle(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T): Single<T>","kotlinx.coroutines.rx2.rxSingle"]},{"name":"fun <T> Deferred<T?>.asMaybe(context: CoroutineContext): Maybe<T>","description":"kotlinx.coroutines.rx2.asMaybe","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-maybe.html","searchKeys":["asMaybe","fun <T> Deferred<T?>.asMaybe(context: CoroutineContext): Maybe<T>","kotlinx.coroutines.rx2.asMaybe"]},{"name":"fun <T> rxMaybe(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T?): Maybe<T>","description":"kotlinx.coroutines.rx2.rxMaybe","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-maybe.html","searchKeys":["rxMaybe","fun <T> rxMaybe(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T?): Maybe<T>","kotlinx.coroutines.rx2.rxMaybe"]},{"name":"fun CoroutineDispatcher.asScheduler(): Scheduler","description":"kotlinx.coroutines.rx2.asScheduler","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-scheduler.html","searchKeys":["asScheduler","fun CoroutineDispatcher.asScheduler(): Scheduler","kotlinx.coroutines.rx2.asScheduler"]},{"name":"fun Job.asCompletable(context: CoroutineContext): Completable","description":"kotlinx.coroutines.rx2.asCompletable","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-completable.html","searchKeys":["asCompletable","fun Job.asCompletable(context: CoroutineContext): Completable","kotlinx.coroutines.rx2.asCompletable"]},{"name":"fun Scheduler.asCoroutineDispatcher(): CoroutineDispatcher","description":"kotlinx.coroutines.rx2.asCoroutineDispatcher","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/as-coroutine-dispatcher.html","searchKeys":["asCoroutineDispatcher","fun Scheduler.asCoroutineDispatcher(): CoroutineDispatcher","kotlinx.coroutines.rx2.asCoroutineDispatcher"]},{"name":"fun SchedulerCoroutineDispatcher(scheduler: Scheduler)","description":"kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.SchedulerCoroutineDispatcher","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/-scheduler-coroutine-dispatcher/-scheduler-coroutine-dispatcher.html","searchKeys":["SchedulerCoroutineDispatcher","fun SchedulerCoroutineDispatcher(scheduler: Scheduler)","kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.SchedulerCoroutineDispatcher"]},{"name":"fun rxCompletable(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> Unit): Completable","description":"kotlinx.coroutines.rx2.rxCompletable","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/rx-completable.html","searchKeys":["rxCompletable","fun rxCompletable(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> Unit): Completable","kotlinx.coroutines.rx2.rxCompletable"]},{"name":"inline suspend fun <T> MaybeSource<T>.collect(action: (T) -> Unit)","description":"kotlinx.coroutines.rx2.collect","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/collect.html","searchKeys":["collect","inline suspend fun <T> MaybeSource<T>.collect(action: (T) -> Unit)","kotlinx.coroutines.rx2.collect"]},{"name":"inline suspend fun <T> ObservableSource<T>.collect(action: (T) -> Unit)","description":"kotlinx.coroutines.rx2.collect","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/collect.html","searchKeys":["collect","inline suspend fun <T> ObservableSource<T>.collect(action: (T) -> Unit)","kotlinx.coroutines.rx2.collect"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.equals","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/-scheduler-coroutine-dispatcher/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.equals"]},{"name":"open override fun dispatch(context: CoroutineContext, block: Runnable)","description":"kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.dispatch","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/-scheduler-coroutine-dispatcher/dispatch.html","searchKeys":["dispatch","open override fun dispatch(context: CoroutineContext, block: Runnable)","kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.dispatch"]},{"name":"open override fun hashCode(): Int","description":"kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.hashCode","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/-scheduler-coroutine-dispatcher/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.hashCode"]},{"name":"open override fun invokeOnTimeout(timeMillis: Long, block: Runnable, context: CoroutineContext): DisposableHandle","description":"kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.invokeOnTimeout","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/-scheduler-coroutine-dispatcher/invoke-on-timeout.html","searchKeys":["invokeOnTimeout","open override fun invokeOnTimeout(timeMillis: Long, block: Runnable, context: CoroutineContext): DisposableHandle","kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.invokeOnTimeout"]},{"name":"open override fun scheduleResumeAfterDelay(timeMillis: Long, continuation: CancellableContinuation<Unit>)","description":"kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.scheduleResumeAfterDelay","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/-scheduler-coroutine-dispatcher/schedule-resume-after-delay.html","searchKeys":["scheduleResumeAfterDelay","open override fun scheduleResumeAfterDelay(timeMillis: Long, continuation: CancellableContinuation<Unit>)","kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.scheduleResumeAfterDelay"]},{"name":"open override fun toString(): String","description":"kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.toString","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/-scheduler-coroutine-dispatcher/to-string.html","searchKeys":["toString","open override fun toString(): String","kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.toString"]},{"name":"suspend fun <T> MaybeSource<T>.await(): T?","description":"kotlinx.coroutines.rx2.await","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await.html","searchKeys":["await","suspend fun <T> MaybeSource<T>.await(): T?","kotlinx.coroutines.rx2.await"]},{"name":"suspend fun <T> MaybeSource<T>.awaitOrDefault(default: T): T","description":"kotlinx.coroutines.rx2.awaitOrDefault","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-or-default.html","searchKeys":["awaitOrDefault","suspend fun <T> MaybeSource<T>.awaitOrDefault(default: T): T","kotlinx.coroutines.rx2.awaitOrDefault"]},{"name":"suspend fun <T> MaybeSource<T>.awaitSingle(): T","description":"kotlinx.coroutines.rx2.awaitSingle","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-single.html","searchKeys":["awaitSingle","suspend fun <T> MaybeSource<T>.awaitSingle(): T","kotlinx.coroutines.rx2.awaitSingle"]},{"name":"suspend fun <T> MaybeSource<T>.awaitSingleOrNull(): T?","description":"kotlinx.coroutines.rx2.awaitSingleOrNull","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-single-or-null.html","searchKeys":["awaitSingleOrNull","suspend fun <T> MaybeSource<T>.awaitSingleOrNull(): T?","kotlinx.coroutines.rx2.awaitSingleOrNull"]},{"name":"suspend fun <T> ObservableSource<T>.awaitFirst(): T","description":"kotlinx.coroutines.rx2.awaitFirst","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-first.html","searchKeys":["awaitFirst","suspend fun <T> ObservableSource<T>.awaitFirst(): T","kotlinx.coroutines.rx2.awaitFirst"]},{"name":"suspend fun <T> ObservableSource<T>.awaitFirstOrDefault(default: T): T","description":"kotlinx.coroutines.rx2.awaitFirstOrDefault","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-first-or-default.html","searchKeys":["awaitFirstOrDefault","suspend fun <T> ObservableSource<T>.awaitFirstOrDefault(default: T): T","kotlinx.coroutines.rx2.awaitFirstOrDefault"]},{"name":"suspend fun <T> ObservableSource<T>.awaitFirstOrElse(defaultValue: () -> T): T","description":"kotlinx.coroutines.rx2.awaitFirstOrElse","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-first-or-else.html","searchKeys":["awaitFirstOrElse","suspend fun <T> ObservableSource<T>.awaitFirstOrElse(defaultValue: () -> T): T","kotlinx.coroutines.rx2.awaitFirstOrElse"]},{"name":"suspend fun <T> ObservableSource<T>.awaitFirstOrNull(): T?","description":"kotlinx.coroutines.rx2.awaitFirstOrNull","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-first-or-null.html","searchKeys":["awaitFirstOrNull","suspend fun <T> ObservableSource<T>.awaitFirstOrNull(): T?","kotlinx.coroutines.rx2.awaitFirstOrNull"]},{"name":"suspend fun <T> ObservableSource<T>.awaitLast(): T","description":"kotlinx.coroutines.rx2.awaitLast","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-last.html","searchKeys":["awaitLast","suspend fun <T> ObservableSource<T>.awaitLast(): T","kotlinx.coroutines.rx2.awaitLast"]},{"name":"suspend fun <T> ObservableSource<T>.awaitSingle(): T","description":"kotlinx.coroutines.rx2.awaitSingle","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await-single.html","searchKeys":["awaitSingle","suspend fun <T> ObservableSource<T>.awaitSingle(): T","kotlinx.coroutines.rx2.awaitSingle"]},{"name":"suspend fun <T> SingleSource<T>.await(): T","description":"kotlinx.coroutines.rx2.await","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await.html","searchKeys":["await","suspend fun <T> SingleSource<T>.await(): T","kotlinx.coroutines.rx2.await"]},{"name":"suspend fun CompletableSource.await()","description":"kotlinx.coroutines.rx2.await","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/await.html","searchKeys":["await","suspend fun CompletableSource.await()","kotlinx.coroutines.rx2.await"]},{"name":"val scheduler: Scheduler","description":"kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.scheduler","location":"kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/-scheduler-coroutine-dispatcher/scheduler.html","searchKeys":["scheduler","val scheduler: Scheduler","kotlinx.coroutines.rx2.SchedulerCoroutineDispatcher.scheduler"]},{"name":"class SchedulerCoroutineDispatcher(val scheduler: Scheduler) : CoroutineDispatcher, Delay","description":"kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/-scheduler-coroutine-dispatcher/index.html","searchKeys":["SchedulerCoroutineDispatcher","class SchedulerCoroutineDispatcher(val scheduler: Scheduler) : CoroutineDispatcher, Delay","kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher"]},{"name":"fun <T : Any> Deferred<T>.asSingle(context: CoroutineContext): Single<T>","description":"kotlinx.coroutines.rx3.asSingle","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/as-single.html","searchKeys":["asSingle","fun <T : Any> Deferred<T>.asSingle(context: CoroutineContext): Single<T>","kotlinx.coroutines.rx3.asSingle"]},{"name":"fun <T : Any> Flow<T>.asFlowable(context: CoroutineContext = EmptyCoroutineContext): Flowable<T>","description":"kotlinx.coroutines.rx3.asFlowable","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/as-flowable.html","searchKeys":["asFlowable","fun <T : Any> Flow<T>.asFlowable(context: CoroutineContext = EmptyCoroutineContext): Flowable<T>","kotlinx.coroutines.rx3.asFlowable"]},{"name":"fun <T : Any> Flow<T>.asObservable(context: CoroutineContext = EmptyCoroutineContext): Observable<T>","description":"kotlinx.coroutines.rx3.asObservable","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/as-observable.html","searchKeys":["asObservable","fun <T : Any> Flow<T>.asObservable(context: CoroutineContext = EmptyCoroutineContext): Observable<T>","kotlinx.coroutines.rx3.asObservable"]},{"name":"fun <T : Any> ObservableSource<T>.asFlow(): Flow<T>","description":"kotlinx.coroutines.rx3.asFlow","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/as-flow.html","searchKeys":["asFlow","fun <T : Any> ObservableSource<T>.asFlow(): Flow<T>","kotlinx.coroutines.rx3.asFlow"]},{"name":"fun <T : Any> rxFlowable(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Flowable<T>","description":"kotlinx.coroutines.rx3.rxFlowable","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/rx-flowable.html","searchKeys":["rxFlowable","fun <T : Any> rxFlowable(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Flowable<T>","kotlinx.coroutines.rx3.rxFlowable"]},{"name":"fun <T : Any> rxObservable(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Observable<T>","description":"kotlinx.coroutines.rx3.rxObservable","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/rx-observable.html","searchKeys":["rxObservable","fun <T : Any> rxObservable(context: CoroutineContext = EmptyCoroutineContext, block: suspend ProducerScope<T>.() -> Unit): Observable<T>","kotlinx.coroutines.rx3.rxObservable"]},{"name":"fun <T : Any> rxSingle(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T): Single<T>","description":"kotlinx.coroutines.rx3.rxSingle","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/rx-single.html","searchKeys":["rxSingle","fun <T : Any> rxSingle(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T): Single<T>","kotlinx.coroutines.rx3.rxSingle"]},{"name":"fun <T> Deferred<T?>.asMaybe(context: CoroutineContext): Maybe<T>","description":"kotlinx.coroutines.rx3.asMaybe","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/as-maybe.html","searchKeys":["asMaybe","fun <T> Deferred<T?>.asMaybe(context: CoroutineContext): Maybe<T>","kotlinx.coroutines.rx3.asMaybe"]},{"name":"fun <T> rxMaybe(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T?): Maybe<T>","description":"kotlinx.coroutines.rx3.rxMaybe","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/rx-maybe.html","searchKeys":["rxMaybe","fun <T> rxMaybe(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> T?): Maybe<T>","kotlinx.coroutines.rx3.rxMaybe"]},{"name":"fun CoroutineDispatcher.asScheduler(): Scheduler","description":"kotlinx.coroutines.rx3.asScheduler","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/as-scheduler.html","searchKeys":["asScheduler","fun CoroutineDispatcher.asScheduler(): Scheduler","kotlinx.coroutines.rx3.asScheduler"]},{"name":"fun Job.asCompletable(context: CoroutineContext): Completable","description":"kotlinx.coroutines.rx3.asCompletable","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/as-completable.html","searchKeys":["asCompletable","fun Job.asCompletable(context: CoroutineContext): Completable","kotlinx.coroutines.rx3.asCompletable"]},{"name":"fun Scheduler.asCoroutineDispatcher(): CoroutineDispatcher","description":"kotlinx.coroutines.rx3.asCoroutineDispatcher","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/as-coroutine-dispatcher.html","searchKeys":["asCoroutineDispatcher","fun Scheduler.asCoroutineDispatcher(): CoroutineDispatcher","kotlinx.coroutines.rx3.asCoroutineDispatcher"]},{"name":"fun SchedulerCoroutineDispatcher(scheduler: Scheduler)","description":"kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.SchedulerCoroutineDispatcher","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/-scheduler-coroutine-dispatcher/-scheduler-coroutine-dispatcher.html","searchKeys":["SchedulerCoroutineDispatcher","fun SchedulerCoroutineDispatcher(scheduler: Scheduler)","kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.SchedulerCoroutineDispatcher"]},{"name":"fun rxCompletable(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> Unit): Completable","description":"kotlinx.coroutines.rx3.rxCompletable","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/rx-completable.html","searchKeys":["rxCompletable","fun rxCompletable(context: CoroutineContext = EmptyCoroutineContext, block: suspend CoroutineScope.() -> Unit): Completable","kotlinx.coroutines.rx3.rxCompletable"]},{"name":"inline suspend fun <T> MaybeSource<T>.collect(action: (T) -> Unit)","description":"kotlinx.coroutines.rx3.collect","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/collect.html","searchKeys":["collect","inline suspend fun <T> MaybeSource<T>.collect(action: (T) -> Unit)","kotlinx.coroutines.rx3.collect"]},{"name":"inline suspend fun <T> ObservableSource<T>.collect(action: (T) -> Unit)","description":"kotlinx.coroutines.rx3.collect","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/collect.html","searchKeys":["collect","inline suspend fun <T> ObservableSource<T>.collect(action: (T) -> Unit)","kotlinx.coroutines.rx3.collect"]},{"name":"open operator override fun equals(other: Any?): Boolean","description":"kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.equals","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/-scheduler-coroutine-dispatcher/equals.html","searchKeys":["equals","open operator override fun equals(other: Any?): Boolean","kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.equals"]},{"name":"open override fun dispatch(context: CoroutineContext, block: Runnable)","description":"kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.dispatch","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/-scheduler-coroutine-dispatcher/dispatch.html","searchKeys":["dispatch","open override fun dispatch(context: CoroutineContext, block: Runnable)","kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.dispatch"]},{"name":"open override fun hashCode(): Int","description":"kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.hashCode","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/-scheduler-coroutine-dispatcher/hash-code.html","searchKeys":["hashCode","open override fun hashCode(): Int","kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.hashCode"]},{"name":"open override fun invokeOnTimeout(timeMillis: Long, block: Runnable, context: CoroutineContext): DisposableHandle","description":"kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.invokeOnTimeout","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/-scheduler-coroutine-dispatcher/invoke-on-timeout.html","searchKeys":["invokeOnTimeout","open override fun invokeOnTimeout(timeMillis: Long, block: Runnable, context: CoroutineContext): DisposableHandle","kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.invokeOnTimeout"]},{"name":"open override fun scheduleResumeAfterDelay(timeMillis: Long, continuation: CancellableContinuation<Unit>)","description":"kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.scheduleResumeAfterDelay","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/-scheduler-coroutine-dispatcher/schedule-resume-after-delay.html","searchKeys":["scheduleResumeAfterDelay","open override fun scheduleResumeAfterDelay(timeMillis: Long, continuation: CancellableContinuation<Unit>)","kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.scheduleResumeAfterDelay"]},{"name":"open override fun toString(): String","description":"kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.toString","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/-scheduler-coroutine-dispatcher/to-string.html","searchKeys":["toString","open override fun toString(): String","kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.toString"]},{"name":"suspend fun <T> MaybeSource<T>.await(): T?","description":"kotlinx.coroutines.rx3.await","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await.html","searchKeys":["await","suspend fun <T> MaybeSource<T>.await(): T?","kotlinx.coroutines.rx3.await"]},{"name":"suspend fun <T> MaybeSource<T>.awaitOrDefault(default: T): T","description":"kotlinx.coroutines.rx3.awaitOrDefault","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-or-default.html","searchKeys":["awaitOrDefault","suspend fun <T> MaybeSource<T>.awaitOrDefault(default: T): T","kotlinx.coroutines.rx3.awaitOrDefault"]},{"name":"suspend fun <T> MaybeSource<T>.awaitSingle(): T","description":"kotlinx.coroutines.rx3.awaitSingle","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-single.html","searchKeys":["awaitSingle","suspend fun <T> MaybeSource<T>.awaitSingle(): T","kotlinx.coroutines.rx3.awaitSingle"]},{"name":"suspend fun <T> MaybeSource<T>.awaitSingleOrNull(): T?","description":"kotlinx.coroutines.rx3.awaitSingleOrNull","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-single-or-null.html","searchKeys":["awaitSingleOrNull","suspend fun <T> MaybeSource<T>.awaitSingleOrNull(): T?","kotlinx.coroutines.rx3.awaitSingleOrNull"]},{"name":"suspend fun <T> ObservableSource<T>.awaitFirst(): T","description":"kotlinx.coroutines.rx3.awaitFirst","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-first.html","searchKeys":["awaitFirst","suspend fun <T> ObservableSource<T>.awaitFirst(): T","kotlinx.coroutines.rx3.awaitFirst"]},{"name":"suspend fun <T> ObservableSource<T>.awaitFirstOrDefault(default: T): T","description":"kotlinx.coroutines.rx3.awaitFirstOrDefault","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-first-or-default.html","searchKeys":["awaitFirstOrDefault","suspend fun <T> ObservableSource<T>.awaitFirstOrDefault(default: T): T","kotlinx.coroutines.rx3.awaitFirstOrDefault"]},{"name":"suspend fun <T> ObservableSource<T>.awaitFirstOrElse(defaultValue: () -> T): T","description":"kotlinx.coroutines.rx3.awaitFirstOrElse","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-first-or-else.html","searchKeys":["awaitFirstOrElse","suspend fun <T> ObservableSource<T>.awaitFirstOrElse(defaultValue: () -> T): T","kotlinx.coroutines.rx3.awaitFirstOrElse"]},{"name":"suspend fun <T> ObservableSource<T>.awaitFirstOrNull(): T?","description":"kotlinx.coroutines.rx3.awaitFirstOrNull","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-first-or-null.html","searchKeys":["awaitFirstOrNull","suspend fun <T> ObservableSource<T>.awaitFirstOrNull(): T?","kotlinx.coroutines.rx3.awaitFirstOrNull"]},{"name":"suspend fun <T> ObservableSource<T>.awaitLast(): T","description":"kotlinx.coroutines.rx3.awaitLast","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-last.html","searchKeys":["awaitLast","suspend fun <T> ObservableSource<T>.awaitLast(): T","kotlinx.coroutines.rx3.awaitLast"]},{"name":"suspend fun <T> ObservableSource<T>.awaitSingle(): T","description":"kotlinx.coroutines.rx3.awaitSingle","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await-single.html","searchKeys":["awaitSingle","suspend fun <T> ObservableSource<T>.awaitSingle(): T","kotlinx.coroutines.rx3.awaitSingle"]},{"name":"suspend fun <T> SingleSource<T>.await(): T","description":"kotlinx.coroutines.rx3.await","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await.html","searchKeys":["await","suspend fun <T> SingleSource<T>.await(): T","kotlinx.coroutines.rx3.await"]},{"name":"suspend fun CompletableSource.await()","description":"kotlinx.coroutines.rx3.await","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/await.html","searchKeys":["await","suspend fun CompletableSource.await()","kotlinx.coroutines.rx3.await"]},{"name":"val scheduler: Scheduler","description":"kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.scheduler","location":"kotlinx-coroutines-rx3/kotlinx.coroutines.rx3/-scheduler-coroutine-dispatcher/scheduler.html","searchKeys":["scheduler","val scheduler: Scheduler","kotlinx.coroutines.rx3.SchedulerCoroutineDispatcher.scheduler"]}]