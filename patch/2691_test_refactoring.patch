Index: plugins/base/src/test/kotlin/content/functions/ContentForBriefTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/plugins/base/src/test/kotlin/content/functions/ContentForBriefTest.kt b/plugins/base/src/test/kotlin/content/functions/ContentForBriefTest.kt
--- a/plugins/base/src/test/kotlin/content/functions/ContentForBriefTest.kt	(revision 235e3aca67da795c1a05786fd760ca2687d2c70a)
+++ b/plugins/base/src/test/kotlin/content/functions/ContentForBriefTest.kt	(date 1665599789914)
@@ -1,11 +1,12 @@
 package content.functions

 import org.jetbrains.dokka.base.testApi.testRunner.BaseAbstractTest
+import org.jetbrains.dokka.links.DRI
 import org.jetbrains.dokka.links.TypeConstructor
 import org.jetbrains.dokka.model.DClass
 import org.jetbrains.dokka.model.dfs
 import org.jetbrains.dokka.pages.*
-import org.junit.Assert.assertEquals
+import org.junit.jupiter.api.Assertions.*
 import org.junit.jupiter.api.Test
 import kotlin.test.assertNotNull
 import kotlin.test.assertNull
@@ -56,67 +57,67 @@
             |}
         """.trimIndent()

-    /**
-     * All constructors are merged in one block (like overloaded functions).
-     * That leads to the structure where content block (`constructorsAndBriefs`) consist of plain list of constructors and briefs.
-     * In that list constructor is above, brief is below.
-     */
-    private fun `constructor should not inherit docs from its parameter`(
-        constructor: TypeConstructor,
-        expectedDocs: String
-    ) {
-        testInline(codeWithSecondaryAndPrimaryConstructorsDocumented, testConfiguration) {
-            pagesTransformationStage = { module ->
-                val classPage =
-                    module.dfs { it.name == "Example" && (it as WithDocumentables).documentables.firstOrNull() is DClass } as ContentPage
-                val constructorsTable =
-                    classPage.content.dfs { it is ContentTable && it.dci.kind == ContentKind.Constructors } as ContentTable
-
-                val constructorsAndBriefs =
-                    constructorsTable.dfs { it is ContentGroup && it.dci.kind == ContentKind.SourceSetDependentHint }?.children
-                assertNotNull(constructorsAndBriefs, "Content node with constructors and briefs is not found")
-
-                val constructorIndex = constructorsAndBriefs.indexOfFirst {
-                    it.dci.dri.first().callable?.params?.first() == constructor
-                }
-                val constructorDocs =
-                    constructorsAndBriefs[constructorIndex + 1] // expect that the relevant comment is below the constructor
-                        .dfs { it is ContentText && it.dci.kind == ContentKind.Comment } as ContentText
-
-                assertEquals(expectedDocs, constructorDocs.text)
-            }
-        }
-    }
-
-
     @Test
     fun `primary constructor should not inherit docs from its parameter`() {
-        `constructor should not inherit docs from its parameter`(
-            TypeConstructor(
-                "kotlin.Int",
-                emptyList()
-            ),
-            "constructor docs"
-        )
+        testInline(codeWithSecondaryAndPrimaryConstructorsDocumented, testConfiguration) {
+            pagesTransformationStage = { module ->
+                val classPage = module.findClassPage("Example")
+
+                val constructorsWithBriefs = classPage.findConstructorsWithBriefs()
+                val constructorDocs = constructorsWithBriefs.findConstructorDocs {
+                    it.callable?.params?.first() == TypeConstructor("kotlin.Int", emptyList())
+                }
+
+                assertEquals("constructor docs", constructorDocs.text)
+            }
+        }
     }

     @Test
     fun `secondary constructor should not inherit docs from its parameter`() {
-        `constructor should not inherit docs from its parameter`(
-            TypeConstructor(
-                "kotlin.String",
-                emptyList()
-            ),
-            "secondary constructor"
-        )
+        testInline(codeWithSecondaryAndPrimaryConstructorsDocumented, testConfiguration) {
+            pagesTransformationStage = { module ->
+                val classPage = module.findClassPage("Example")
+
+                val constructorsWithBriefs = classPage.findConstructorsWithBriefs()
+                val constructorDocs = constructorsWithBriefs.findConstructorDocs {
+                    it.callable?.params?.first() == TypeConstructor("kotlin.String", emptyList())
+                }
+
+                assertEquals("secondary constructor", constructorDocs.text)
+            }
+        }
+    }
+
+    /**
+     * All constructors are merged in one block (like overloaded functions).
+     * That leads to the structure where content block (`constructorsWithBriefs`) consist of plain list
+     * of constructors and briefs. In that list constructor is above, brief is below.
+     */
+    private fun ContentPage.findConstructorsWithBriefs(): List<ContentNode> {
+        val constructorsTable = this.content.dfs {
+            it is ContentTable && it.dci.kind == ContentKind.Constructors
+        } as ContentTable
+
+        val constructorsWithBriefs = constructorsTable.dfs {
+            it is ContentGroup && it.dci.kind == ContentKind.SourceSetDependentHint
+        }?.children
+        assertNotNull(constructorsWithBriefs, "Content node with constructors and briefs is not found")
+
+        return constructorsWithBriefs
+    }
+
+    private fun List<ContentNode>.findConstructorDocs(constructorMatcher: (DRI) -> Boolean): ContentText {
+        val constructorIndex = this.indexOfFirst { constructorMatcher(it.dci.dri.first()) }
+        return this[constructorIndex + 1] // expect that the relevant comment is below the constructor
+            .dfs { it is ContentText && it.dci.kind == ContentKind.Comment } as ContentText
     }

     @Test
     fun `primary constructor should not inherit docs from its parameter when no specific docs are provided`() {
         testInline(codeWithDocumentedParameter, testConfiguration) {
             pagesTransformationStage = { module ->
-                val classPage =
-                    module.dfs { it.name == "Example" && (it as WithDocumentables).documentables.firstOrNull() is DClass } as ContentPage
+                val classPage = module.findClassPage("Example")
                 val constructorsTable =
                     classPage.content.dfs { it is ContentTable && it.dci.kind == ContentKind.Constructors } as ContentTable

@@ -326,6 +327,12 @@
         }
     }

+    private fun RootPageNode.findClassPage(className: String): ContentPage {
+        return this.dfs {
+            it.name == className && (it as WithDocumentables).documentables.firstOrNull() is DClass
+        } as ContentPage
+    }
+
     private fun RootPageNode.singleFunctionDescription(className: String): ContentGroup {
         val classPage = dfs { it.name == className && (it as WithDocumentables).documentables.firstOrNull() is DClass } as ContentPage
         val functionsTable =
@@ -335,4 +342,4 @@
         val function = functionsTable.children.first()
         return function.dfs { it is ContentGroup && it.dci.kind == ContentKind.Comment && it.children.all { it is ContentText } } as ContentGroup
     }
-}
\ No newline at end of file
+}
